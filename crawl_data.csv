,1,2,3,4
0,,,,
1,云服务器,专用宿主机相关接口,创建CDH实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsResponse;  public class AllocateHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             AllocateHostsRequest req = AllocateHostsRequest.fromJsonString(params, AllocateHostsRequest.class);                          AllocateHostsResponse resp = client.AllocateHosts(req);                          System.out.println(AllocateHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
2,云服务器,专用宿主机相关接口,查看CDH实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsResponse;  public class AllocateHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             AllocateHostsRequest req = AllocateHostsRequest.fromJsonString(params, AllocateHostsRequest.class);                          AllocateHostsResponse resp = client.AllocateHosts(req);                          System.out.println(AllocateHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
3,云服务器,专用宿主机相关接口,修改CDH实例的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.AllocateHostsResponse;  public class AllocateHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             AllocateHostsRequest req = AllocateHostsRequest.fromJsonString(params, AllocateHostsRequest.class);                          AllocateHostsResponse resp = client.AllocateHosts(req);                          System.out.println(AllocateHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
4,云服务器,专用宿主机相关接口,续费CDH实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeHostsResponse;  public class DescribeHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHostsRequest req = DescribeHostsRequest.fromJsonString(params, DescribeHostsRequest.class);                          DescribeHostsResponse resp = client.DescribeHosts(req);                          System.out.println(DescribeHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
5,云服务器,地域相关接口,查询地域列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RenewHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.RenewHostsResponse;  public class RenewHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RenewHostsRequest req = RenewHostsRequest.fromJsonString(params, RenewHostsRequest.class);                          RenewHostsResponse resp = client.RenewHosts(req);                          System.out.println(RenewHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
6,云服务器,地域相关接口,查询可用区列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RenewHostsRequest; import com.tencentcloudapi.cvm.v20170312.models.RenewHostsResponse;  public class RenewHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RenewHostsRequest req = RenewHostsRequest.fromJsonString(params, RenewHostsRequest.class);                          RenewHostsResponse resp = client.RenewHosts(req);                          System.out.println(RenewHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
7,云服务器,实例相关接口,绑定安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeZonesRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeZonesResponse;  public class DescribeZones {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZonesRequest req = DescribeZonesRequest.fromJsonString(params, DescribeZonesRequest.class);                          DescribeZonesResponse resp = client.DescribeZones(req);                          System.out.println(DescribeZonesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
8,云服务器,实例相关接口,创建分散置放群组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeZonesRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeZonesResponse;  public class DescribeZones {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZonesRequest req = DescribeZonesRequest.fromJsonString(params, DescribeZonesRequest.class);                          DescribeZonesResponse resp = client.DescribeZones(req);                          System.out.println(DescribeZonesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
9,云服务器,实例相关接口,删除分散置放群组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.AssociateSecurityGroupsRequest; import com.tencentcloudapi.cvm.v20170312.models.AssociateSecurityGroupsResponse;  public class AssociateSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             AssociateSecurityGroupsRequest req = AssociateSecurityGroupsRequest.fromJsonString(params, AssociateSecurityGroupsRequest.class);                          AssociateSecurityGroupsResponse resp = client.AssociateSecurityGroups(req);                          System.out.println(AssociateSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
10,云服务器,实例相关接口,查询置放群组配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.CreateDisasterRecoverGroupRequest; import com.tencentcloudapi.cvm.v20170312.models.CreateDisasterRecoverGroupResponse;  public class CreateDisasterRecoverGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDisasterRecoverGroupRequest req = CreateDisasterRecoverGroupRequest.fromJsonString(params, CreateDisasterRecoverGroupRequest.class);                          CreateDisasterRecoverGroupResponse resp = client.CreateDisasterRecoverGroup(req);                          System.out.println(CreateDisasterRecoverGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
11,云服务器,实例相关接口,查询分散置放群组信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DeleteDisasterRecoverGroupsRequest; import com.tencentcloudapi.cvm.v20170312.models.DeleteDisasterRecoverGroupsResponse;  public class DeleteDisasterRecoverGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDisasterRecoverGroupsRequest req = DeleteDisasterRecoverGroupsRequest.fromJsonString(params, DeleteDisasterRecoverGroupsRequest.class);                          DeleteDisasterRecoverGroupsResponse resp = client.DeleteDisasterRecoverGroups(req);                          System.out.println(DeleteDisasterRecoverGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
12,云服务器,实例相关接口,查询所支持的实例机型族信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeDisasterRecoverGroupQuotaRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeDisasterRecoverGroupQuotaResponse;  public class DescribeDisasterRecoverGroupQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDisasterRecoverGroupQuotaRequest req = DescribeDisasterRecoverGroupQuotaRequest.fromJsonString(params, DescribeDisasterRecoverGroupQuotaRequest.class);                          DescribeDisasterRecoverGroupQuotaResponse resp = client.DescribeDisasterRecoverGroupQuota(req);                          System.out.println(DescribeDisasterRecoverGroupQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
13,云服务器,实例相关接口,查询实例带宽配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeDisasterRecoverGroupsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeDisasterRecoverGroupsResponse;  public class DescribeDisasterRecoverGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDisasterRecoverGroupsRequest req = DescribeDisasterRecoverGroupsRequest.fromJsonString(params, DescribeDisasterRecoverGroupsRequest.class);                          DescribeDisasterRecoverGroupsResponse resp = client.DescribeDisasterRecoverGroups(req);                          System.out.println(DescribeDisasterRecoverGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
14,云服务器,实例相关接口,查看实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceFamilyConfigsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceFamilyConfigsResponse;  public class DescribeInstanceFamilyConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceFamilyConfigsRequest req = DescribeInstanceFamilyConfigsRequest.fromJsonString(params, DescribeInstanceFamilyConfigsRequest.class);                          DescribeInstanceFamilyConfigsResponse resp = client.DescribeInstanceFamilyConfigs(req);                          System.out.println(DescribeInstanceFamilyConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
15,云服务器,实例相关接口,查询实例操作限制,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceInternetBandwidthConfigsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceInternetBandwidthConfigsResponse;  public class DescribeInstanceInternetBandwidthConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceInternetBandwidthConfigsRequest req = DescribeInstanceInternetBandwidthConfigsRequest.fromJsonString(params, DescribeInstanceInternetBandwidthConfigsRequest.class);                          DescribeInstanceInternetBandwidthConfigsResponse resp = client.DescribeInstanceInternetBandwidthConfigs(req);                          System.out.println(DescribeInstanceInternetBandwidthConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
16,云服务器,实例相关接口,查看实例状态列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesResponse;  public class DescribeInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesRequest req = DescribeInstancesRequest.fromJsonString(params, DescribeInstancesRequest.class);                          DescribeInstancesResponse resp = client.DescribeInstances(req);                          System.out.println(DescribeInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
17,云服务器,实例相关接口,查询实例机型列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesOperationLimitRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesOperationLimitResponse;  public class DescribeInstancesOperationLimit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesOperationLimitRequest req = DescribeInstancesOperationLimitRequest.fromJsonString(params, DescribeInstancesOperationLimitRequest.class);                          DescribeInstancesOperationLimitResponse resp = client.DescribeInstancesOperationLimit(req);                          System.out.println(DescribeInstancesOperationLimitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
18,云服务器,实例相关接口,查询实例管理终端地址,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesStatusRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstancesStatusResponse;  public class DescribeInstancesStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesStatusRequest req = DescribeInstancesStatusRequest.fromJsonString(params, DescribeInstancesStatusRequest.class);                          DescribeInstancesStatusResponse resp = client.DescribeInstancesStatus(req);                          System.out.println(DescribeInstancesStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
19,云服务器,实例相关接口,查询网络计费类型,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceTypeConfigsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceTypeConfigsResponse;  public class DescribeInstanceTypeConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceTypeConfigsRequest req = DescribeInstanceTypeConfigsRequest.fromJsonString(params, DescribeInstanceTypeConfigsRequest.class);                          DescribeInstanceTypeConfigsResponse resp = client.DescribeInstanceTypeConfigs(req);                          System.out.println(DescribeInstanceTypeConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
20,云服务器,实例相关接口,列出已购买的预留实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceVncUrlRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInstanceVncUrlResponse;  public class DescribeInstanceVncUrl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceVncUrlRequest req = DescribeInstanceVncUrlRequest.fromJsonString(params, DescribeInstanceVncUrlRequest.class);                          DescribeInstanceVncUrlResponse resp = client.DescribeInstanceVncUrl(req);                          System.out.println(DescribeInstanceVncUrlRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
21,云服务器,实例相关接口,列出可购买的预留实例配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeInternetChargeTypeConfigsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeInternetChargeTypeConfigsResponse;  public class DescribeInternetChargeTypeConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInternetChargeTypeConfigsRequest req = DescribeInternetChargeTypeConfigsRequest.fromJsonString(params, DescribeInternetChargeTypeConfigsRequest.class);                          DescribeInternetChargeTypeConfigsResponse resp = client.DescribeInternetChargeTypeConfigs(req);                          System.out.println(DescribeInternetChargeTypeConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
22,云服务器,实例相关接口,获取可用区机型配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeReservedInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeReservedInstancesResponse;  public class DescribeReservedInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeReservedInstancesRequest req = DescribeReservedInstancesRequest.fromJsonString(params, DescribeReservedInstancesRequest.class);                          DescribeReservedInstancesResponse resp = client.DescribeReservedInstances(req);                          System.out.println(DescribeReservedInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
23,云服务器,实例相关接口,解绑安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeReservedInstancesOfferingsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeReservedInstancesOfferingsResponse;  public class DescribeReservedInstancesOfferings {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeReservedInstancesOfferingsRequest req = DescribeReservedInstancesOfferingsRequest.fromJsonString(params, DescribeReservedInstancesOfferingsRequest.class);                          DescribeReservedInstancesOfferingsResponse resp = client.DescribeReservedInstancesOfferings(req);                          System.out.println(DescribeReservedInstancesOfferingsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
24,云服务器,实例相关接口,修改实例计费模式询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeZoneInstanceConfigInfosRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeZoneInstanceConfigInfosResponse;  public class DescribeZoneInstanceConfigInfos {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZoneInstanceConfigInfosRequest req = DescribeZoneInstanceConfigInfosRequest.fromJsonString(params, DescribeZoneInstanceConfigInfosRequest.class);                          DescribeZoneInstanceConfigInfosResponse resp = client.DescribeZoneInstanceConfigInfos(req);                          System.out.println(DescribeZoneInstanceConfigInfosRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
25,云服务器,实例相关接口,续费实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DisassociateSecurityGroupsRequest; import com.tencentcloudapi.cvm.v20170312.models.DisassociateSecurityGroupsResponse;  public class DisassociateSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateSecurityGroupsRequest req = DisassociateSecurityGroupsRequest.fromJsonString(params, DisassociateSecurityGroupsRequest.class);                          DisassociateSecurityGroupsResponse resp = client.DisassociateSecurityGroups(req);                          System.out.println(DisassociateSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
26,云服务器,实例相关接口,重装实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceModifyInstancesChargeTypeRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceModifyInstancesChargeTypeResponse;  public class InquiryPriceModifyInstancesChargeType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceModifyInstancesChargeTypeRequest req = InquiryPriceModifyInstancesChargeTypeRequest.fromJsonString(params, InquiryPriceModifyInstancesChargeTypeRequest.class);                          InquiryPriceModifyInstancesChargeTypeResponse resp = client.InquiryPriceModifyInstancesChargeType(req);                          System.out.println(InquiryPriceModifyInstancesChargeTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
27,云服务器,实例相关接口,调整实例带宽上限询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceRenewInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceRenewInstancesResponse;  public class InquiryPriceRenewInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewInstancesRequest req = InquiryPriceRenewInstancesRequest.fromJsonString(params, InquiryPriceRenewInstancesRequest.class);                          InquiryPriceRenewInstancesResponse resp = client.InquiryPriceRenewInstances(req);                          System.out.println(InquiryPriceRenewInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
28,云服务器,实例相关接口,调整实例配置询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstanceRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstanceResponse;  public class InquiryPriceResetInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceResetInstanceRequest req = InquiryPriceResetInstanceRequest.fromJsonString(params, InquiryPriceResetInstanceRequest.class);                          InquiryPriceResetInstanceResponse resp = client.InquiryPriceResetInstance(req);                          System.out.println(InquiryPriceResetInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
29,云服务器,实例相关接口,扩容实例磁盘询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstancesInternetMaxBandwidthRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstancesInternetMaxBandwidthResponse;  public class InquiryPriceResetInstancesInternetMaxBandwidth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceResetInstancesInternetMaxBandwidthRequest req = InquiryPriceResetInstancesInternetMaxBandwidthRequest.fromJsonString(params, InquiryPriceResetInstancesInternetMaxBandwidthRequest.class);                          InquiryPriceResetInstancesInternetMaxBandwidthResponse resp = client.InquiryPriceResetInstancesInternetMaxBandwidth(req);                          System.out.println(InquiryPriceResetInstancesInternetMaxBandwidthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
30,云服务器,实例相关接口,创建实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstancesTypeRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResetInstancesTypeResponse;  public class InquiryPriceResetInstancesType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceResetInstancesTypeRequest req = InquiryPriceResetInstancesTypeRequest.fromJsonString(params, InquiryPriceResetInstancesTypeRequest.class);                          InquiryPriceResetInstancesTypeResponse resp = client.InquiryPriceResetInstancesType(req);                          System.out.println(InquiryPriceResetInstancesTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
31,云服务器,实例相关接口,修改分散置放群组属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResizeInstanceDisksRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceResizeInstanceDisksResponse;  public class InquiryPriceResizeInstanceDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceResizeInstanceDisksRequest req = InquiryPriceResizeInstanceDisksRequest.fromJsonString(params, InquiryPriceResizeInstanceDisksRequest.class);                          InquiryPriceResizeInstanceDisksResponse resp = client.InquiryPriceResizeInstanceDisks(req);                          System.out.println(InquiryPriceResizeInstanceDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
32,云服务器,实例相关接口,修改实例的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceRunInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.InquiryPriceRunInstancesResponse;  public class InquiryPriceRunInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRunInstancesRequest req = InquiryPriceRunInstancesRequest.fromJsonString(params, InquiryPriceRunInstancesRequest.class);                          InquiryPriceRunInstancesResponse resp = client.InquiryPriceRunInstances(req);                          System.out.println(InquiryPriceRunInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
33,云服务器,实例相关接口,修改实例计费模式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyDisasterRecoverGroupAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyDisasterRecoverGroupAttributeResponse;  public class ModifyDisasterRecoverGroupAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDisasterRecoverGroupAttributeRequest req = ModifyDisasterRecoverGroupAttributeRequest.fromJsonString(params, ModifyDisasterRecoverGroupAttributeRequest.class);                          ModifyDisasterRecoverGroupAttributeResponse resp = client.ModifyDisasterRecoverGroupAttribute(req);                          System.out.println(ModifyDisasterRecoverGroupAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
34,云服务器,实例相关接口,修改实例所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesChargeTypeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesChargeTypeResponse;  public class ModifyInstancesChargeType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstancesChargeTypeRequest req = ModifyInstancesChargeTypeRequest.fromJsonString(params, ModifyInstancesChargeTypeRequest.class);                          ModifyInstancesChargeTypeResponse resp = client.ModifyInstancesChargeType(req);                          System.out.println(ModifyInstancesChargeTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
35,云服务器,实例相关接口,修改实例续费标识,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesProjectRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesProjectResponse;  public class ModifyInstancesProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstancesProjectRequest req = ModifyInstancesProjectRequest.fromJsonString(params, ModifyInstancesProjectRequest.class);                          ModifyInstancesProjectResponse resp = client.ModifyInstancesProject(req);                          System.out.println(ModifyInstancesProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
36,云服务器,实例相关接口,修改实例vpc属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesProjectRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesProjectResponse;  public class ModifyInstancesProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstancesProjectRequest req = ModifyInstancesProjectRequest.fromJsonString(params, ModifyInstancesProjectRequest.class);                          ModifyInstancesProjectResponse resp = client.ModifyInstancesProject(req);                          System.out.println(ModifyInstancesProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
37,云服务器,实例相关接口,购买预留实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesVpcAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesVpcAttributeResponse;  public class ModifyInstancesVpcAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstancesVpcAttributeRequest req = ModifyInstancesVpcAttributeRequest.fromJsonString(params, ModifyInstancesVpcAttributeRequest.class);                          ModifyInstancesVpcAttributeResponse resp = client.ModifyInstancesVpcAttribute(req);                          System.out.println(ModifyInstancesVpcAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
38,云服务器,实例相关接口,重启实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesVpcAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyInstancesVpcAttributeResponse;  public class ModifyInstancesVpcAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstancesVpcAttributeRequest req = ModifyInstancesVpcAttributeRequest.fromJsonString(params, ModifyInstancesVpcAttributeRequest.class);                          ModifyInstancesVpcAttributeResponse resp = client.ModifyInstancesVpcAttribute(req);                          System.out.println(ModifyInstancesVpcAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
39,云服务器,实例相关接口,续费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.PurchaseReservedInstancesOfferingRequest; import com.tencentcloudapi.cvm.v20170312.models.PurchaseReservedInstancesOfferingResponse;  public class PurchaseReservedInstancesOffering {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             PurchaseReservedInstancesOfferingRequest req = PurchaseReservedInstancesOfferingRequest.fromJsonString(params, PurchaseReservedInstancesOfferingRequest.class);                          PurchaseReservedInstancesOfferingResponse resp = client.PurchaseReservedInstancesOffering(req);                          System.out.println(PurchaseReservedInstancesOfferingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
40,云服务器,实例相关接口,重装实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RenewInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.RenewInstancesResponse;  public class RenewInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RenewInstancesRequest req = RenewInstancesRequest.fromJsonString(params, RenewInstancesRequest.class);                          RenewInstancesResponse resp = client.RenewInstances(req);                          System.out.println(RenewInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
41,云服务器,实例相关接口,调整实例带宽上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RenewInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.RenewInstancesResponse;  public class RenewInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RenewInstancesRequest req = RenewInstancesRequest.fromJsonString(params, RenewInstancesRequest.class);                          RenewInstancesResponse resp = client.RenewInstances(req);                          System.out.println(RenewInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
42,云服务器,实例相关接口,重置实例密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ResetInstanceRequest; import com.tencentcloudapi.cvm.v20170312.models.ResetInstanceResponse;  public class ResetInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ResetInstanceRequest req = ResetInstanceRequest.fromJsonString(params, ResetInstanceRequest.class);                          ResetInstanceResponse resp = client.ResetInstance(req);                          System.out.println(ResetInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
43,云服务器,实例相关接口,调整实例配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesInternetMaxBandwidthRequest; import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesInternetMaxBandwidthResponse;  public class ResetInstancesInternetMaxBandwidth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ResetInstancesInternetMaxBandwidthRequest req = ResetInstancesInternetMaxBandwidthRequest.fromJsonString(params, ResetInstancesInternetMaxBandwidthRequest.class);                          ResetInstancesInternetMaxBandwidthResponse resp = client.ResetInstancesInternetMaxBandwidth(req);                          System.out.println(ResetInstancesInternetMaxBandwidthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
44,云服务器,实例相关接口,扩容实例磁盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesPasswordRequest; import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesPasswordResponse;  public class ResetInstancesPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ResetInstancesPasswordRequest req = ResetInstancesPasswordRequest.fromJsonString(params, ResetInstancesPasswordRequest.class);                          ResetInstancesPasswordResponse resp = client.ResetInstancesPassword(req);                          System.out.println(ResetInstancesPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
45,云服务器,实例相关接口,创建实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesTypeRequest; import com.tencentcloudapi.cvm.v20170312.models.ResetInstancesTypeResponse;  public class ResetInstancesType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ResetInstancesTypeRequest req = ResetInstancesTypeRequest.fromJsonString(params, ResetInstancesTypeRequest.class);                          ResetInstancesTypeResponse resp = client.ResetInstancesType(req);                          System.out.println(ResetInstancesTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
46,云服务器,实例相关接口,启动实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RunInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.RunInstancesResponse;  public class RunInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RunInstancesRequest req = RunInstancesRequest.fromJsonString(params, RunInstancesRequest.class);                          RunInstancesResponse resp = client.RunInstances(req);                          System.out.println(RunInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
47,云服务器,实例相关接口,关闭实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.RunInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.RunInstancesResponse;  public class RunInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             RunInstancesRequest req = RunInstancesRequest.fromJsonString(params, RunInstancesRequest.class);                          RunInstancesResponse resp = client.RunInstances(req);                          System.out.println(RunInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
48,云服务器,实例相关接口,退还实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.StartInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.StartInstancesResponse;  public class StartInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             StartInstancesRequest req = StartInstancesRequest.fromJsonString(params, StartInstancesRequest.class);                          StartInstancesResponse resp = client.StartInstances(req);                          System.out.println(StartInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
49,云服务器,密钥相关接口,绑定密钥对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.StopInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.StopInstancesResponse;  public class StopInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             StopInstancesRequest req = StopInstancesRequest.fromJsonString(params, StopInstancesRequest.class);                          StopInstancesResponse resp = client.StopInstances(req);                          System.out.println(StopInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
50,云服务器,密钥相关接口,创建密钥对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.TerminateInstancesRequest; import com.tencentcloudapi.cvm.v20170312.models.TerminateInstancesResponse;  public class TerminateInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateInstancesRequest req = TerminateInstancesRequest.fromJsonString(params, TerminateInstancesRequest.class);                          TerminateInstancesResponse resp = client.TerminateInstances(req);                          System.out.println(TerminateInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
51,云服务器,密钥相关接口,删除密钥对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.AssociateInstancesKeyPairsRequest; import com.tencentcloudapi.cvm.v20170312.models.AssociateInstancesKeyPairsResponse;  public class AssociateInstancesKeyPairs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             AssociateInstancesKeyPairsRequest req = AssociateInstancesKeyPairsRequest.fromJsonString(params, AssociateInstancesKeyPairsRequest.class);                          AssociateInstancesKeyPairsResponse resp = client.AssociateInstancesKeyPairs(req);                          System.out.println(AssociateInstancesKeyPairsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
52,云服务器,密钥相关接口,查询密钥对列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.CreateKeyPairRequest; import com.tencentcloudapi.cvm.v20170312.models.CreateKeyPairResponse;  public class CreateKeyPair {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateKeyPairRequest req = CreateKeyPairRequest.fromJsonString(params, CreateKeyPairRequest.class);                          CreateKeyPairResponse resp = client.CreateKeyPair(req);                          System.out.println(CreateKeyPairRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
53,云服务器,密钥相关接口,解绑密钥对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DeleteKeyPairsRequest; import com.tencentcloudapi.cvm.v20170312.models.DeleteKeyPairsResponse;  public class DeleteKeyPairs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteKeyPairsRequest req = DeleteKeyPairsRequest.fromJsonString(params, DeleteKeyPairsRequest.class);                          DeleteKeyPairsResponse resp = client.DeleteKeyPairs(req);                          System.out.println(DeleteKeyPairsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
54,云服务器,密钥相关接口,导入密钥对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeKeyPairsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeKeyPairsResponse;  public class DescribeKeyPairs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeKeyPairsRequest req = DescribeKeyPairsRequest.fromJsonString(params, DescribeKeyPairsRequest.class);                          DescribeKeyPairsResponse resp = client.DescribeKeyPairs(req);                          System.out.println(DescribeKeyPairsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
55,云服务器,密钥相关接口,修改密钥对属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DisassociateInstancesKeyPairsRequest; import com.tencentcloudapi.cvm.v20170312.models.DisassociateInstancesKeyPairsResponse;  public class DisassociateInstancesKeyPairs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateInstancesKeyPairsRequest req = DisassociateInstancesKeyPairsRequest.fromJsonString(params, DisassociateInstancesKeyPairsRequest.class);                          DisassociateInstancesKeyPairsResponse resp = client.DisassociateInstancesKeyPairs(req);                          System.out.println(DisassociateInstancesKeyPairsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
56,云服务器,镜像相关接口,创建镜像,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyKeyPairAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyKeyPairAttributeResponse;  public class ModifyKeyPairAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyKeyPairAttributeRequest req = ModifyKeyPairAttributeRequest.fromJsonString(params, ModifyKeyPairAttributeRequest.class);                          ModifyKeyPairAttributeResponse resp = client.ModifyKeyPairAttribute(req);                          System.out.println(ModifyKeyPairAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
57,云服务器,镜像相关接口,删除镜像,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyKeyPairAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyKeyPairAttributeResponse;  public class ModifyKeyPairAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyKeyPairAttributeRequest req = ModifyKeyPairAttributeRequest.fromJsonString(params, ModifyKeyPairAttributeRequest.class);                          ModifyKeyPairAttributeResponse resp = client.ModifyKeyPairAttribute(req);                          System.out.println(ModifyKeyPairAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
58,云服务器,镜像相关接口,查询镜像配额上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.CreateImageRequest; import com.tencentcloudapi.cvm.v20170312.models.CreateImageResponse;  public class CreateImage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateImageRequest req = CreateImageRequest.fromJsonString(params, CreateImageRequest.class);                          CreateImageResponse resp = client.CreateImage(req);                          System.out.println(CreateImageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
59,云服务器,镜像相关接口,查看镜像列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DeleteImagesRequest; import com.tencentcloudapi.cvm.v20170312.models.DeleteImagesResponse;  public class DeleteImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteImagesRequest req = DeleteImagesRequest.fromJsonString(params, DeleteImagesRequest.class);                          DeleteImagesResponse resp = client.DeleteImages(req);                          System.out.println(DeleteImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
60,云服务器,镜像相关接口,查看镜像分享信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeImageQuotaRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeImageQuotaResponse;  public class DescribeImageQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageQuotaRequest req = DescribeImageQuotaRequest.fromJsonString(params, DescribeImageQuotaRequest.class);                          DescribeImageQuotaResponse resp = client.DescribeImageQuota(req);                          System.out.println(DescribeImageQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
61,云服务器,镜像相关接口,查询外部导入镜像支持的OS列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeImagesRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeImagesResponse;  public class DescribeImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImagesRequest req = DescribeImagesRequest.fromJsonString(params, DescribeImagesRequest.class);                          DescribeImagesResponse resp = client.DescribeImages(req);                          System.out.println(DescribeImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
62,云服务器,镜像相关接口,外部镜像导入,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeImageSharePermissionRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeImageSharePermissionResponse;  public class DescribeImageSharePermission {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageSharePermissionRequest req = DescribeImageSharePermissionRequest.fromJsonString(params, DescribeImageSharePermissionRequest.class);                          DescribeImageSharePermissionResponse resp = client.DescribeImageSharePermission(req);                          System.out.println(DescribeImageSharePermissionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
63,云服务器,镜像相关接口,修改镜像属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.DescribeImportImageOsRequest; import com.tencentcloudapi.cvm.v20170312.models.DescribeImportImageOsResponse;  public class DescribeImportImageOs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImportImageOsRequest req = DescribeImportImageOsRequest.fromJsonString(params, DescribeImportImageOsRequest.class);                          DescribeImportImageOsResponse resp = client.DescribeImportImageOs(req);                          System.out.println(DescribeImportImageOsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
64,云服务器,镜像相关接口,修改镜像分享信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ImportImageRequest; import com.tencentcloudapi.cvm.v20170312.models.ImportImageResponse;  public class ImportImage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ImportImageRequest req = ImportImageRequest.fromJsonString(params, ImportImageRequest.class);                          ImportImageResponse resp = client.ImportImage(req);                          System.out.println(ImportImageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
65,云服务器,镜像相关接口,同步镜像,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.ModifyImageAttributeRequest; import com.tencentcloudapi.cvm.v20170312.models.ModifyImageAttributeResponse;  public class ModifyImageAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyImageAttributeRequest req = ModifyImageAttributeRequest.fromJsonString(params, ModifyImageAttributeRequest.class);                          ModifyImageAttributeResponse resp = client.ModifyImageAttribute(req);                          System.out.println(ModifyImageAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
66,云硬盘,云硬盘相关接口,挂载云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.SyncImagesRequest; import com.tencentcloudapi.cvm.v20170312.models.SyncImagesResponse;  public class SyncImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             SyncImagesRequest req = SyncImagesRequest.fromJsonString(params, SyncImagesRequest.class);                          SyncImagesResponse resp = client.SyncImages(req);                          System.out.println(SyncImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
67,云硬盘,云硬盘相关接口,创建云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cvm.v20170312.CvmClient;  import com.tencentcloudapi.cvm.v20170312.models.SyncImagesRequest; import com.tencentcloudapi.cvm.v20170312.models.SyncImagesResponse;  public class SyncImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cvm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CvmClient client = new CvmClient(cred, """", clientProfile);                          String params = ""{}"";             SyncImagesRequest req = SyncImagesRequest.fromJsonString(params, SyncImagesRequest.class);                          SyncImagesResponse resp = client.SyncImages(req);                          System.out.println(SyncImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
68,云硬盘,云硬盘相关接口,查询云硬盘配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.AttachDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.AttachDisksResponse;  public class AttachDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             AttachDisksRequest req = AttachDisksRequest.fromJsonString(params, AttachDisksRequest.class);                          AttachDisksResponse resp = client.AttachDisks(req);                          System.out.println(AttachDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
69,云硬盘,云硬盘相关接口,查询云盘操作日志列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskConfigQuotaRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskConfigQuotaResponse;  public class DescribeDiskConfigQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDiskConfigQuotaRequest req = DescribeDiskConfigQuotaRequest.fromJsonString(params, DescribeDiskConfigQuotaRequest.class);                          DescribeDiskConfigQuotaResponse resp = client.DescribeDiskConfigQuota(req);                          System.out.println(DescribeDiskConfigQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
70,云硬盘,云硬盘相关接口,查询云硬盘列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskConfigQuotaRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskConfigQuotaResponse;  public class DescribeDiskConfigQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDiskConfigQuotaRequest req = DescribeDiskConfigQuotaRequest.fromJsonString(params, DescribeDiskConfigQuotaRequest.class);                          DescribeDiskConfigQuotaResponse resp = client.DescribeDiskConfigQuota(req);                          System.out.println(DescribeDiskConfigQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
71,云硬盘,云硬盘相关接口,查询实例关联的云硬盘数量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDisksResponse;  public class DescribeDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDisksRequest req = DescribeDisksRequest.fromJsonString(params, DescribeDisksRequest.class);                          DescribeDisksResponse resp = client.DescribeDisks(req);                          System.out.println(DescribeDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
72,云硬盘,云硬盘相关接口,解挂云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDisksResponse;  public class DescribeDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDisksRequest req = DescribeDisksRequest.fromJsonString(params, DescribeDisksRequest.class);                          DescribeDisksResponse resp = client.DescribeDisks(req);                          System.out.println(DescribeDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
73,云硬盘,云硬盘相关接口,创建云硬盘询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeInstancesDiskNumRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeInstancesDiskNumResponse;  public class DescribeInstancesDiskNum {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesDiskNumRequest req = DescribeInstancesDiskNumRequest.fromJsonString(params, DescribeInstancesDiskNumRequest.class);                          DescribeInstancesDiskNumResponse resp = client.DescribeInstancesDiskNum(req);                          System.out.println(DescribeInstancesDiskNumRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
74,云硬盘,云硬盘相关接口,续费云硬盘询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceCreateDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceCreateDisksResponse;  public class InquiryPriceCreateDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateDisksRequest req = InquiryPriceCreateDisksRequest.fromJsonString(params, InquiryPriceCreateDisksRequest.class);                          InquiryPriceCreateDisksResponse resp = client.InquiryPriceCreateDisks(req);                          System.out.println(InquiryPriceCreateDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
75,云硬盘,云硬盘相关接口,扩容云硬盘询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceRenewDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceRenewDisksResponse;  public class InquiryPriceRenewDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewDisksRequest req = InquiryPriceRenewDisksRequest.fromJsonString(params, InquiryPriceRenewDisksRequest.class);                          InquiryPriceRenewDisksResponse resp = client.InquiryPriceRenewDisks(req);                          System.out.println(InquiryPriceRenewDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
76,云硬盘,云硬盘相关接口,修改云硬盘属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceRenewDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceRenewDisksResponse;  public class InquiryPriceRenewDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewDisksRequest req = InquiryPriceRenewDisksRequest.fromJsonString(params, InquiryPriceRenewDisksRequest.class);                          InquiryPriceRenewDisksResponse resp = client.InquiryPriceRenewDisks(req);                          System.out.println(InquiryPriceRenewDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
77,云硬盘,云硬盘相关接口,修改弹性云盘计费模式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceResizeDiskRequest; import com.tencentcloudapi.cbs.v20170312.models.InquiryPriceResizeDiskResponse;  public class InquiryPriceResizeDisk {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceResizeDiskRequest req = InquiryPriceResizeDiskRequest.fromJsonString(params, InquiryPriceResizeDiskRequest.class);                          InquiryPriceResizeDiskResponse resp = client.InquiryPriceResizeDisk(req);                          System.out.println(InquiryPriceResizeDiskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
78,云硬盘,云硬盘相关接口,修改云硬盘续费标识,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksChargeTypeRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksChargeTypeResponse;  public class ModifyDisksChargeType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDisksChargeTypeRequest req = ModifyDisksChargeTypeRequest.fromJsonString(params, ModifyDisksChargeTypeRequest.class);                          ModifyDisksChargeTypeResponse resp = client.ModifyDisksChargeType(req);                          System.out.println(ModifyDisksChargeTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
79,云硬盘,云硬盘相关接口,续费云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksRenewFlagRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksRenewFlagResponse;  public class ModifyDisksRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDisksRenewFlagRequest req = ModifyDisksRenewFlagRequest.fromJsonString(params, ModifyDisksRenewFlagRequest.class);                          ModifyDisksRenewFlagResponse resp = client.ModifyDisksRenewFlag(req);                          System.out.println(ModifyDisksRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
80,云硬盘,云硬盘相关接口,扩容云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksRenewFlagRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifyDisksRenewFlagResponse;  public class ModifyDisksRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDisksRenewFlagRequest req = ModifyDisksRenewFlagRequest.fromJsonString(params, ModifyDisksRenewFlagRequest.class);                          ModifyDisksRenewFlagResponse resp = client.ModifyDisksRenewFlag(req);                          System.out.println(ModifyDisksRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
81,云硬盘,云硬盘相关接口,退还云硬盘,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.RenewDiskRequest; import com.tencentcloudapi.cbs.v20170312.models.RenewDiskResponse;  public class RenewDisk {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             RenewDiskRequest req = RenewDiskRequest.fromJsonString(params, RenewDiskRequest.class);                          RenewDiskResponse resp = client.RenewDisk(req);                          System.out.println(RenewDiskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
82,云硬盘,快照相关接口,回滚快照,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.TerminateDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.TerminateDisksResponse;  public class TerminateDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateDisksRequest req = TerminateDisksRequest.fromJsonString(params, TerminateDisksRequest.class);                          TerminateDisksResponse resp = client.TerminateDisks(req);                          System.out.println(TerminateDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
83,云硬盘,快照相关接口,绑定定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.TerminateDisksRequest; import com.tencentcloudapi.cbs.v20170312.models.TerminateDisksResponse;  public class TerminateDisks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateDisksRequest req = TerminateDisksRequest.fromJsonString(params, TerminateDisksRequest.class);                          TerminateDisksResponse resp = client.TerminateDisks(req);                          System.out.println(TerminateDisksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
84,云硬盘,快照相关接口,创建定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ApplySnapshotRequest; import com.tencentcloudapi.cbs.v20170312.models.ApplySnapshotResponse;  public class ApplySnapshot {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ApplySnapshotRequest req = ApplySnapshotRequest.fromJsonString(params, ApplySnapshotRequest.class);                          ApplySnapshotResponse resp = client.ApplySnapshot(req);                          System.out.println(ApplySnapshotRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
85,云硬盘,快照相关接口,创建快照,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.BindAutoSnapshotPolicyRequest; import com.tencentcloudapi.cbs.v20170312.models.BindAutoSnapshotPolicyResponse;  public class BindAutoSnapshotPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             BindAutoSnapshotPolicyRequest req = BindAutoSnapshotPolicyRequest.fromJsonString(params, BindAutoSnapshotPolicyRequest.class);                          BindAutoSnapshotPolicyResponse resp = client.BindAutoSnapshotPolicy(req);                          System.out.println(BindAutoSnapshotPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
86,云硬盘,快照相关接口,删除定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.CreateAutoSnapshotPolicyRequest; import com.tencentcloudapi.cbs.v20170312.models.CreateAutoSnapshotPolicyResponse;  public class CreateAutoSnapshotPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAutoSnapshotPolicyRequest req = CreateAutoSnapshotPolicyRequest.fromJsonString(params, CreateAutoSnapshotPolicyRequest.class);                          CreateAutoSnapshotPolicyResponse resp = client.CreateAutoSnapshotPolicy(req);                          System.out.println(CreateAutoSnapshotPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
87,云硬盘,快照相关接口,删除快照,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.CreateSnapshotRequest; import com.tencentcloudapi.cbs.v20170312.models.CreateSnapshotResponse;  public class CreateSnapshot {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSnapshotRequest req = CreateSnapshotRequest.fromJsonString(params, CreateSnapshotRequest.class);                          CreateSnapshotResponse resp = client.CreateSnapshot(req);                          System.out.println(CreateSnapshotRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
88,云硬盘,快照相关接口,查询定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DeleteAutoSnapshotPoliciesRequest; import com.tencentcloudapi.cbs.v20170312.models.DeleteAutoSnapshotPoliciesResponse;  public class DeleteAutoSnapshotPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAutoSnapshotPoliciesRequest req = DeleteAutoSnapshotPoliciesRequest.fromJsonString(params, DeleteAutoSnapshotPoliciesRequest.class);                          DeleteAutoSnapshotPoliciesResponse resp = client.DeleteAutoSnapshotPolicies(req);                          System.out.println(DeleteAutoSnapshotPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
89,云硬盘,快照相关接口,查询云硬盘关联定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DeleteSnapshotsRequest; import com.tencentcloudapi.cbs.v20170312.models.DeleteSnapshotsResponse;  public class DeleteSnapshots {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSnapshotsRequest req = DeleteSnapshotsRequest.fromJsonString(params, DeleteSnapshotsRequest.class);                          DeleteSnapshotsResponse resp = client.DeleteSnapshots(req);                          System.out.println(DeleteSnapshotsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
90,云硬盘,快照相关接口,查询快照操作日志列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskAssociatedAutoSnapshotPolicyRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskAssociatedAutoSnapshotPolicyResponse;  public class DescribeDiskAssociatedAutoSnapshotPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDiskAssociatedAutoSnapshotPolicyRequest req = DescribeDiskAssociatedAutoSnapshotPolicyRequest.fromJsonString(params, DescribeDiskAssociatedAutoSnapshotPolicyRequest.class);                          DescribeDiskAssociatedAutoSnapshotPolicyResponse resp = client.DescribeDiskAssociatedAutoSnapshotPolicy(req);                          System.out.println(DescribeDiskAssociatedAutoSnapshotPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
91,云硬盘,快照相关接口,查询快照列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskAssociatedAutoSnapshotPolicyRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeDiskAssociatedAutoSnapshotPolicyResponse;  public class DescribeDiskAssociatedAutoSnapshotPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDiskAssociatedAutoSnapshotPolicyRequest req = DescribeDiskAssociatedAutoSnapshotPolicyRequest.fromJsonString(params, DescribeDiskAssociatedAutoSnapshotPolicyRequest.class);                          DescribeDiskAssociatedAutoSnapshotPolicyResponse resp = client.DescribeDiskAssociatedAutoSnapshotPolicy(req);                          System.out.println(DescribeDiskAssociatedAutoSnapshotPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
92,云硬盘,快照相关接口,查看快照分享信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeSnapshotsRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeSnapshotsResponse;  public class DescribeSnapshots {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotsRequest req = DescribeSnapshotsRequest.fromJsonString(params, DescribeSnapshotsRequest.class);                          DescribeSnapshotsResponse resp = client.DescribeSnapshots(req);                          System.out.println(DescribeSnapshotsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
93,云硬盘,快照相关接口,修改定期快照策略信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.DescribeSnapshotSharePermissionRequest; import com.tencentcloudapi.cbs.v20170312.models.DescribeSnapshotSharePermissionResponse;  public class DescribeSnapshotSharePermission {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotSharePermissionRequest req = DescribeSnapshotSharePermissionRequest.fromJsonString(params, DescribeSnapshotSharePermissionRequest.class);                          DescribeSnapshotSharePermissionResponse resp = client.DescribeSnapshotSharePermission(req);                          System.out.println(DescribeSnapshotSharePermissionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
94,云硬盘,快照相关接口,修改快照信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifyAutoSnapshotPolicyAttributeRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifyAutoSnapshotPolicyAttributeResponse;  public class ModifyAutoSnapshotPolicyAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoSnapshotPolicyAttributeRequest req = ModifyAutoSnapshotPolicyAttributeRequest.fromJsonString(params, ModifyAutoSnapshotPolicyAttributeRequest.class);                          ModifyAutoSnapshotPolicyAttributeResponse resp = client.ModifyAutoSnapshotPolicyAttribute(req);                          System.out.println(ModifyAutoSnapshotPolicyAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
95,云硬盘,快照相关接口,修改快照分享信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifyAutoSnapshotPolicyAttributeRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifyAutoSnapshotPolicyAttributeResponse;  public class ModifyAutoSnapshotPolicyAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoSnapshotPolicyAttributeRequest req = ModifyAutoSnapshotPolicyAttributeRequest.fromJsonString(params, ModifyAutoSnapshotPolicyAttributeRequest.class);                          ModifyAutoSnapshotPolicyAttributeResponse resp = client.ModifyAutoSnapshotPolicyAttribute(req);                          System.out.println(ModifyAutoSnapshotPolicyAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
96,云硬盘,快照相关接口,解绑定期快照策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.ModifySnapshotAttributeRequest; import com.tencentcloudapi.cbs.v20170312.models.ModifySnapshotAttributeResponse;  public class ModifySnapshotAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cbs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySnapshotAttributeRequest req = ModifySnapshotAttributeRequest.fromJsonString(params, ModifySnapshotAttributeRequest.class);                          ModifySnapshotAttributeResponse resp = client.ModifySnapshotAttribute(req);                          System.out.println(ModifySnapshotAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
97,黑石物理服务器,托管服务器相关接口,查询托管设备带外信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cbs.v20170312.CbsClient;  import com.tencentcloudapi.cbs.v20170312.models.UnbindAutoSnapshotPolicyRequest; import com.tencentcloudapi.cbs.v20170312.models.UnbindAutoSnapshotPolicyResponse;  public class UnbindAutoSnapshotPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CbsClient client = new CbsClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindAutoSnapshotPolicyRequest req = UnbindAutoSnapshotPolicyRequest.fromJsonString(params, UnbindAutoSnapshotPolicyRequest.class);                          UnbindAutoSnapshotPolicyResponse resp = client.UnbindAutoSnapshotPolicy(req);                          System.out.println(UnbindAutoSnapshotPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
98,黑石物理服务器,物理服务器相关接口,购买物理机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeHostedDeviceOutBandInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeHostedDeviceOutBandInfoResponse;  public class DescribeHostedDeviceOutBandInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHostedDeviceOutBandInfoRequest req = DescribeHostedDeviceOutBandInfoRequest.fromJsonString(params, DescribeHostedDeviceOutBandInfoRequest.class);                          DescribeHostedDeviceOutBandInfoResponse resp = client.DescribeHostedDeviceOutBandInfo(req);                          System.out.println(DescribeHostedDeviceOutBandInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
99,黑石物理服务器,物理服务器相关接口,创建黑石竞价实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeHostedDeviceOutBandInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeHostedDeviceOutBandInfoResponse;  public class DescribeHostedDeviceOutBandInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHostedDeviceOutBandInfoRequest req = DescribeHostedDeviceOutBandInfoRequest.fromJsonString(params, DescribeHostedDeviceOutBandInfoRequest.class);                          DescribeHostedDeviceOutBandInfoResponse resp = client.DescribeHostedDeviceOutBandInfo(req);                          System.out.println(DescribeHostedDeviceOutBandInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
100,黑石物理服务器,物理服务器相关接口,查询设备型号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceRequest; import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceResponse;  public class CreateSpotDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSpotDeviceRequest req = CreateSpotDeviceRequest.fromJsonString(params, CreateSpotDeviceRequest.class);                          CreateSpotDeviceResponse resp = client.CreateSpotDevice(req);                          System.out.println(CreateSpotDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
101,黑石物理服务器,物理服务器相关接口,查询机型RAID方式以及系统盘大小,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceRequest; import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceResponse;  public class CreateSpotDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSpotDeviceRequest req = CreateSpotDeviceRequest.fromJsonString(params, CreateSpotDeviceRequest.class);                          CreateSpotDeviceResponse resp = client.CreateSpotDevice(req);                          System.out.println(CreateSpotDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
102,黑石物理服务器,物理服务器相关接口,查询设备硬件配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceRequest; import com.tencentcloudapi.bm.v20180423.models.CreateSpotDeviceResponse;  public class CreateSpotDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSpotDeviceRequest req = CreateSpotDeviceRequest.fromJsonString(params, CreateSpotDeviceRequest.class);                          CreateSpotDeviceResponse resp = client.CreateSpotDevice(req);                          System.out.println(CreateSpotDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
103,黑石物理服务器,物理服务器相关接口,查询设备库存,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceClassRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceClassResponse;  public class DescribeDeviceClass {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceClassRequest req = DescribeDeviceClassRequest.fromJsonString(params, DescribeDeviceClassRequest.class);                          DescribeDeviceClassResponse resp = client.DescribeDeviceClass(req);                          System.out.println(DescribeDeviceClassRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
104,黑石物理服务器,物理服务器相关接口,查询设备操作日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceClassPartitionRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceClassPartitionResponse;  public class DescribeDeviceClassPartition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceClassPartitionRequest req = DescribeDeviceClassPartitionRequest.fromJsonString(params, DescribeDeviceClassPartitionRequest.class);                          DescribeDeviceClassPartitionResponse resp = client.DescribeDeviceClassPartition(req);                          System.out.println(DescribeDeviceClassPartitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
105,黑石物理服务器,物理服务器相关接口,获取物理机的分区格式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceHardwareInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceHardwareInfoResponse;  public class DescribeDeviceHardwareInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceHardwareInfoRequest req = DescribeDeviceHardwareInfoRequest.fromJsonString(params, DescribeDeviceHardwareInfoRequest.class);                          DescribeDeviceHardwareInfoResponse resp = client.DescribeDeviceHardwareInfo(req);                          System.out.println(DescribeDeviceHardwareInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
106,黑石物理服务器,物理服务器相关接口,查询设备位置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceInventoryRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceInventoryResponse;  public class DescribeDeviceInventory {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceInventoryRequest req = DescribeDeviceInventoryRequest.fromJsonString(params, DescribeDeviceInventoryRequest.class);                          DescribeDeviceInventoryResponse resp = client.DescribeDeviceInventory(req);                          System.out.println(DescribeDeviceInventoryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
107,黑石物理服务器,物理服务器相关接口,查询服务器价格信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceOperationLogRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDeviceOperationLogResponse;  public class DescribeDeviceOperationLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceOperationLogRequest req = DescribeDeviceOperationLogRequest.fromJsonString(params, DescribeDeviceOperationLogRequest.class);                          DescribeDeviceOperationLogResponse resp = client.DescribeDeviceOperationLog(req);                          System.out.println(DescribeDeviceOperationLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
108,黑石物理服务器,物理服务器相关接口,查询物理机信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePartitionRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePartitionResponse;  public class DescribeDevicePartition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDevicePartitionRequest req = DescribeDevicePartitionRequest.fromJsonString(params, DescribeDevicePartitionRequest.class);                          DescribeDevicePartitionResponse resp = client.DescribeDevicePartition(req);                          System.out.println(DescribeDevicePartitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
109,黑石物理服务器,物理服务器相关接口,查询自定义机型部件信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePositionRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePositionResponse;  public class DescribeDevicePosition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDevicePositionRequest req = DescribeDevicePositionRequest.fromJsonString(params, DescribeDevicePositionRequest.class);                          DescribeDevicePositionResponse resp = client.DescribeDevicePosition(req);                          System.out.println(DescribeDevicePositionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
110,黑石物理服务器,物理服务器相关接口,查询异步任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePriceInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDevicePriceInfoResponse;  public class DescribeDevicePriceInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDevicePriceInfoRequest req = DescribeDevicePriceInfoRequest.fromJsonString(params, DescribeDevicePriceInfoRequest.class);                          DescribeDevicePriceInfoResponse resp = client.DescribeDevicePriceInfo(req);                          System.out.println(DescribeDevicePriceInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
111,黑石物理服务器,物理服务器相关接口,查询操作系统信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeDevicesResponse;  public class DescribeDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDevicesRequest req = DescribeDevicesRequest.fromJsonString(params, DescribeDevicesRequest.class);                          DescribeDevicesResponse resp = client.DescribeDevices(req);                          System.out.println(DescribeDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
112,黑石物理服务器,物理服务器相关接口,查询地域以及可用区,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeHardwareSpecificationRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeHardwareSpecificationResponse;  public class DescribeHardwareSpecification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHardwareSpecificationRequest req = DescribeHardwareSpecificationRequest.fromJsonString(params, DescribeHardwareSpecificationRequest.class);                          DescribeHardwareSpecificationResponse resp = client.DescribeHardwareSpecification(req);                          System.out.println(DescribeHardwareSpecificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
113,黑石物理服务器,物理服务器相关接口,修改服务器名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeOsInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeOsInfoResponse;  public class DescribeOsInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOsInfoRequest req = DescribeOsInfoRequest.fromJsonString(params, DescribeOsInfoRequest.class);                          DescribeOsInfoResponse resp = client.DescribeOsInfo(req);                          System.out.println(DescribeOsInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
114,黑石物理服务器,物理服务器相关接口,修改物理机服务器自动续费标志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeRegionsRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeRegionsResponse;  public class DescribeRegions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRegionsRequest req = DescribeRegionsRequest.fromJsonString(params, DescribeRegionsRequest.class);                          DescribeRegionsResponse resp = client.DescribeRegions(req);                          System.out.println(DescribeRegionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
115,黑石物理服务器,物理服务器相关接口,修改物理机内网IP（不重装系统）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyDeviceAliasesRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyDeviceAliasesResponse;  public class ModifyDeviceAliases {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDeviceAliasesRequest req = ModifyDeviceAliasesRequest.fromJsonString(params, ModifyDeviceAliasesRequest.class);                          ModifyDeviceAliasesResponse resp = client.ModifyDeviceAliases(req);                          System.out.println(ModifyDeviceAliasesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
116,黑石物理服务器,物理服务器相关接口,将设备从预付费转换为后付费,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyLanIpRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyLanIpResponse;  public class ModifyLanIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLanIpRequest req = ModifyLanIpRequest.fromJsonString(params, ModifyLanIpRequest.class);                          ModifyLanIpResponse resp = client.ModifyLanIp(req);                          System.out.println(ModifyLanIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
117,黑石物理服务器,物理服务器相关接口,退还服务器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyLanIpRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyLanIpResponse;  public class ModifyLanIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLanIpRequest req = ModifyLanIpRequest.fromJsonString(params, ModifyLanIpRequest.class);                          ModifyLanIpResponse resp = client.ModifyLanIp(req);                          System.out.println(ModifyLanIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
118,黑石物理服务器,物理服务器相关接口,重启机器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyPayModePre2PostRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyPayModePre2PostResponse;  public class ModifyPayModePre2Post {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPayModePre2PostRequest req = ModifyPayModePre2PostRequest.fromJsonString(params, ModifyPayModePre2PostRequest.class);                          ModifyPayModePre2PostResponse resp = client.ModifyPayModePre2Post(req);                          System.out.println(ModifyPayModePre2PostRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
119,黑石物理服务器,物理服务器相关接口,恢复物理机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.OfflineDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.OfflineDevicesResponse;  public class OfflineDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             OfflineDevicesRequest req = OfflineDevicesRequest.fromJsonString(params, OfflineDevicesRequest.class);                          OfflineDevicesResponse resp = client.OfflineDevices(req);                          System.out.println(OfflineDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
120,黑石物理服务器,物理服务器相关接口,重置密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.OfflineDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.OfflineDevicesResponse;  public class OfflineDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             OfflineDevicesRequest req = OfflineDevicesRequest.fromJsonString(params, OfflineDevicesRequest.class);                          OfflineDevicesResponse resp = client.OfflineDevices(req);                          System.out.println(OfflineDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
121,黑石物理服务器,物理服务器相关接口,退回物理机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.RecoverDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.RecoverDevicesResponse;  public class RecoverDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             RecoverDevicesRequest req = RecoverDevicesRequest.fromJsonString(params, RecoverDevicesRequest.class);                          RecoverDevicesResponse resp = client.RecoverDevices(req);                          System.out.println(RecoverDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
122,黑石物理服务器,物理服务器相关接口,设置带外VPN认证用户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ResetDevicePasswordRequest; import com.tencentcloudapi.bm.v20180423.models.ResetDevicePasswordResponse;  public class ResetDevicePassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ResetDevicePasswordRequest req = ResetDevicePasswordRequest.fromJsonString(params, ResetDevicePasswordRequest.class);                          ResetDevicePasswordResponse resp = client.ResetDevicePassword(req);                          System.out.println(ResetDevicePasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
123,黑石物理服务器,物理服务器相关接口,关闭服务器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ReturnDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.ReturnDevicesResponse;  public class ReturnDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ReturnDevicesRequest req = ReturnDevicesRequest.fromJsonString(params, ReturnDevicesRequest.class);                          ReturnDevicesResponse resp = client.ReturnDevices(req);                          System.out.println(ReturnDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
124,黑石物理服务器,物理服务器相关接口,开启服务器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.SetOutBandVpnAuthPasswordRequest; import com.tencentcloudapi.bm.v20180423.models.SetOutBandVpnAuthPasswordResponse;  public class SetOutBandVpnAuthPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             SetOutBandVpnAuthPasswordRequest req = SetOutBandVpnAuthPasswordRequest.fromJsonString(params, SetOutBandVpnAuthPasswordRequest.class);                          SetOutBandVpnAuthPasswordResponse resp = client.SetOutBandVpnAuthPassword(req);                          System.out.println(SetOutBandVpnAuthPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
125,黑石物理服务器,维护平台相关接口,为预授权规则绑定标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.StartDevicesRequest; import com.tencentcloudapi.bm.v20180423.models.StartDevicesResponse;  public class StartDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             StartDevicesRequest req = StartDevicesRequest.fromJsonString(params, StartDevicesRequest.class);                          StartDevicesResponse resp = client.StartDevices(req);                          System.out.println(StartDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
126,黑石物理服务器,维护平台相关接口,创建预授权规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.BindPsaTagRequest; import com.tencentcloudapi.bm.v20180423.models.BindPsaTagResponse;  public class BindPsaTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             BindPsaTagRequest req = BindPsaTagRequest.fromJsonString(params, BindPsaTagRequest.class);                          BindPsaTagResponse resp = client.BindPsaTag(req);                          System.out.println(BindPsaTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
127,黑石物理服务器,维护平台相关接口,删除预授权规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreatePsaRegulationRequest; import com.tencentcloudapi.bm.v20180423.models.CreatePsaRegulationResponse;  public class CreatePsaRegulation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePsaRegulationRequest req = CreatePsaRegulationRequest.fromJsonString(params, CreatePsaRegulationRequest.class);                          CreatePsaRegulationResponse resp = client.CreatePsaRegulation(req);                          System.out.println(CreatePsaRegulationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
128,黑石物理服务器,维护平台相关接口,获取预授权规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreatePsaRegulationRequest; import com.tencentcloudapi.bm.v20180423.models.CreatePsaRegulationResponse;  public class CreatePsaRegulation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePsaRegulationRequest req = CreatePsaRegulationRequest.fromJsonString(params, CreatePsaRegulationRequest.class);                          CreatePsaRegulationResponse resp = client.CreatePsaRegulation(req);                          System.out.println(CreatePsaRegulationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
129,黑石物理服务器,维护平台相关接口,维修任务配置获取,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DeletePsaRegulationRequest; import com.tencentcloudapi.bm.v20180423.models.DeletePsaRegulationResponse;  public class DeletePsaRegulation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePsaRegulationRequest req = DeletePsaRegulationRequest.fromJsonString(params, DeletePsaRegulationRequest.class);                          DeletePsaRegulationResponse resp = client.DeletePsaRegulation(req);                          System.out.println(DeletePsaRegulationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
130,黑石物理服务器,维护平台相关接口,维修任务信息获取,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeRepairTaskConstantRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeRepairTaskConstantResponse;  public class DescribeRepairTaskConstant {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRepairTaskConstantRequest req = DescribeRepairTaskConstantRequest.fromJsonString(params, DescribeRepairTaskConstantRequest.class);                          DescribeRepairTaskConstantResponse resp = client.DescribeRepairTaskConstant(req);                          System.out.println(DescribeRepairTaskConstantRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
131,黑石物理服务器,维护平台相关接口,维修任务操作日志获取,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeTaskInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeTaskInfoResponse;  public class DescribeTaskInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskInfoRequest req = DescribeTaskInfoRequest.fromJsonString(params, DescribeTaskInfoRequest.class);                          DescribeTaskInfoResponse resp = client.DescribeTaskInfo(req);                          System.out.println(DescribeTaskInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
132,黑石物理服务器,维护平台相关接口,修改预授权规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeTaskInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeTaskInfoResponse;  public class DescribeTaskInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskInfoRequest req = DescribeTaskInfoRequest.fromJsonString(params, DescribeTaskInfoRequest.class);                          DescribeTaskInfoResponse resp = client.DescribeTaskInfo(req);                          System.out.println(DescribeTaskInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
133,黑石物理服务器,维护平台相关接口,维修任务管理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeTaskOperationLogRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeTaskOperationLogResponse;  public class DescribeTaskOperationLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskOperationLogRequest req = DescribeTaskOperationLogRequest.fromJsonString(params, DescribeTaskOperationLogRequest.class);                          DescribeTaskOperationLogResponse resp = client.DescribeTaskOperationLog(req);                          System.out.println(DescribeTaskOperationLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
134,黑石物理服务器,维护平台相关接口,解除标签与预授权规则的绑定,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.RepairTaskControlRequest; import com.tencentcloudapi.bm.v20180423.models.RepairTaskControlResponse;  public class RepairTaskControl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             RepairTaskControlRequest req = RepairTaskControlRequest.fromJsonString(params, RepairTaskControlRequest.class);                          RepairTaskControlResponse resp = client.RepairTaskControl(req);                          System.out.println(RepairTaskControlRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
135,黑石物理服务器,自定义脚本相关接口,创建自定义脚本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.UnbindPsaTagRequest; import com.tencentcloudapi.bm.v20180423.models.UnbindPsaTagResponse;  public class UnbindPsaTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindPsaTagRequest req = UnbindPsaTagRequest.fromJsonString(params, UnbindPsaTagRequest.class);                          UnbindPsaTagResponse resp = client.UnbindPsaTag(req);                          System.out.println(UnbindPsaTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
136,黑石物理服务器,自定义脚本相关接口,删除自定义脚本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.UnbindPsaTagRequest; import com.tencentcloudapi.bm.v20180423.models.UnbindPsaTagResponse;  public class UnbindPsaTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindPsaTagRequest req = UnbindPsaTagRequest.fromJsonString(params, UnbindPsaTagRequest.class);                          UnbindPsaTagResponse resp = client.UnbindPsaTag(req);                          System.out.println(UnbindPsaTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
137,黑石物理服务器,自定义脚本相关接口,获取自定义脚本信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.CreateUserCmdRequest; import com.tencentcloudapi.bm.v20180423.models.CreateUserCmdResponse;  public class CreateUserCmd {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateUserCmdRequest req = CreateUserCmdRequest.fromJsonString(params, CreateUserCmdRequest.class);                          CreateUserCmdResponse resp = client.CreateUserCmd(req);                          System.out.println(CreateUserCmdRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
138,黑石物理服务器,自定义脚本相关接口,获取自定义脚本任务详细信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DeleteUserCmdsRequest; import com.tencentcloudapi.bm.v20180423.models.DeleteUserCmdsResponse;  public class DeleteUserCmds {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteUserCmdsRequest req = DeleteUserCmdsRequest.fromJsonString(params, DeleteUserCmdsRequest.class);                          DeleteUserCmdsResponse resp = client.DeleteUserCmds(req);                          System.out.println(DeleteUserCmdsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
139,黑石物理服务器,自定义脚本相关接口,获取自定义脚本任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeUserCmdTaskInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeUserCmdTaskInfoResponse;  public class DescribeUserCmdTaskInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUserCmdTaskInfoRequest req = DescribeUserCmdTaskInfoRequest.fromJsonString(params, DescribeUserCmdTaskInfoRequest.class);                          DescribeUserCmdTaskInfoResponse resp = client.DescribeUserCmdTaskInfo(req);                          System.out.println(DescribeUserCmdTaskInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
140,黑石物理服务器,自定义脚本相关接口,修改自定义脚本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeUserCmdTaskInfoRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeUserCmdTaskInfoResponse;  public class DescribeUserCmdTaskInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUserCmdTaskInfoRequest req = DescribeUserCmdTaskInfoRequest.fromJsonString(params, DescribeUserCmdTaskInfoRequest.class);                          DescribeUserCmdTaskInfoResponse resp = client.DescribeUserCmdTaskInfo(req);                          System.out.println(DescribeUserCmdTaskInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
141,黑石物理服务器,自定义脚本相关接口,运行自定义脚本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyUserCmdRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyUserCmdResponse;  public class ModifyUserCmd {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyUserCmdRequest req = ModifyUserCmdRequest.fromJsonString(params, ModifyUserCmdRequest.class);                          ModifyUserCmdResponse resp = client.ModifyUserCmd(req);                          System.out.println(ModifyUserCmdRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
142,黑石物理服务器,自定义镜像相关接口,创建自定义镜像,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.RunUserCmdRequest; import com.tencentcloudapi.bm.v20180423.models.RunUserCmdResponse;  public class RunUserCmd {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             RunUserCmdRequest req = RunUserCmdRequest.fromJsonString(params, RunUserCmdRequest.class);                          RunUserCmdResponse resp = client.RunUserCmd(req);                          System.out.println(RunUserCmdRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
143,黑石物理服务器,自定义镜像相关接口,删除自定义镜像,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.RunUserCmdRequest; import com.tencentcloudapi.bm.v20180423.models.RunUserCmdResponse;  public class RunUserCmd {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             RunUserCmdRequest req = RunUserCmdRequest.fromJsonString(params, RunUserCmdRequest.class);                          RunUserCmdResponse resp = client.RunUserCmd(req);                          System.out.println(RunUserCmdRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
144,黑石物理服务器,自定义镜像相关接口,查询自定义镜像制作进度,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DeleteCustomImagesRequest; import com.tencentcloudapi.bm.v20180423.models.DeleteCustomImagesResponse;  public class DeleteCustomImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteCustomImagesRequest req = DeleteCustomImagesRequest.fromJsonString(params, DeleteCustomImagesRequest.class);                          DeleteCustomImagesResponse resp = client.DeleteCustomImages(req);                          System.out.println(DeleteCustomImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
145,黑石物理服务器,自定义镜像相关接口,查看自定义镜像列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DeleteCustomImagesRequest; import com.tencentcloudapi.bm.v20180423.models.DeleteCustomImagesResponse;  public class DeleteCustomImages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteCustomImagesRequest req = DeleteCustomImagesRequest.fromJsonString(params, DeleteCustomImagesRequest.class);                          DeleteCustomImagesResponse resp = client.DeleteCustomImages(req);                          System.out.println(DeleteCustomImagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
146,黑石物理服务器,自定义镜像相关接口,修改自定义镜像属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.DescribeCustomImageProcessRequest; import com.tencentcloudapi.bm.v20180423.models.DescribeCustomImageProcessResponse;  public class DescribeCustomImageProcess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCustomImageProcessRequest req = DescribeCustomImageProcessRequest.fromJsonString(params, DescribeCustomImageProcessRequest.class);                          DescribeCustomImageProcessResponse resp = client.DescribeCustomImageProcess(req);                          System.out.println(DescribeCustomImageProcessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
147,黑石弹性公网IP,黑石弹性公网IP接口,绑定弹性公网IP ACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyCustomImageAttributeRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyCustomImageAttributeResponse;  public class ModifyCustomImageAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCustomImageAttributeRequest req = ModifyCustomImageAttributeRequest.fromJsonString(params, ModifyCustomImageAttributeRequest.class);                          ModifyCustomImageAttributeResponse resp = client.ModifyCustomImageAttribute(req);                          System.out.println(ModifyCustomImageAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
148,黑石弹性公网IP,黑石弹性公网IP接口,黑石托管机器绑定EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bm.v20180423.BmClient;  import com.tencentcloudapi.bm.v20180423.models.ModifyCustomImageAttributeRequest; import com.tencentcloudapi.bm.v20180423.models.ModifyCustomImageAttributeResponse;  public class ModifyCustomImageAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmClient client = new BmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCustomImageAttributeRequest req = ModifyCustomImageAttributeRequest.fromJsonString(params, ModifyCustomImageAttributeRequest.class);                          ModifyCustomImageAttributeResponse resp = client.ModifyCustomImageAttribute(req);                          System.out.println(ModifyCustomImageAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
149,黑石弹性公网IP,黑石弹性公网IP接口,绑定黑石EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.BindHostedRequest; import com.tencentcloudapi.bmeip.v20180625.models.BindHostedResponse;  public class BindHosted {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             BindHostedRequest req = BindHostedRequest.fromJsonString(params, BindHostedRequest.class);                          BindHostedResponse resp = client.BindHosted(req);                          System.out.println(BindHostedRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
150,黑石弹性公网IP,黑石弹性公网IP接口,黑石EIP绑定VPCIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.BindRsRequest; import com.tencentcloudapi.bmeip.v20180625.models.BindRsResponse;  public class BindRs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             BindRsRequest req = BindRsRequest.fromJsonString(params, BindRsRequest.class);                          BindRsResponse resp = client.BindRs(req);                          System.out.println(BindRsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
151,黑石弹性公网IP,黑石弹性公网IP接口,创建黑石EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.BindVpcIpRequest; import com.tencentcloudapi.bmeip.v20180625.models.BindVpcIpResponse;  public class BindVpcIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             BindVpcIpRequest req = BindVpcIpRequest.fromJsonString(params, BindVpcIpRequest.class);                          BindVpcIpResponse resp = client.BindVpcIp(req);                          System.out.println(BindVpcIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
152,黑石弹性公网IP,黑石弹性公网IP接口,创建黑石弹性公网 EIPACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.BindVpcIpRequest; import com.tencentcloudapi.bmeip.v20180625.models.BindVpcIpResponse;  public class BindVpcIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             BindVpcIpRequest req = BindVpcIpRequest.fromJsonString(params, BindVpcIpRequest.class);                          BindVpcIpResponse resp = client.BindVpcIp(req);                          System.out.println(BindVpcIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
153,黑石弹性公网IP,黑石弹性公网IP接口,释放黑石弹性公网IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.CreateEipRequest; import com.tencentcloudapi.bmeip.v20180625.models.CreateEipResponse;  public class CreateEip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             CreateEipRequest req = CreateEipRequest.fromJsonString(params, CreateEipRequest.class);                          CreateEipResponse resp = client.CreateEip(req);                          System.out.println(CreateEipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
154,黑石弹性公网IP,黑石弹性公网IP接口,删除弹性公网IP ACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.CreateEipAclRequest; import com.tencentcloudapi.bmeip.v20180625.models.CreateEipAclResponse;  public class CreateEipAcl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             CreateEipAclRequest req = CreateEipAclRequest.fromJsonString(params, CreateEipAclRequest.class);                          CreateEipAclResponse resp = client.CreateEipAcl(req);                          System.out.println(CreateEipAclRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
155,黑石弹性公网IP,黑石弹性公网IP接口,查询弹性公网IP ACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.DeleteEipRequest; import com.tencentcloudapi.bmeip.v20180625.models.DeleteEipResponse;  public class DeleteEip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteEipRequest req = DeleteEipRequest.fromJsonString(params, DeleteEipRequest.class);                          DeleteEipResponse resp = client.DeleteEip(req);                          System.out.println(DeleteEipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
156,黑石弹性公网IP,黑石弹性公网IP接口,查询黑石EIP 限额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.DeleteEipAclRequest; import com.tencentcloudapi.bmeip.v20180625.models.DeleteEipAclResponse;  public class DeleteEipAcl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteEipAclRequest req = DeleteEipAclRequest.fromJsonString(params, DeleteEipAclRequest.class);                          DeleteEipAclResponse resp = client.DeleteEipAcl(req);                          System.out.println(DeleteEipAclRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
157,黑石弹性公网IP,黑石弹性公网IP接口,黑石EIP查询接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipQuotaRequest; import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipQuotaResponse;  public class DescribeEipQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEipQuotaRequest req = DescribeEipQuotaRequest.fromJsonString(params, DescribeEipQuotaRequest.class);                          DescribeEipQuotaResponse resp = client.DescribeEipQuota(req);                          System.out.println(DescribeEipQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
158,黑石弹性公网IP,黑石弹性公网IP接口,黑石EIP查询任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipsRequest; import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipsResponse;  public class DescribeEips {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEipsRequest req = DescribeEipsRequest.fromJsonString(params, DescribeEipsRequest.class);                          DescribeEipsResponse resp = client.DescribeEips(req);                          System.out.println(DescribeEipsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
159,黑石弹性公网IP,黑石弹性公网IP接口,修改弹性公网IP ACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipTaskRequest; import com.tencentcloudapi.bmeip.v20180625.models.DescribeEipTaskResponse;  public class DescribeEipTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEipTaskRequest req = DescribeEipTaskRequest.fromJsonString(params, DescribeEipTaskRequest.class);                          DescribeEipTaskResponse resp = client.DescribeEipTask(req);                          System.out.println(DescribeEipTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
160,黑石弹性公网IP,黑石弹性公网IP接口,黑石EIP修改计费方式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipAclRequest; import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipAclResponse;  public class ModifyEipAcl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyEipAclRequest req = ModifyEipAclRequest.fromJsonString(params, ModifyEipAclRequest.class);                          ModifyEipAclResponse resp = client.ModifyEipAcl(req);                          System.out.println(ModifyEipAclRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
161,黑石弹性公网IP,黑石弹性公网IP接口,更新黑石EIP名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipChargeRequest; import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipChargeResponse;  public class ModifyEipCharge {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyEipChargeRequest req = ModifyEipChargeRequest.fromJsonString(params, ModifyEipChargeRequest.class);                          ModifyEipChargeResponse resp = client.ModifyEipCharge(req);                          System.out.println(ModifyEipChargeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
162,黑石弹性公网IP,黑石弹性公网IP接口,解绑弹性公网IP ACL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipChargeRequest; import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipChargeResponse;  public class ModifyEipCharge {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyEipChargeRequest req = ModifyEipChargeRequest.fromJsonString(params, ModifyEipChargeRequest.class);                          ModifyEipChargeResponse resp = client.ModifyEipCharge(req);                          System.out.println(ModifyEipChargeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
163,黑石弹性公网IP,黑石弹性公网IP接口,黑石托管机器解绑EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipNameRequest; import com.tencentcloudapi.bmeip.v20180625.models.ModifyEipNameResponse;  public class ModifyEipName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyEipNameRequest req = ModifyEipNameRequest.fromJsonString(params, ModifyEipNameRequest.class);                          ModifyEipNameResponse resp = client.ModifyEipName(req);                          System.out.println(ModifyEipNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
164,黑石弹性公网IP,黑石弹性公网IP接口,解绑黑石EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.UnbindEipAclsRequest; import com.tencentcloudapi.bmeip.v20180625.models.UnbindEipAclsResponse;  public class UnbindEipAcls {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindEipAclsRequest req = UnbindEipAclsRequest.fromJsonString(params, UnbindEipAclsRequest.class);                          UnbindEipAclsResponse resp = client.UnbindEipAcls(req);                          System.out.println(UnbindEipAclsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
165,黑石弹性公网IP,黑石弹性公网IP接口,黑石EIP解绑VPCIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.UnbindRsRequest; import com.tencentcloudapi.bmeip.v20180625.models.UnbindRsResponse;  public class UnbindRs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmeip.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindRsRequest req = UnbindRsRequest.fromJsonString(params, UnbindRsRequest.class);                          UnbindRsResponse resp = client.UnbindRs(req);                          System.out.println(UnbindRsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
166,黑石负载均衡,七层流量镜像相关接口,绑定黑石服务器七层监听器到流量镜像实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpRequest; import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpResponse;  public class UnbindVpcIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindVpcIpRequest req = UnbindVpcIpRequest.fromJsonString(params, UnbindVpcIpRequest.class);                          UnbindVpcIpResponse resp = client.UnbindVpcIp(req);                          System.out.println(UnbindVpcIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
167,黑石负载均衡,七层流量镜像相关接口,绑定黑石物理服务器成为流量镜像接收机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpRequest; import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpResponse;  public class UnbindVpcIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindVpcIpRequest req = UnbindVpcIpRequest.fromJsonString(params, UnbindVpcIpRequest.class);                          UnbindVpcIpResponse resp = client.UnbindVpcIp(req);                          System.out.println(UnbindVpcIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
168,黑石负载均衡,七层流量镜像相关接口,创建流量镜像实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmeip.v20180625.BmeipClient;  import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpRequest; import com.tencentcloudapi.bmeip.v20180625.models.UnbindVpcIpResponse;  public class UnbindVpcIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmeipClient client = new BmeipClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindVpcIpRequest req = UnbindVpcIpRequest.fromJsonString(params, UnbindVpcIpRequest.class);                          UnbindVpcIpResponse resp = client.UnbindVpcIp(req);                          System.out.println(UnbindVpcIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
169,黑石负载均衡,七层流量镜像相关接口,删除流量镜像实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.BindTrafficMirrorListenersRequest; import com.tencentcloudapi.bmlb.v20180625.models.BindTrafficMirrorListenersResponse;  public class BindTrafficMirrorListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             BindTrafficMirrorListenersRequest req = BindTrafficMirrorListenersRequest.fromJsonString(params, BindTrafficMirrorListenersRequest.class);                          BindTrafficMirrorListenersResponse resp = client.BindTrafficMirrorListeners(req);                          System.out.println(BindTrafficMirrorListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
170,黑石负载均衡,七层流量镜像相关接口,获取流量镜像的监听器列表信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateTrafficMirrorRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateTrafficMirrorResponse;  public class CreateTrafficMirror {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTrafficMirrorRequest req = CreateTrafficMirrorRequest.fromJsonString(params, CreateTrafficMirrorRequest.class);                          CreateTrafficMirrorResponse resp = client.CreateTrafficMirror(req);                          System.out.println(CreateTrafficMirrorRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
171,黑石负载均衡,七层流量镜像相关接口,获取流量镜像接收机健康状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateTrafficMirrorRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateTrafficMirrorResponse;  public class CreateTrafficMirror {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTrafficMirrorRequest req = CreateTrafficMirrorRequest.fromJsonString(params, CreateTrafficMirrorRequest.class);                          CreateTrafficMirrorResponse resp = client.CreateTrafficMirror(req);                          System.out.println(CreateTrafficMirrorRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
172,黑石负载均衡,七层流量镜像相关接口,获取指定流量镜像实例的接收机信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorListenersRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorListenersResponse;  public class DescribeTrafficMirrorListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTrafficMirrorListenersRequest req = DescribeTrafficMirrorListenersRequest.fromJsonString(params, DescribeTrafficMirrorListenersRequest.class);                          DescribeTrafficMirrorListenersResponse resp = client.DescribeTrafficMirrorListeners(req);                          System.out.println(DescribeTrafficMirrorListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
173,黑石负载均衡,七层流量镜像相关接口,获取流量镜像实例的列表信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorReceiverHealthStatusRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorReceiverHealthStatusResponse;  public class DescribeTrafficMirrorReceiverHealthStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTrafficMirrorReceiverHealthStatusRequest req = DescribeTrafficMirrorReceiverHealthStatusRequest.fromJsonString(params, DescribeTrafficMirrorReceiverHealthStatusRequest.class);                          DescribeTrafficMirrorReceiverHealthStatusResponse resp = client.DescribeTrafficMirrorReceiverHealthStatus(req);                          System.out.println(DescribeTrafficMirrorReceiverHealthStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
174,黑石负载均衡,七层流量镜像相关接口,设置流量镜像的别名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorReceiverHealthStatusRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeTrafficMirrorReceiverHealthStatusResponse;  public class DescribeTrafficMirrorReceiverHealthStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTrafficMirrorReceiverHealthStatusRequest req = DescribeTrafficMirrorReceiverHealthStatusRequest.fromJsonString(params, DescribeTrafficMirrorReceiverHealthStatusRequest.class);                          DescribeTrafficMirrorReceiverHealthStatusResponse resp = client.DescribeTrafficMirrorReceiverHealthStatus(req);                          System.out.println(DescribeTrafficMirrorReceiverHealthStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
175,黑石负载均衡,七层流量镜像相关接口,设置流量镜像的健康检查参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorAliasRequest; import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorAliasResponse;  public class SetTrafficMirrorAlias {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             SetTrafficMirrorAliasRequest req = SetTrafficMirrorAliasRequest.fromJsonString(params, SetTrafficMirrorAliasRequest.class);                          SetTrafficMirrorAliasResponse resp = client.SetTrafficMirrorAlias(req);                          System.out.println(SetTrafficMirrorAliasRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
176,黑石负载均衡,七层流量镜像相关接口,解绑流量镜像监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorHealthSwitchRequest; import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorHealthSwitchResponse;  public class SetTrafficMirrorHealthSwitch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             SetTrafficMirrorHealthSwitchRequest req = SetTrafficMirrorHealthSwitchRequest.fromJsonString(params, SetTrafficMirrorHealthSwitchRequest.class);                          SetTrafficMirrorHealthSwitchResponse resp = client.SetTrafficMirrorHealthSwitch(req);                          System.out.println(SetTrafficMirrorHealthSwitchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
177,黑石负载均衡,七层流量镜像相关接口,解绑流量镜像接收机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorHealthSwitchRequest; import com.tencentcloudapi.bmlb.v20180625.models.SetTrafficMirrorHealthSwitchResponse;  public class SetTrafficMirrorHealthSwitch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             SetTrafficMirrorHealthSwitchRequest req = SetTrafficMirrorHealthSwitchRequest.fromJsonString(params, SetTrafficMirrorHealthSwitchRequest.class);                          SetTrafficMirrorHealthSwitchResponse resp = client.SetTrafficMirrorHealthSwitch(req);                          System.out.println(SetTrafficMirrorHealthSwitchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
178,黑石负载均衡,七层负载均衡相关接口,绑定黑石物理服务器或半托管服务器到七层转发路径,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UnbindTrafficMirrorReceiversRequest; import com.tencentcloudapi.bmlb.v20180625.models.UnbindTrafficMirrorReceiversResponse;  public class UnbindTrafficMirrorReceivers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindTrafficMirrorReceiversRequest req = UnbindTrafficMirrorReceiversRequest.fromJsonString(params, UnbindTrafficMirrorReceiversRequest.class);                          UnbindTrafficMirrorReceiversResponse resp = client.UnbindTrafficMirrorReceivers(req);                          System.out.println(UnbindTrafficMirrorReceiversRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
179,黑石负载均衡,七层负载均衡相关接口,创建黑石负载均衡七层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UnbindTrafficMirrorReceiversRequest; import com.tencentcloudapi.bmlb.v20180625.models.UnbindTrafficMirrorReceiversResponse;  public class UnbindTrafficMirrorReceivers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindTrafficMirrorReceiversRequest req = UnbindTrafficMirrorReceiversRequest.fromJsonString(params, UnbindTrafficMirrorReceiversRequest.class);                          UnbindTrafficMirrorReceiversResponse resp = client.UnbindTrafficMirrorReceivers(req);                          System.out.println(UnbindTrafficMirrorReceiversRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
180,黑石负载均衡,七层负载均衡相关接口,创建黑石负载均衡七层转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.BindL7BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.BindL7BackendsResponse;  public class BindL7Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             BindL7BackendsRequest req = BindL7BackendsRequest.fromJsonString(params, BindL7BackendsRequest.class);                          BindL7BackendsResponse resp = client.BindL7Backends(req);                          System.out.println(BindL7BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
181,黑石负载均衡,七层负载均衡相关接口,删除黑石负载均衡七层转发域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateL7RulesRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateL7RulesResponse;  public class CreateL7Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateL7RulesRequest req = CreateL7RulesRequest.fromJsonString(params, CreateL7RulesRequest.class);                          CreateL7RulesResponse resp = client.CreateL7Rules(req);                          System.out.println(CreateL7RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
182,黑石负载均衡,七层负载均衡相关接口,删除黑石负载均衡七层转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateL7RulesRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateL7RulesResponse;  public class CreateL7Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateL7RulesRequest req = CreateL7RulesRequest.fromJsonString(params, CreateL7RulesRequest.class);                          CreateL7RulesResponse resp = client.CreateL7Rules(req);                          System.out.println(CreateL7RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
183,黑石负载均衡,七层负载均衡相关接口,获取黑石负载均衡七层转发路径绑定的主机列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DeleteL7DomainsRequest; import com.tencentcloudapi.bmlb.v20180625.models.DeleteL7DomainsResponse;  public class DeleteL7Domains {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteL7DomainsRequest req = DeleteL7DomainsRequest.fromJsonString(params, DeleteL7DomainsRequest.class);                          DeleteL7DomainsResponse resp = client.DeleteL7Domains(req);                          System.out.println(DeleteL7DomainsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
184,黑石负载均衡,七层负载均衡相关接口,查找绑定了某主机或者有某转发域名黑石负载均衡七层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DeleteL7RulesRequest; import com.tencentcloudapi.bmlb.v20180625.models.DeleteL7RulesResponse;  public class DeleteL7Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteL7RulesRequest req = DeleteL7RulesRequest.fromJsonString(params, DeleteL7RulesRequest.class);                          DeleteL7RulesResponse resp = client.DeleteL7Rules(req);                          System.out.println(DeleteL7RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
185,黑石负载均衡,七层负载均衡相关接口,获取黑石负载均衡七层监听器列表信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7BackendsResponse;  public class DescribeL7Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL7BackendsRequest req = DescribeL7BackendsRequest.fromJsonString(params, DescribeL7BackendsRequest.class);                          DescribeL7BackendsResponse resp = client.DescribeL7Backends(req);                          System.out.println(DescribeL7BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
186,黑石负载均衡,七层负载均衡相关接口,获取指定VPC下的7层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenerInfoRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenerInfoResponse;  public class DescribeL7ListenerInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL7ListenerInfoRequest req = DescribeL7ListenerInfoRequest.fromJsonString(params, DescribeL7ListenerInfoRequest.class);                          DescribeL7ListenerInfoResponse resp = client.DescribeL7ListenerInfo(req);                          System.out.println(DescribeL7ListenerInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
187,黑石负载均衡,七层负载均衡相关接口,获取黑石负载均衡七层转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenersRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenersResponse;  public class DescribeL7Listeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL7ListenersRequest req = DescribeL7ListenersRequest.fromJsonString(params, DescribeL7ListenersRequest.class);                          DescribeL7ListenersResponse resp = client.DescribeL7Listeners(req);                          System.out.println(DescribeL7ListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
188,黑石负载均衡,七层负载均衡相关接口,修改黑石负载均衡七层转发路径后端实例端口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenersExRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7ListenersExResponse;  public class DescribeL7ListenersEx {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL7ListenersExRequest req = DescribeL7ListenersExRequest.fromJsonString(params, DescribeL7ListenersExRequest.class);                          DescribeL7ListenersExResponse resp = client.DescribeL7ListenersEx(req);                          System.out.println(DescribeL7ListenersExRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
189,黑石负载均衡,七层负载均衡相关接口,修改黑石负载均衡七层转发路径后端实例权重,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7RulesRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL7RulesResponse;  public class DescribeL7Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL7RulesRequest req = DescribeL7RulesRequest.fromJsonString(params, DescribeL7RulesRequest.class);                          DescribeL7RulesResponse resp = client.DescribeL7Rules(req);                          System.out.println(DescribeL7RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
190,黑石负载均衡,七层负载均衡相关接口,修改黑石负载均衡七层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7BackendWeightRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7BackendWeightResponse;  public class ModifyL7BackendWeight {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL7BackendWeightRequest req = ModifyL7BackendWeightRequest.fromJsonString(params, ModifyL7BackendWeightRequest.class);                          ModifyL7BackendWeightResponse resp = client.ModifyL7BackendWeight(req);                          System.out.println(ModifyL7BackendWeightRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
191,黑石负载均衡,七层负载均衡相关接口,修改黑石负载均衡七层转发路径,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7ListenerRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7ListenerResponse;  public class ModifyL7Listener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL7ListenerRequest req = ModifyL7ListenerRequest.fromJsonString(params, ModifyL7ListenerRequest.class);                          ModifyL7ListenerResponse resp = client.ModifyL7Listener(req);                          System.out.println(ModifyL7ListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
192,黑石负载均衡,七层负载均衡相关接口,解绑黑石物理服务器或者托管服务器到七层转发路径,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7LocationsRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL7LocationsResponse;  public class ModifyL7Locations {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL7LocationsRequest req = ModifyL7LocationsRequest.fromJsonString(params, ModifyL7LocationsRequest.class);                          ModifyL7LocationsResponse resp = client.ModifyL7Locations(req);                          System.out.println(ModifyL7LocationsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
193,黑石负载均衡,四层负载均衡相关接口,绑定黑石服务器到四层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UnbindL7BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.UnbindL7BackendsResponse;  public class UnbindL7Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindL7BackendsRequest req = UnbindL7BackendsRequest.fromJsonString(params, UnbindL7BackendsRequest.class);                          UnbindL7BackendsResponse resp = client.UnbindL7Backends(req);                          System.out.println(UnbindL7BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
194,黑石负载均衡,四层负载均衡相关接口,创建黑石四层负载均衡监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UnbindL7BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.UnbindL7BackendsResponse;  public class UnbindL7Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindL7BackendsRequest req = UnbindL7BackendsRequest.fromJsonString(params, UnbindL7BackendsRequest.class);                          UnbindL7BackendsResponse resp = client.UnbindL7Backends(req);                          System.out.println(UnbindL7BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
195,黑石负载均衡,四层负载均衡相关接口,获取黑石负载均衡四层监听器绑定的主机列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.BindL4BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.BindL4BackendsResponse;  public class BindL4Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             BindL4BackendsRequest req = BindL4BackendsRequest.fromJsonString(params, BindL4BackendsRequest.class);                          BindL4BackendsResponse resp = client.BindL4Backends(req);                          System.out.println(BindL4BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
196,黑石负载均衡,四层负载均衡相关接口,查找绑定了某主机或者指定监听器名称的黑石负载均衡四层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateL4ListenersRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateL4ListenersResponse;  public class CreateL4Listeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateL4ListenersRequest req = CreateL4ListenersRequest.fromJsonString(params, CreateL4ListenersRequest.class);                          CreateL4ListenersResponse resp = client.CreateL4Listeners(req);                          System.out.println(CreateL4ListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
197,黑石负载均衡,四层负载均衡相关接口,获取黑石负载均衡四层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL4BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL4BackendsResponse;  public class DescribeL4Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL4BackendsRequest req = DescribeL4BackendsRequest.fromJsonString(params, DescribeL4BackendsRequest.class);                          DescribeL4BackendsResponse resp = client.DescribeL4Backends(req);                          System.out.println(DescribeL4BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
198,黑石负载均衡,四层负载均衡相关接口,修改黑石负载均衡四层监听器后端实例端口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeL4ListenerInfoRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeL4ListenerInfoResponse;  public class DescribeL4ListenerInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeL4ListenerInfoRequest req = DescribeL4ListenerInfoRequest.fromJsonString(params, DescribeL4ListenerInfoRequest.class);                          DescribeL4ListenerInfoResponse resp = client.DescribeL4ListenerInfo(req);                          System.out.println(DescribeL4ListenerInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
199,黑石负载均衡,四层负载均衡相关接口,修改黑石负载均衡四层监听器后端探测端口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendPortRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendPortResponse;  public class ModifyL4BackendPort {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL4BackendPortRequest req = ModifyL4BackendPortRequest.fromJsonString(params, ModifyL4BackendPortRequest.class);                          ModifyL4BackendPortResponse resp = client.ModifyL4BackendPort(req);                          System.out.println(ModifyL4BackendPortRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
200,黑石负载均衡,四层负载均衡相关接口,修改黑石负载均衡四层监听器后端实例权重,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendPortRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendPortResponse;  public class ModifyL4BackendPort {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL4BackendPortRequest req = ModifyL4BackendPortRequest.fromJsonString(params, ModifyL4BackendPortRequest.class);                          ModifyL4BackendPortResponse resp = client.ModifyL4BackendPort(req);                          System.out.println(ModifyL4BackendPortRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
201,黑石负载均衡,四层负载均衡相关接口,修改黑石负载均衡四层监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendProbePortRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4BackendProbePortResponse;  public class ModifyL4BackendProbePort {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL4BackendProbePortRequest req = ModifyL4BackendProbePortRequest.fromJsonString(params, ModifyL4BackendProbePortRequest.class);                          ModifyL4BackendProbePortResponse resp = client.ModifyL4BackendProbePort(req);                          System.out.println(ModifyL4BackendProbePortRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
202,黑石负载均衡,四层负载均衡相关接口,解绑黑石负载均衡四层监听器物理服务器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4ListenerRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4ListenerResponse;  public class ModifyL4Listener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL4ListenerRequest req = ModifyL4ListenerRequest.fromJsonString(params, ModifyL4ListenerRequest.class);                          ModifyL4ListenerResponse resp = client.ModifyL4Listener(req);                          System.out.println(ModifyL4ListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
203,黑石负载均衡,证书相关接口,获取黑石负载均衡证书详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4ListenerRequest; import com.tencentcloudapi.bmlb.v20180625.models.ModifyL4ListenerResponse;  public class ModifyL4Listener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyL4ListenerRequest req = ModifyL4ListenerRequest.fromJsonString(params, ModifyL4ListenerRequest.class);                          ModifyL4ListenerResponse resp = client.ModifyL4Listener(req);                          System.out.println(ModifyL4ListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
204,黑石负载均衡,证书相关接口,更新黑石负载均衡证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UnbindL4BackendsRequest; import com.tencentcloudapi.bmlb.v20180625.models.UnbindL4BackendsResponse;  public class UnbindL4Backends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindL4BackendsRequest req = UnbindL4BackendsRequest.fromJsonString(params, UnbindL4BackendsRequest.class);                          UnbindL4BackendsResponse resp = client.UnbindL4Backends(req);                          System.out.println(UnbindL4BackendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
205,黑石负载均衡,证书相关接口,创建黑石负载均衡证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeCertDetailRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeCertDetailResponse;  public class DescribeCertDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCertDetailRequest req = DescribeCertDetailRequest.fromJsonString(params, DescribeCertDetailRequest.class);                          DescribeCertDetailResponse resp = client.DescribeCertDetail(req);                          System.out.println(DescribeCertDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
206,黑石负载均衡,通用操作相关接口,创建黑石负载均衡实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.ReplaceCertRequest; import com.tencentcloudapi.bmlb.v20180625.models.ReplaceCertResponse;  public class ReplaceCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceCertRequest req = ReplaceCertRequest.fromJsonString(params, ReplaceCertRequest.class);                          ReplaceCertResponse resp = client.ReplaceCert(req);                          System.out.println(ReplaceCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
207,黑石负载均衡,通用操作相关接口,删除黑石负载均衡监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.UploadCertRequest; import com.tencentcloudapi.bmlb.v20180625.models.UploadCertResponse;  public class UploadCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             UploadCertRequest req = UploadCertRequest.fromJsonString(params, UploadCertRequest.class);                          UploadCertResponse resp = client.UploadCert(req);                          System.out.println(UploadCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
208,黑石负载均衡,通用操作相关接口,删除用户指定的黑石负载均衡实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.CreateLoadBalancersRequest; import com.tencentcloudapi.bmlb.v20180625.models.CreateLoadBalancersResponse;  public class CreateLoadBalancers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLoadBalancersRequest req = CreateLoadBalancersRequest.fromJsonString(params, CreateLoadBalancersRequest.class);                          CreateLoadBalancersResponse resp = client.CreateLoadBalancers(req);                          System.out.println(CreateLoadBalancersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
209,黑石负载均衡,通用操作相关接口,查询黑石物理机和虚机以及托管服务器绑定的黑石负载均衡详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DeleteListenersRequest; import com.tencentcloudapi.bmlb.v20180625.models.DeleteListenersResponse;  public class DeleteListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteListenersRequest req = DeleteListenersRequest.fromJsonString(params, DeleteListenersRequest.class);                          DeleteListenersResponse resp = client.DeleteListeners(req);                          System.out.println(DeleteListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
210,黑石负载均衡,通用操作相关接口,获取黑石负载均衡端口相关信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DeleteLoadBalancerRequest; import com.tencentcloudapi.bmlb.v20180625.models.DeleteLoadBalancerResponse;  public class DeleteLoadBalancer {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLoadBalancerRequest req = DeleteLoadBalancerRequest.fromJsonString(params, DeleteLoadBalancerRequest.class);                          DeleteLoadBalancerResponse resp = client.DeleteLoadBalancer(req);                          System.out.println(DeleteLoadBalancerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
211,黑石负载均衡,通用操作相关接口,获取黑石负载均衡实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerPortInfoRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerPortInfoResponse;  public class DescribeLoadBalancerPortInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoadBalancerPortInfoRequest req = DescribeLoadBalancerPortInfoRequest.fromJsonString(params, DescribeLoadBalancerPortInfoRequest.class);                          DescribeLoadBalancerPortInfoResponse resp = client.DescribeLoadBalancerPortInfo(req);                          System.out.println(DescribeLoadBalancerPortInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
212,黑石负载均衡,通用操作相关接口,查询负载均衡实例异步任务的执行情况,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerPortInfoRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerPortInfoResponse;  public class DescribeLoadBalancerPortInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoadBalancerPortInfoRequest req = DescribeLoadBalancerPortInfoRequest.fromJsonString(params, DescribeLoadBalancerPortInfoRequest.class);                          DescribeLoadBalancerPortInfoResponse resp = client.DescribeLoadBalancerPortInfo(req);                          System.out.println(DescribeLoadBalancerPortInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
213,黑石负载均衡,通用操作相关接口,修改黑石负载均衡实例的基本配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerTaskResultRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerTaskResultResponse;  public class DescribeLoadBalancerTaskResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoadBalancerTaskResultRequest req = DescribeLoadBalancerTaskResultRequest.fromJsonString(params, DescribeLoadBalancerTaskResultRequest.class);                          DescribeLoadBalancerTaskResultResponse resp = client.DescribeLoadBalancerTaskResult(req);                          System.out.println(DescribeLoadBalancerTaskResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
214,黑石负载均衡,通用操作相关接口,更改黑石负载均衡的计费方式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmlb.v20180625.BmlbClient;  import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerTaskResultRequest; import com.tencentcloudapi.bmlb.v20180625.models.DescribeLoadBalancerTaskResultResponse;  public class DescribeLoadBalancerTaskResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmlb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmlbClient client = new BmlbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoadBalancerTaskResultRequest req = DescribeLoadBalancerTaskResultRequest.fromJsonString(params, DescribeLoadBalancerTaskResultRequest.class);                          DescribeLoadBalancerTaskResultResponse resp = client.DescribeLoadBalancerTaskResult(req);                          System.out.println(DescribeLoadBalancerTaskResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
215,对象存储,Service 接口,GET Service,None
216,对象存储,Bucket 基本操作,PUT Bucket,None
217,对象存储,Bucket 基本操作,GET Bucket（List Object）,None
218,对象存储,Bucket 基本操作,HEAD Bucket,None
219,对象存储,Bucket 基本操作,DELETE Bucket,None
220,对象存储,Bucket 访问控制,PUT Bucket acl,None
221,对象存储,Bucket 访问控制,GET Bucket acl,None
222,对象存储,Bucket 跨域配置,PUT Bucket cors,None
223,对象存储,Bucket 跨域配置,GET Bucket cors,None
224,对象存储,Bucket 跨域配置,DELETE Bucket cors,None
225,对象存储,Bucket 生命周期,PUT Bucket lifecycle,None
226,对象存储,Bucket 生命周期,GET Bucket lifecycle,None
227,对象存储,Bucket 生命周期,DELETE Bucket lifecycle,None
228,对象存储,Bucket 权限策略,PUT Bucket policy,None
229,对象存储,Bucket 权限策略,GET Bucket policy,None
230,对象存储,Bucket 权限策略,DELETE Bucket policy,None
231,对象存储,Bucket 防盗链,PUT Bucket referer,None
232,对象存储,Bucket 防盗链,GET Bucket referer,None
233,对象存储,Bucket 标签,PUT Bucket tagging,None
234,对象存储,Bucket 标签,GET Bucket tagging,None
235,对象存储,Bucket 标签,DELETE Bucket tagging,None
236,对象存储,Bucket 静态网站,PUT Bucket website,None
237,对象存储,Bucket 静态网站,GET Bucket website,None
238,对象存储,Bucket 静态网站,DELETE Bucket website,None
239,对象存储,Bucket 清单,PUT Bucket inventory,None
240,对象存储,Bucket 清单,GET Bucket inventory,None
241,对象存储,Bucket 清单,List Bucket Inventory Configurations,None
242,对象存储,Bucket 清单,DELETE Bucket inventory,None
243,对象存储,Bucket 跨地域复制,PUT Bucket replication,None
244,对象存储,Bucket 跨地域复制,GET Bucket replication,None
245,对象存储,Bucket 跨地域复制,DELETE Bucket replication,None
246,对象存储,Bucket 多版本,PUT Bucket versioning,None
247,对象存储,Bucket 多版本,GET Bucket versioning,None
248,对象存储,Bucket 多版本,GET Bucket Object versions,None
249,对象存储,Object 基本操作,PUT Object,None
250,对象存储,Object 基本操作,PUT Object - Copy,None
251,对象存储,Object 基本操作,POST Object,None
252,对象存储,Object 基本操作,GET Object,None
253,对象存储,Object 基本操作,HEAD Object,None
254,对象存储,Object 基本操作,DELETE Object,None
255,对象存储,Object 基本操作,DELETE Multiple Objects,None
256,对象存储,Object 基本操作,OPTIONS Object,None
257,对象存储,Object 基本操作,POST Object restore,None
258,对象存储,Object 访问控制,PUT Object acl,None
259,对象存储,Object 访问控制,GET Object acl,None
260,对象存储,Object 分块上传,Initiate Multipart Upload,None
261,对象存储,Object 分块上传,Upload Part,None
262,对象存储,Object 分块上传,Upload Part - Copy,None
263,对象存储,Object 分块上传,Complete Multipart Upload,None
264,对象存储,Object 分块上传,Abort Multipart Upload,None
265,对象存储,Object 分块上传,List Parts,None
266,对象存储,Object 分块上传,List Multipart Uploads,None
267,黑石私有网络,IPsecVPN相关接口,创建对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cos.v20181126.CosClient;  import com.tencentcloudapi.cos.v20181126.models.ListMultipartUploadsRequest; import com.tencentcloudapi.cos.v20181126.models.ListMultipartUploadsResponse;  public class ListMultipartUploads {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CosClient client = new CosClient(cred, """", clientProfile);                          String params = ""{}"";             ListMultipartUploadsRequest req = ListMultipartUploadsRequest.fromJsonString(params, ListMultipartUploadsRequest.class);                          ListMultipartUploadsResponse resp = client.ListMultipartUploads(req);                          System.out.println(ListMultipartUploadsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
268,黑石私有网络,IPsecVPN相关接口,删除对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cos.v20181126.CosClient;  import com.tencentcloudapi.cos.v20181126.models.ListMultipartUploadsRequest; import com.tencentcloudapi.cos.v20181126.models.ListMultipartUploadsResponse;  public class ListMultipartUploads {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CosClient client = new CosClient(cred, """", clientProfile);                          String params = ""{}"";             ListMultipartUploadsRequest req = ListMultipartUploadsRequest.fromJsonString(params, ListMultipartUploadsRequest.class);                          ListMultipartUploadsResponse resp = client.ListMultipartUploads(req);                          System.out.println(ListMultipartUploadsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
269,黑石私有网络,IPsecVPN相关接口,删除VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateCustomerGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateCustomerGatewayResponse;  public class CreateCustomerGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCustomerGatewayRequest req = CreateCustomerGatewayRequest.fromJsonString(params, CreateCustomerGatewayRequest.class);                          CreateCustomerGatewayResponse resp = client.CreateCustomerGateway(req);                          System.out.println(CreateCustomerGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
270,黑石私有网络,IPsecVPN相关接口,删除VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateCustomerGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateCustomerGatewayResponse;  public class CreateCustomerGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCustomerGatewayRequest req = CreateCustomerGatewayRequest.fromJsonString(params, CreateCustomerGatewayRequest.class);                          CreateCustomerGatewayResponse resp = client.CreateCustomerGateway(req);                          System.out.println(CreateCustomerGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
271,黑石私有网络,IPsecVPN相关接口,查询对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteCustomerGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteCustomerGatewayResponse;  public class DeleteCustomerGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteCustomerGatewayRequest req = DeleteCustomerGatewayRequest.fromJsonString(params, DeleteCustomerGatewayRequest.class);                          DeleteCustomerGatewayResponse resp = client.DeleteCustomerGateway(req);                          System.out.println(DeleteCustomerGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
272,黑石私有网络,IPsecVPN相关接口,查询VPN通道列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpnConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpnConnectionResponse;  public class DeleteVpnConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpnConnectionRequest req = DeleteVpnConnectionRequest.fromJsonString(params, DeleteVpnConnectionRequest.class);                          DeleteVpnConnectionResponse resp = client.DeleteVpnConnection(req);                          System.out.println(DeleteVpnConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
273,黑石私有网络,IPsecVPN相关接口,查询VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpnGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpnGatewayResponse;  public class DeleteVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpnGatewayRequest req = DeleteVpnGatewayRequest.fromJsonString(params, DeleteVpnGatewayRequest.class);                          DeleteVpnGatewayResponse resp = client.DeleteVpnGateway(req);                          System.out.println(DeleteVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
274,黑石私有网络,IPsecVPN相关接口,下载VPN通道配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeCustomerGatewaysRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeCustomerGatewaysResponse;  public class DescribeCustomerGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCustomerGatewaysRequest req = DescribeCustomerGatewaysRequest.fromJsonString(params, DescribeCustomerGatewaysRequest.class);                          DescribeCustomerGatewaysResponse resp = client.DescribeCustomerGateways(req);                          System.out.println(DescribeCustomerGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
275,黑石私有网络,IPsecVPN相关接口,修改对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpnConnectionsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpnConnectionsResponse;  public class DescribeVpnConnections {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpnConnectionsRequest req = DescribeVpnConnectionsRequest.fromJsonString(params, DescribeVpnConnectionsRequest.class);                          DescribeVpnConnectionsResponse resp = client.DescribeVpnConnections(req);                          System.out.println(DescribeVpnConnectionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
276,黑石私有网络,IPsecVPN相关接口,修改VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DownloadCustomerGatewayConfigurationRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DownloadCustomerGatewayConfigurationResponse;  public class DownloadCustomerGatewayConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadCustomerGatewayConfigurationRequest req = DownloadCustomerGatewayConfigurationRequest.fromJsonString(params, DownloadCustomerGatewayConfigurationRequest.class);                          DownloadCustomerGatewayConfigurationResponse resp = client.DownloadCustomerGatewayConfiguration(req);                          System.out.println(DownloadCustomerGatewayConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
277,黑石私有网络,IPsecVPN相关接口,修改VPN网关属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyCustomerGatewayAttributeRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyCustomerGatewayAttributeResponse;  public class ModifyCustomerGatewayAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCustomerGatewayAttributeRequest req = ModifyCustomerGatewayAttributeRequest.fromJsonString(params, ModifyCustomerGatewayAttributeRequest.class);                          ModifyCustomerGatewayAttributeResponse resp = client.ModifyCustomerGatewayAttribute(req);                          System.out.println(ModifyCustomerGatewayAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
278,黑石私有网络,IPsecVPN相关接口,重置VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpnConnectionAttributeRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpnConnectionAttributeResponse;  public class ModifyVpnConnectionAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyVpnConnectionAttributeRequest req = ModifyVpnConnectionAttributeRequest.fromJsonString(params, ModifyVpnConnectionAttributeRequest.class);                          ModifyVpnConnectionAttributeResponse resp = client.ModifyVpnConnectionAttribute(req);                          System.out.println(ModifyVpnConnectionAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
279,黑石私有网络,NAT网关相关接口,NAT网关绑定EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ResetVpnConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ResetVpnConnectionResponse;  public class ResetVpnConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetVpnConnectionRequest req = ResetVpnConnectionRequest.fromJsonString(params, ResetVpnConnectionRequest.class);                          ResetVpnConnectionResponse resp = client.ResetVpnConnection(req);                          System.out.println(ResetVpnConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
280,黑石私有网络,NAT网关相关接口,NAT网关绑定IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ResetVpnConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ResetVpnConnectionResponse;  public class ResetVpnConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetVpnConnectionRequest req = ResetVpnConnectionRequest.fromJsonString(params, ResetVpnConnectionRequest.class);                          ResetVpnConnectionResponse resp = client.ResetVpnConnection(req);                          System.out.println(ResetVpnConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
281,黑石私有网络,NAT网关相关接口,NAT网关绑定子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.BindEipsToNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.BindEipsToNatGatewayResponse;  public class BindEipsToNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             BindEipsToNatGatewayRequest req = BindEipsToNatGatewayRequest.fromJsonString(params, BindEipsToNatGatewayRequest.class);                          BindEipsToNatGatewayResponse resp = client.BindEipsToNatGateway(req);                          System.out.println(BindEipsToNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
282,黑石私有网络,NAT网关相关接口,创建NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.BindIpsToNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.BindIpsToNatGatewayResponse;  public class BindIpsToNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             BindIpsToNatGatewayRequest req = BindIpsToNatGatewayRequest.fromJsonString(params, BindIpsToNatGatewayRequest.class);                          BindIpsToNatGatewayResponse resp = client.BindIpsToNatGateway(req);                          System.out.println(BindIpsToNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
283,黑石私有网络,NAT网关相关接口,删除NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.BindSubnetsToNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.BindSubnetsToNatGatewayResponse;  public class BindSubnetsToNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             BindSubnetsToNatGatewayRequest req = BindSubnetsToNatGatewayRequest.fromJsonString(params, BindSubnetsToNatGatewayRequest.class);                          BindSubnetsToNatGatewayResponse resp = client.BindSubnetsToNatGateway(req);                          System.out.println(BindSubnetsToNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
284,黑石私有网络,NAT网关相关接口,获取NAT网关列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateNatGatewayResponse;  public class CreateNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNatGatewayRequest req = CreateNatGatewayRequest.fromJsonString(params, CreateNatGatewayRequest.class);                          CreateNatGatewayResponse resp = client.CreateNatGateway(req);                          System.out.println(CreateNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
285,黑石私有网络,NAT网关相关接口,获取NAT关联的子网信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteNatGatewayResponse;  public class DeleteNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNatGatewayRequest req = DeleteNatGatewayRequest.fromJsonString(params, DeleteNatGatewayRequest.class);                          DeleteNatGatewayResponse resp = client.DeleteNatGateway(req);                          System.out.println(DeleteNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
286,黑石私有网络,NAT网关相关接口,NAT网关解绑EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeNatGatewaysRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeNatGatewaysResponse;  public class DescribeNatGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNatGatewaysRequest req = DescribeNatGatewaysRequest.fromJsonString(params, DescribeNatGatewaysRequest.class);                          DescribeNatGatewaysResponse resp = client.DescribeNatGateways(req);                          System.out.println(DescribeNatGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
287,黑石私有网络,NAT网关相关接口,NAT网关解绑IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeNatSubnetsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeNatSubnetsResponse;  public class DescribeNatSubnets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNatSubnetsRequest req = DescribeNatSubnetsRequest.fromJsonString(params, DescribeNatSubnetsRequest.class);                          DescribeNatSubnetsResponse resp = client.DescribeNatSubnets(req);                          System.out.println(DescribeNatSubnetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
288,黑石私有网络,NAT网关相关接口,NAT网关解绑子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.UnbindEipsFromNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.UnbindEipsFromNatGatewayResponse;  public class UnbindEipsFromNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindEipsFromNatGatewayRequest req = UnbindEipsFromNatGatewayRequest.fromJsonString(params, UnbindEipsFromNatGatewayRequest.class);                          UnbindEipsFromNatGatewayResponse resp = client.UnbindEipsFromNatGateway(req);                          System.out.println(UnbindEipsFromNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
289,黑石私有网络,NAT网关相关接口,升级NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.UnbindIpsFromNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.UnbindIpsFromNatGatewayResponse;  public class UnbindIpsFromNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnbindIpsFromNatGatewayRequest req = UnbindIpsFromNatGatewayRequest.fromJsonString(params, UnbindIpsFromNatGatewayRequest.class);                          UnbindIpsFromNatGatewayResponse resp = client.UnbindIpsFromNatGateway(req);                          System.out.println(UnbindIpsFromNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
290,黑石私有网络,对等连接相关接口,接受黑石对等连接,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.UpgradeNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.UpgradeNatGatewayResponse;  public class UpgradeNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeNatGatewayRequest req = UpgradeNatGatewayRequest.fromJsonString(params, UpgradeNatGatewayRequest.class);                          UpgradeNatGatewayResponse resp = client.UpgradeNatGateway(req);                          System.out.println(UpgradeNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
291,黑石私有网络,对等连接相关接口,创建对等连接,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.UpgradeNatGatewayRequest; import com.tencentcloudapi.bmvpc.v20180625.models.UpgradeNatGatewayResponse;  public class UpgradeNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeNatGatewayRequest req = UpgradeNatGatewayRequest.fromJsonString(params, UpgradeNatGatewayRequest.class);                          UpgradeNatGatewayResponse resp = client.UpgradeNatGateway(req);                          System.out.println(UpgradeNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
292,黑石私有网络,对等连接相关接口,删除黑石对等连接,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.AcceptVpcPeerConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.AcceptVpcPeerConnectionResponse;  public class AcceptVpcPeerConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             AcceptVpcPeerConnectionRequest req = AcceptVpcPeerConnectionRequest.fromJsonString(params, AcceptVpcPeerConnectionRequest.class);                          AcceptVpcPeerConnectionResponse resp = client.AcceptVpcPeerConnection(req);                          System.out.println(AcceptVpcPeerConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
293,黑石私有网络,对等连接相关接口,获取对等连接列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateVpcPeerConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateVpcPeerConnectionResponse;  public class CreateVpcPeerConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVpcPeerConnectionRequest req = CreateVpcPeerConnectionRequest.fromJsonString(params, CreateVpcPeerConnectionRequest.class);                          CreateVpcPeerConnectionResponse resp = client.CreateVpcPeerConnection(req);                          System.out.println(CreateVpcPeerConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
294,黑石私有网络,对等连接相关接口,修改黑石对等连接,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpcPeerConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpcPeerConnectionResponse;  public class DeleteVpcPeerConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpcPeerConnectionRequest req = DeleteVpcPeerConnectionRequest.fromJsonString(params, DeleteVpcPeerConnectionRequest.class);                          DeleteVpcPeerConnectionResponse resp = client.DeleteVpcPeerConnection(req);                          System.out.println(DeleteVpcPeerConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
295,黑石私有网络,对等连接相关接口,拒绝黑石对等连接申请,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcPeerConnectionsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcPeerConnectionsResponse;  public class DescribeVpcPeerConnections {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcPeerConnectionsRequest req = DescribeVpcPeerConnectionsRequest.fromJsonString(params, DescribeVpcPeerConnectionsRequest.class);                          DescribeVpcPeerConnectionsResponse resp = client.DescribeVpcPeerConnections(req);                          System.out.println(DescribeVpcPeerConnectionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
296,黑石私有网络,私有网络相关接口,批量注册虚拟IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.RejectVpcPeerConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.RejectVpcPeerConnectionResponse;  public class RejectVpcPeerConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectVpcPeerConnectionRequest req = RejectVpcPeerConnectionRequest.fromJsonString(params, RejectVpcPeerConnectionRequest.class);                          RejectVpcPeerConnectionResponse resp = client.RejectVpcPeerConnection(req);                          System.out.println(RejectVpcPeerConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
297,黑石私有网络,私有网络相关接口,创建黑石Docker子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.RejectVpcPeerConnectionRequest; import com.tencentcloudapi.bmvpc.v20180625.models.RejectVpcPeerConnectionResponse;  public class RejectVpcPeerConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectVpcPeerConnectionRequest req = RejectVpcPeerConnectionRequest.fromJsonString(params, RejectVpcPeerConnectionRequest.class);                          RejectVpcPeerConnectionResponse resp = client.RejectVpcPeerConnection(req);                          System.out.println(RejectVpcPeerConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
298,黑石私有网络,私有网络相关接口,黑石托管机器加入子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.AsyncRegisterIpsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.AsyncRegisterIpsResponse;  public class AsyncRegisterIps {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             AsyncRegisterIpsRequest req = AsyncRegisterIpsRequest.fromJsonString(params, AsyncRegisterIpsRequest.class);                          AsyncRegisterIpsResponse resp = client.AsyncRegisterIps(req);                          System.out.println(AsyncRegisterIpsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
299,黑石私有网络,私有网络相关接口,物理机加入子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateDockerSubnetWithVlanRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateDockerSubnetWithVlanResponse;  public class CreateDockerSubnetWithVlan {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDockerSubnetWithVlanRequest req = CreateDockerSubnetWithVlanRequest.fromJsonString(params, CreateDockerSubnetWithVlanRequest.class);                          CreateDockerSubnetWithVlanResponse resp = client.CreateDockerSubnetWithVlan(req);                          System.out.println(CreateDockerSubnetWithVlanRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
300,黑石私有网络,私有网络相关接口,创建黑石私有网络的子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateHostedInterfaceRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateHostedInterfaceResponse;  public class CreateHostedInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateHostedInterfaceRequest req = CreateHostedInterfaceRequest.fromJsonString(params, CreateHostedInterfaceRequest.class);                          CreateHostedInterfaceResponse resp = client.CreateHostedInterface(req);                          System.out.println(CreateHostedInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
301,黑石私有网络,私有网络相关接口,创建黑石虚拟子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateInterfacesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateInterfacesResponse;  public class CreateInterfaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateInterfacesRequest req = CreateInterfacesRequest.fromJsonString(params, CreateInterfacesRequest.class);                          CreateInterfacesResponse resp = client.CreateInterfaces(req);                          System.out.println(CreateInterfacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
302,黑石私有网络,私有网络相关接口,创建黑石私有网络,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateSubnetRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateSubnetResponse;  public class CreateSubnet {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSubnetRequest req = CreateSubnetRequest.fromJsonString(params, CreateSubnetRequest.class);                          CreateSubnetResponse resp = client.CreateSubnet(req);                          System.out.println(CreateSubnetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
303,黑石私有网络,私有网络相关接口,黑石托管机器移除子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateVirtualSubnetWithVlanRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateVirtualSubnetWithVlanResponse;  public class CreateVirtualSubnetWithVlan {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVirtualSubnetWithVlanRequest req = CreateVirtualSubnetWithVlanRequest.fromJsonString(params, CreateVirtualSubnetWithVlanRequest.class);                          CreateVirtualSubnetWithVlanResponse resp = client.CreateVirtualSubnetWithVlan(req);                          System.out.println(CreateVirtualSubnetWithVlanRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
304,黑石私有网络,私有网络相关接口,托管机器移除子网(批量接口),"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateVirtualSubnetWithVlanRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateVirtualSubnetWithVlanResponse;  public class CreateVirtualSubnetWithVlan {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVirtualSubnetWithVlanRequest req = CreateVirtualSubnetWithVlanRequest.fromJsonString(params, CreateVirtualSubnetWithVlanRequest.class);                          CreateVirtualSubnetWithVlanResponse resp = client.CreateVirtualSubnetWithVlan(req);                          System.out.println(CreateVirtualSubnetWithVlanRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
305,黑石私有网络,私有网络相关接口,物理机移除子网(批量接口),"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteHostedInterfaceRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteHostedInterfaceResponse;  public class DeleteHostedInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteHostedInterfaceRequest req = DeleteHostedInterfaceRequest.fromJsonString(params, DeleteHostedInterfaceRequest.class);                          DeleteHostedInterfaceResponse resp = client.DeleteHostedInterface(req);                          System.out.println(DeleteHostedInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
306,黑石私有网络,私有网络相关接口,删除子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteHostedInterfacesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteHostedInterfacesResponse;  public class DeleteHostedInterfaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteHostedInterfacesRequest req = DeleteHostedInterfacesRequest.fromJsonString(params, DeleteHostedInterfacesRequest.class);                          DeleteHostedInterfacesResponse resp = client.DeleteHostedInterfaces(req);                          System.out.println(DeleteHostedInterfacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
307,黑石私有网络,私有网络相关接口,退还虚拟IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteInterfacesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteInterfacesResponse;  public class DeleteInterfaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteInterfacesRequest req = DeleteInterfacesRequest.fromJsonString(params, DeleteInterfacesRequest.class);                          DeleteInterfacesResponse resp = client.DeleteInterfaces(req);                          System.out.println(DeleteInterfacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
308,黑石私有网络,私有网络相关接口,删除私有网络,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteSubnetRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteSubnetResponse;  public class DeleteSubnet {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSubnetRequest req = DeleteSubnetRequest.fromJsonString(params, DeleteSubnetRequest.class);                          DeleteSubnetResponse resp = client.DeleteSubnet(req);                          System.out.println(DeleteSubnetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
309,黑石私有网络,私有网络相关接口,注销私有网络IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVirtualIpRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVirtualIpResponse;  public class DeleteVirtualIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVirtualIpRequest req = DeleteVirtualIpRequest.fromJsonString(params, DeleteVirtualIpRequest.class);                          DeleteVirtualIpResponse resp = client.DeleteVirtualIp(req);                          System.out.println(DeleteVirtualIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
310,黑石私有网络,私有网络相关接口,获取子网内可用IP列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpcRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeleteVpcResponse;  public class DeleteVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpcRequest req = DeleteVpcRequest.fromJsonString(params, DeleteVpcRequest.class);                          DeleteVpcResponse resp = client.DeleteVpc(req);                          System.out.println(DeleteVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
311,黑石私有网络,私有网络相关接口,查询物理机加入的子网列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DeregisterIpsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DeregisterIpsResponse;  public class DeregisterIps {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeregisterIpsRequest req = DeregisterIpsRequest.fromJsonString(params, DeregisterIpsRequest.class);                          DeregisterIpsResponse resp = client.DeregisterIps(req);                          System.out.println(DeregisterIpsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
312,黑石私有网络,私有网络相关接口,查询托管机器加入的子网列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetAvailableIpsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetAvailableIpsResponse;  public class DescribeSubnetAvailableIps {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSubnetAvailableIpsRequest req = DescribeSubnetAvailableIpsRequest.fromJsonString(params, DescribeSubnetAvailableIpsRequest.class);                          DescribeSubnetAvailableIpsResponse resp = client.DescribeSubnetAvailableIps(req);                          System.out.println(DescribeSubnetAvailableIpsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
313,黑石私有网络,私有网络相关接口,查询子网列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetByHostedDeviceRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetByHostedDeviceResponse;  public class DescribeSubnetByHostedDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSubnetByHostedDeviceRequest req = DescribeSubnetByHostedDeviceRequest.fromJsonString(params, DescribeSubnetByHostedDeviceRequest.class);                          DescribeSubnetByHostedDeviceResponse resp = client.DescribeSubnetByHostedDevice(req);                          System.out.println(DescribeSubnetByHostedDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
314,黑石私有网络,私有网络相关接口,获取黑石私有网络的配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetByHostedDeviceRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetByHostedDeviceResponse;  public class DescribeSubnetByHostedDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSubnetByHostedDeviceRequest req = DescribeSubnetByHostedDeviceRequest.fromJsonString(params, DescribeSubnetByHostedDeviceRequest.class);                          DescribeSubnetByHostedDeviceResponse resp = client.DescribeSubnetByHostedDevice(req);                          System.out.println(DescribeSubnetByHostedDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
315,黑石私有网络,私有网络相关接口,查询黑石私有网络关联资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeSubnetsResponse;  public class DescribeSubnets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSubnetsRequest req = DescribeSubnetsRequest.fromJsonString(params, DescribeSubnetsRequest.class);                          DescribeSubnetsResponse resp = client.DescribeSubnets(req);                          System.out.println(DescribeSubnetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
316,黑石私有网络,私有网络相关接口,查询VPC列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcQuotaRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcQuotaResponse;  public class DescribeVpcQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcQuotaRequest req = DescribeVpcQuotaRequest.fromJsonString(params, DescribeVpcQuotaRequest.class);                          DescribeVpcQuotaResponse resp = client.DescribeVpcQuota(req);                          System.out.println(DescribeVpcQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
317,黑石私有网络,私有网络相关接口,查询黑石VPC视图,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcResourceRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcResourceResponse;  public class DescribeVpcResource {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcResourceRequest req = DescribeVpcResourceRequest.fromJsonString(params, DescribeVpcResourceRequest.class);                          DescribeVpcResourceResponse resp = client.DescribeVpcResource(req);                          System.out.println(DescribeVpcResourceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
318,黑石私有网络,私有网络相关接口,修改子网属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcsRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcsResponse;  public class DescribeVpcs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcsRequest req = DescribeVpcsRequest.fromJsonString(params, DescribeVpcsRequest.class);                          DescribeVpcsResponse resp = client.DescribeVpcs(req);                          System.out.println(DescribeVpcsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
319,黑石私有网络,私有网络相关接口,修改子网DHCP Relay属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcViewRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeVpcViewResponse;  public class DescribeVpcView {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcViewRequest req = DescribeVpcViewRequest.fromJsonString(params, DescribeVpcViewRequest.class);                          DescribeVpcViewResponse resp = client.DescribeVpcView(req);                          System.out.println(DescribeVpcViewRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
320,黑石私有网络,私有网络相关接口,修改黑石VPC属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifySubnetAttributeRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifySubnetAttributeResponse;  public class ModifySubnetAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySubnetAttributeRequest req = ModifySubnetAttributeRequest.fromJsonString(params, ModifySubnetAttributeRequest.class);                          ModifySubnetAttributeResponse resp = client.ModifySubnetAttribute(req);                          System.out.println(ModifySubnetAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
321,黑石私有网络,路由表相关接口,创建黑石路由表的路由规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpcAttributeRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpcAttributeResponse;  public class ModifyVpcAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyVpcAttributeRequest req = ModifyVpcAttributeRequest.fromJsonString(params, ModifyVpcAttributeRequest.class);                          ModifyVpcAttributeResponse resp = client.ModifyVpcAttribute(req);                          System.out.println(ModifyVpcAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
322,黑石私有网络,路由表相关接口,删除黑石路由表路由规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpcAttributeRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyVpcAttributeResponse;  public class ModifyVpcAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyVpcAttributeRequest req = ModifyVpcAttributeRequest.fromJsonString(params, ModifyVpcAttributeRequest.class);                          ModifyVpcAttributeResponse resp = client.ModifyVpcAttribute(req);                          System.out.println(ModifyVpcAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
323,黑石私有网络,路由表相关接口,查询黑石路由表条目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.CreateRoutePoliciesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.CreateRoutePoliciesResponse;  public class CreateRoutePolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRoutePoliciesRequest req = CreateRoutePoliciesRequest.fromJsonString(params, CreateRoutePoliciesRequest.class);                          CreateRoutePoliciesResponse resp = client.CreateRoutePolicies(req);                          System.out.println(CreateRoutePoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
324,黑石私有网络,路由表相关接口,查询路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeRoutePoliciesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeRoutePoliciesResponse;  public class DescribeRoutePolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRoutePoliciesRequest req = DescribeRoutePoliciesRequest.fromJsonString(params, DescribeRoutePoliciesRequest.class);                          DescribeRoutePoliciesResponse resp = client.DescribeRoutePolicies(req);                          System.out.println(DescribeRoutePoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
325,黑石私有网络,路由表相关接口,修改自定义路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeRouteTablesRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeRouteTablesResponse;  public class DescribeRouteTables {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteTablesRequest req = DescribeRouteTablesRequest.fromJsonString(params, DescribeRouteTablesRequest.class);                          DescribeRouteTablesResponse resp = client.DescribeRouteTables(req);                          System.out.println(DescribeRouteTablesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
326,黑石私有网络,路由表相关接口,修改路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyRoutePolicyRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyRoutePolicyResponse;  public class ModifyRoutePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyRoutePolicyRequest req = ModifyRoutePolicyRequest.fromJsonString(params, ModifyRoutePolicyRequest.class);                          ModifyRoutePolicyResponse resp = client.ModifyRoutePolicy(req);                          System.out.println(ModifyRoutePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
327,黑石私有网络,黑石私有网络接口,获取任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.ModifyRouteTableRequest; import com.tencentcloudapi.bmvpc.v20180625.models.ModifyRouteTableResponse;  public class ModifyRouteTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyRouteTableRequest req = ModifyRouteTableRequest.fromJsonString(params, ModifyRouteTableRequest.class);                          ModifyRouteTableResponse resp = client.ModifyRouteTable(req);                          System.out.println(ModifyRouteTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
328,容器服务,伸缩组相关接口,删除集群伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
329,容器服务,网络相关接口,创建集群路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
330,容器服务,网络相关接口,创建集群路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
331,容器服务,网络相关接口,删除集群路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bmvpc.v20180625.BmvpcClient;  import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusRequest; import com.tencentcloudapi.bmvpc.v20180625.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bmvpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BmvpcClient client = new BmvpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
332,容器服务,网络相关接口,删除集群路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterRouteRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterRouteResponse;  public class CreateClusterRoute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterRouteRequest req = CreateClusterRouteRequest.fromJsonString(params, CreateClusterRouteRequest.class);                          CreateClusterRouteResponse resp = client.CreateClusterRoute(req);                          System.out.println(CreateClusterRouteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
333,容器服务,网络相关接口,查询集群路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterRouteRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterRouteResponse;  public class CreateClusterRoute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterRouteRequest req = CreateClusterRouteRequest.fromJsonString(params, CreateClusterRouteRequest.class);                          CreateClusterRouteResponse resp = client.CreateClusterRoute(req);                          System.out.println(CreateClusterRouteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
334,容器服务,网络相关接口,查询集群路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DeleteClusterRouteTableRequest; import com.tencentcloudapi.tke.v20180525.models.DeleteClusterRouteTableResponse;  public class DeleteClusterRouteTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteClusterRouteTableRequest req = DeleteClusterRouteTableRequest.fromJsonString(params, DeleteClusterRouteTableRequest.class);                          DeleteClusterRouteTableResponse resp = client.DeleteClusterRouteTable(req);                          System.out.println(DeleteClusterRouteTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
335,容器服务,网络相关接口,查询路由表冲突列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DescribeClusterRoutesRequest; import com.tencentcloudapi.tke.v20180525.models.DescribeClusterRoutesResponse;  public class DescribeClusterRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClusterRoutesRequest req = DescribeClusterRoutesRequest.fromJsonString(params, DescribeClusterRoutesRequest.class);                          DescribeClusterRoutesResponse resp = client.DescribeClusterRoutes(req);                          System.out.println(DescribeClusterRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
336,容器服务,节点相关接口,添加已经存在的实例到集群,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DescribeRouteTableConflictsRequest; import com.tencentcloudapi.tke.v20180525.models.DescribeRouteTableConflictsResponse;  public class DescribeRouteTableConflicts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteTableConflictsRequest req = DescribeRouteTableConflictsRequest.fromJsonString(params, DescribeRouteTableConflictsRequest.class);                          DescribeRouteTableConflictsResponse resp = client.DescribeRouteTableConflicts(req);                          System.out.println(DescribeRouteTableConflictsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
337,容器服务,节点相关接口,扩展集群节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DescribeRouteTableConflictsRequest; import com.tencentcloudapi.tke.v20180525.models.DescribeRouteTableConflictsResponse;  public class DescribeRouteTableConflicts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteTableConflictsRequest req = DescribeRouteTableConflictsRequest.fromJsonString(params, DescribeRouteTableConflictsRequest.class);                          DescribeRouteTableConflictsResponse resp = client.DescribeRouteTableConflicts(req);                          System.out.println(DescribeRouteTableConflictsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
338,容器服务,节点相关接口,删除集群中的节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesResponse;  public class CreateClusterInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterInstancesRequest req = CreateClusterInstancesRequest.fromJsonString(params, CreateClusterInstancesRequest.class);                          CreateClusterInstancesResponse resp = client.CreateClusterInstances(req);                          System.out.println(CreateClusterInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
339,容器服务,节点相关接口,查询已经存在的节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesResponse;  public class CreateClusterInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterInstancesRequest req = CreateClusterInstancesRequest.fromJsonString(params, CreateClusterInstancesRequest.class);                          CreateClusterInstancesResponse resp = client.CreateClusterInstances(req);                          System.out.println(CreateClusterInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
340,容器服务,集群相关接口,创建集群,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterInstancesResponse;  public class CreateClusterInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterInstancesRequest req = CreateClusterInstancesRequest.fromJsonString(params, CreateClusterInstancesRequest.class);                          CreateClusterInstancesResponse resp = client.CreateClusterInstances(req);                          System.out.println(CreateClusterInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
341,容器服务,集群相关接口,创建集群的伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterResponse;  public class CreateCluster {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterRequest req = CreateClusterRequest.fromJsonString(params, CreateClusterRequest.class);                          CreateClusterResponse resp = client.CreateCluster(req);                          System.out.println(CreateClusterRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
342,容器服务,集群相关接口,删除集群,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterAsGroupRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterAsGroupResponse;  public class CreateClusterAsGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterAsGroupRequest req = CreateClusterAsGroupRequest.fromJsonString(params, CreateClusterAsGroupRequest.class);                          CreateClusterAsGroupResponse resp = client.CreateClusterAsGroup(req);                          System.out.println(CreateClusterAsGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
343,容器服务,集群相关接口,查询集群节点信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.CreateClusterAsGroupRequest; import com.tencentcloudapi.tke.v20180525.models.CreateClusterAsGroupResponse;  public class CreateClusterAsGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterAsGroupRequest req = CreateClusterAsGroupRequest.fromJsonString(params, CreateClusterAsGroupRequest.class);                          CreateClusterAsGroupResponse resp = client.CreateClusterAsGroup(req);                          System.out.println(CreateClusterAsGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
344,容器服务,集群相关接口,查询集群列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DeleteClusterRequest; import com.tencentcloudapi.tke.v20180525.models.DeleteClusterResponse;  public class DeleteCluster {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteClusterRequest req = DeleteClusterRequest.fromJsonString(params, DeleteClusterRequest.class);                          DeleteClusterResponse resp = client.DeleteCluster(req);                          System.out.println(DeleteClusterRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
345,容器服务,集群相关接口,集群的密钥信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DescribeClusterInstancesRequest; import com.tencentcloudapi.tke.v20180525.models.DescribeClusterInstancesResponse;  public class DescribeClusterInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClusterInstancesRequest req = DescribeClusterInstancesRequest.fromJsonString(params, DescribeClusterInstancesRequest.class);                          DescribeClusterInstancesResponse resp = client.DescribeClusterInstances(req);                          System.out.println(DescribeClusterInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
346,弹性伸缩,PAI实例相关接口,创建单个PAI实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tke.v20180525.TkeClient;  import com.tencentcloudapi.tke.v20180525.models.DescribeClustersRequest; import com.tencentcloudapi.tke.v20180525.models.DescribeClustersResponse;  public class DescribeClusters {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tke.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkeClient client = new TkeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClustersRequest req = DescribeClustersRequest.fromJsonString(params, DescribeClustersRequest.class);                          DescribeClustersResponse resp = client.DescribeClusters(req);                          System.out.println(DescribeClustersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
347,弹性伸缩,PAI实例相关接口,查询PAI实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreatePaiInstanceRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreatePaiInstanceResponse;  public class CreatePaiInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePaiInstanceRequest req = CreatePaiInstanceRequest.fromJsonString(params, CreatePaiInstanceRequest.class);                          CreatePaiInstanceResponse resp = client.CreatePaiInstance(req);                          System.out.println(CreatePaiInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
348,弹性伸缩,PAI实例相关接口,预览PAI实例域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribePaiInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribePaiInstancesResponse;  public class DescribePaiInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePaiInstancesRequest req = DescribePaiInstancesRequest.fromJsonString(params, DescribePaiInstancesRequest.class);                          DescribePaiInstancesResponse resp = client.DescribePaiInstances(req);                          System.out.println(DescribePaiInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
349,弹性伸缩,伸缩组相关接口,添加 CVM 实例到伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribePaiInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribePaiInstancesResponse;  public class DescribePaiInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePaiInstancesRequest req = DescribePaiInstancesRequest.fromJsonString(params, DescribePaiInstancesRequest.class);                          DescribePaiInstancesResponse resp = client.DescribePaiInstances(req);                          System.out.println(DescribePaiInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
350,弹性伸缩,伸缩组相关接口,创建伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.PreviewPaiDomainNameRequest; import com.tencentcloudapi.autoscaling.v20180419.models.PreviewPaiDomainNameResponse;  public class PreviewPaiDomainName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             PreviewPaiDomainNameRequest req = PreviewPaiDomainNameRequest.fromJsonString(params, PreviewPaiDomainNameRequest.class);                          PreviewPaiDomainNameResponse resp = client.PreviewPaiDomainName(req);                          System.out.println(PreviewPaiDomainNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
351,弹性伸缩,伸缩组相关接口,删除伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.AttachInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.AttachInstancesResponse;  public class AttachInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             AttachInstancesRequest req = AttachInstancesRequest.fromJsonString(params, AttachInstancesRequest.class);                          AttachInstancesResponse resp = client.AttachInstances(req);                          System.out.println(AttachInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
352,弹性伸缩,伸缩组相关接口,查询伸缩活动,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteAutoScalingGroupRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteAutoScalingGroupResponse;  public class DeleteAutoScalingGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAutoScalingGroupRequest req = DeleteAutoScalingGroupRequest.fromJsonString(params, DeleteAutoScalingGroupRequest.class);                          DeleteAutoScalingGroupResponse resp = client.DeleteAutoScalingGroup(req);                          System.out.println(DeleteAutoScalingGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
353,弹性伸缩,伸缩组相关接口,查询伸缩组最新一次伸缩活动,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteAutoScalingGroupRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteAutoScalingGroupResponse;  public class DeleteAutoScalingGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAutoScalingGroupRequest req = DeleteAutoScalingGroupRequest.fromJsonString(params, DeleteAutoScalingGroupRequest.class);                          DeleteAutoScalingGroupResponse resp = client.DeleteAutoScalingGroup(req);                          System.out.println(DeleteAutoScalingGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
354,弹性伸缩,伸缩组相关接口,查询伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingActivitiesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingActivitiesResponse;  public class DescribeAutoScalingActivities {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoScalingActivitiesRequest req = DescribeAutoScalingActivitiesRequest.fromJsonString(params, DescribeAutoScalingActivitiesRequest.class);                          DescribeAutoScalingActivitiesResponse resp = client.DescribeAutoScalingActivities(req);                          System.out.println(DescribeAutoScalingActivitiesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
355,弹性伸缩,伸缩组相关接口,查询实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingGroupLastActivitiesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingGroupLastActivitiesResponse;  public class DescribeAutoScalingGroupLastActivities {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoScalingGroupLastActivitiesRequest req = DescribeAutoScalingGroupLastActivitiesRequest.fromJsonString(params, DescribeAutoScalingGroupLastActivitiesRequest.class);                          DescribeAutoScalingGroupLastActivitiesResponse resp = client.DescribeAutoScalingGroupLastActivities(req);                          System.out.println(DescribeAutoScalingGroupLastActivitiesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
356,弹性伸缩,伸缩组相关接口,从伸缩组移出 CVM 实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingGroupsRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingGroupsResponse;  public class DescribeAutoScalingGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoScalingGroupsRequest req = DescribeAutoScalingGroupsRequest.fromJsonString(params, DescribeAutoScalingGroupsRequest.class);                          DescribeAutoScalingGroupsResponse resp = client.DescribeAutoScalingGroups(req);                          System.out.println(DescribeAutoScalingGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
357,弹性伸缩,伸缩组相关接口,停用伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAutoScalingInstancesResponse;  public class DescribeAutoScalingInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoScalingInstancesRequest req = DescribeAutoScalingInstancesRequest.fromJsonString(params, DescribeAutoScalingInstancesRequest.class);                          DescribeAutoScalingInstancesResponse resp = client.DescribeAutoScalingInstances(req);                          System.out.println(DescribeAutoScalingInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
358,弹性伸缩,伸缩组相关接口,启用伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DetachInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DetachInstancesResponse;  public class DetachInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DetachInstancesRequest req = DetachInstancesRequest.fromJsonString(params, DetachInstancesRequest.class);                          DetachInstancesResponse resp = client.DetachInstances(req);                          System.out.println(DetachInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
359,弹性伸缩,伸缩组相关接口,修改伸缩组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DisableAutoScalingGroupRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DisableAutoScalingGroupResponse;  public class DisableAutoScalingGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DisableAutoScalingGroupRequest req = DisableAutoScalingGroupRequest.fromJsonString(params, DisableAutoScalingGroupRequest.class);                          DisableAutoScalingGroupResponse resp = client.DisableAutoScalingGroup(req);                          System.out.println(DisableAutoScalingGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
360,弹性伸缩,伸缩组相关接口,修改期望实例数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.EnableAutoScalingGroupRequest; import com.tencentcloudapi.autoscaling.v20180419.models.EnableAutoScalingGroupResponse;  public class EnableAutoScalingGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             EnableAutoScalingGroupRequest req = EnableAutoScalingGroupRequest.fromJsonString(params, EnableAutoScalingGroupRequest.class);                          EnableAutoScalingGroupResponse resp = client.EnableAutoScalingGroup(req);                          System.out.println(EnableAutoScalingGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
361,弹性伸缩,伸缩组相关接口,修改伸缩组的负载均衡器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyAutoScalingGroupRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyAutoScalingGroupResponse;  public class ModifyAutoScalingGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoScalingGroupRequest req = ModifyAutoScalingGroupRequest.fromJsonString(params, ModifyAutoScalingGroupRequest.class);                          ModifyAutoScalingGroupResponse resp = client.ModifyAutoScalingGroup(req);                          System.out.println(ModifyAutoScalingGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
362,弹性伸缩,伸缩组相关接口,从伸缩组中删除 CVM 实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyDesiredCapacityRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyDesiredCapacityResponse;  public class ModifyDesiredCapacity {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDesiredCapacityRequest req = ModifyDesiredCapacityRequest.fromJsonString(params, ModifyDesiredCapacityRequest.class);                          ModifyDesiredCapacityResponse resp = client.ModifyDesiredCapacity(req);                          System.out.println(ModifyDesiredCapacityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
363,弹性伸缩,伸缩组相关接口,设置实例移出保护,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.RemoveInstancesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.RemoveInstancesResponse;  public class RemoveInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveInstancesRequest req = RemoveInstancesRequest.fromJsonString(params, RemoveInstancesRequest.class);                          RemoveInstancesResponse resp = client.RemoveInstances(req);                          System.out.println(RemoveInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
364,弹性伸缩,其他接口,查询用户账号的资源限制,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.SetInstancesProtectionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.SetInstancesProtectionResponse;  public class SetInstancesProtection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             SetInstancesProtectionRequest req = SetInstancesProtectionRequest.fromJsonString(params, SetInstancesProtectionRequest.class);                          SetInstancesProtectionResponse resp = client.SetInstancesProtection(req);                          System.out.println(SetInstancesProtectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
365,弹性伸缩,启动配置相关接口,创建启动配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.SetInstancesProtectionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.SetInstancesProtectionResponse;  public class SetInstancesProtection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             SetInstancesProtectionRequest req = SetInstancesProtectionRequest.fromJsonString(params, SetInstancesProtectionRequest.class);                          SetInstancesProtectionResponse resp = client.SetInstancesProtection(req);                          System.out.println(SetInstancesProtectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
366,弹性伸缩,启动配置相关接口,删除启动配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAccountLimitsRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeAccountLimitsResponse;  public class DescribeAccountLimits {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountLimitsRequest req = DescribeAccountLimitsRequest.fromJsonString(params, DescribeAccountLimitsRequest.class);                          DescribeAccountLimitsResponse resp = client.DescribeAccountLimits(req);                          System.out.println(DescribeAccountLimitsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
367,弹性伸缩,启动配置相关接口,查询启动配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateLaunchConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateLaunchConfigurationResponse;  public class CreateLaunchConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLaunchConfigurationRequest req = CreateLaunchConfigurationRequest.fromJsonString(params, CreateLaunchConfigurationRequest.class);                          CreateLaunchConfigurationResponse resp = client.CreateLaunchConfiguration(req);                          System.out.println(CreateLaunchConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
368,弹性伸缩,启动配置相关接口,修改启动配置属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLaunchConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLaunchConfigurationResponse;  public class DeleteLaunchConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLaunchConfigurationRequest req = DeleteLaunchConfigurationRequest.fromJsonString(params, DeleteLaunchConfigurationRequest.class);                          DeleteLaunchConfigurationResponse resp = client.DeleteLaunchConfiguration(req);                          System.out.println(DeleteLaunchConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
369,弹性伸缩,启动配置相关接口,升级启动配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLaunchConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLaunchConfigurationResponse;  public class DeleteLaunchConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLaunchConfigurationRequest req = DeleteLaunchConfigurationRequest.fromJsonString(params, DeleteLaunchConfigurationRequest.class);                          DeleteLaunchConfigurationResponse resp = client.DeleteLaunchConfiguration(req);                          System.out.println(DeleteLaunchConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
370,弹性伸缩,告警触发策略相关接口,创建告警触发策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLaunchConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLaunchConfigurationResponse;  public class UpgradeLaunchConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeLaunchConfigurationRequest req = UpgradeLaunchConfigurationRequest.fromJsonString(params, UpgradeLaunchConfigurationRequest.class);                          UpgradeLaunchConfigurationResponse resp = client.UpgradeLaunchConfiguration(req);                          System.out.println(UpgradeLaunchConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
371,弹性伸缩,告警触发策略相关接口,删除告警触发策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLaunchConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLaunchConfigurationResponse;  public class UpgradeLaunchConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeLaunchConfigurationRequest req = UpgradeLaunchConfigurationRequest.fromJsonString(params, UpgradeLaunchConfigurationRequest.class);                          UpgradeLaunchConfigurationResponse resp = client.UpgradeLaunchConfiguration(req);                          System.out.println(UpgradeLaunchConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
372,弹性伸缩,告警触发策略相关接口,查询告警触发策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteScalingPolicyRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteScalingPolicyResponse;  public class DeleteScalingPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteScalingPolicyRequest req = DeleteScalingPolicyRequest.fromJsonString(params, DeleteScalingPolicyRequest.class);                          DeleteScalingPolicyResponse resp = client.DeleteScalingPolicy(req);                          System.out.println(DeleteScalingPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
373,弹性伸缩,告警触发策略相关接口,触发伸缩策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteScalingPolicyRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteScalingPolicyResponse;  public class DeleteScalingPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteScalingPolicyRequest req = DeleteScalingPolicyRequest.fromJsonString(params, DeleteScalingPolicyRequest.class);                          DeleteScalingPolicyResponse resp = client.DeleteScalingPolicy(req);                          System.out.println(DeleteScalingPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
374,弹性伸缩,告警触发策略相关接口,修改告警触发策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeScalingPoliciesRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeScalingPoliciesResponse;  public class DescribeScalingPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeScalingPoliciesRequest req = DescribeScalingPoliciesRequest.fromJsonString(params, DescribeScalingPoliciesRequest.class);                          DescribeScalingPoliciesResponse resp = client.DescribeScalingPolicies(req);                          System.out.println(DescribeScalingPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
375,弹性伸缩,定时任务相关接口,创建定时任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScalingPolicyRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScalingPolicyResponse;  public class ModifyScalingPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyScalingPolicyRequest req = ModifyScalingPolicyRequest.fromJsonString(params, ModifyScalingPolicyRequest.class);                          ModifyScalingPolicyResponse resp = client.ModifyScalingPolicy(req);                          System.out.println(ModifyScalingPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
376,弹性伸缩,定时任务相关接口,删除定时任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateScheduledActionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateScheduledActionResponse;  public class CreateScheduledAction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateScheduledActionRequest req = CreateScheduledActionRequest.fromJsonString(params, CreateScheduledActionRequest.class);                          CreateScheduledActionResponse resp = client.CreateScheduledAction(req);                          System.out.println(CreateScheduledActionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
377,弹性伸缩,定时任务相关接口,查询定时任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateScheduledActionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateScheduledActionResponse;  public class CreateScheduledAction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateScheduledActionRequest req = CreateScheduledActionRequest.fromJsonString(params, CreateScheduledActionRequest.class);                          CreateScheduledActionResponse resp = client.CreateScheduledAction(req);                          System.out.println(CreateScheduledActionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
378,弹性伸缩,定时任务相关接口,修改定时任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DescribeScheduledActionsRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DescribeScheduledActionsResponse;  public class DescribeScheduledActions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeScheduledActionsRequest req = DescribeScheduledActionsRequest.fromJsonString(params, DescribeScheduledActionsRequest.class);                          DescribeScheduledActionsResponse resp = client.DescribeScheduledActions(req);                          System.out.println(DescribeScheduledActionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
379,弹性伸缩,生命周期钩子相关接口,完成生命周期动作,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScheduledActionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScheduledActionResponse;  public class ModifyScheduledAction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyScheduledActionRequest req = ModifyScheduledActionRequest.fromJsonString(params, ModifyScheduledActionRequest.class);                          ModifyScheduledActionResponse resp = client.ModifyScheduledAction(req);                          System.out.println(ModifyScheduledActionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
380,弹性伸缩,生命周期钩子相关接口,创建生命周期挂钩,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScheduledActionRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyScheduledActionResponse;  public class ModifyScheduledAction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyScheduledActionRequest req = ModifyScheduledActionRequest.fromJsonString(params, ModifyScheduledActionRequest.class);                          ModifyScheduledActionResponse resp = client.ModifyScheduledAction(req);                          System.out.println(ModifyScheduledActionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
381,弹性伸缩,生命周期钩子相关接口,删除生命周期挂钩,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateLifecycleHookRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateLifecycleHookResponse;  public class CreateLifecycleHook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLifecycleHookRequest req = CreateLifecycleHookRequest.fromJsonString(params, CreateLifecycleHookRequest.class);                          CreateLifecycleHookResponse resp = client.CreateLifecycleHook(req);                          System.out.println(CreateLifecycleHookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
382,弹性伸缩,生命周期钩子相关接口,查询生命周期挂钩,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateLifecycleHookRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateLifecycleHookResponse;  public class CreateLifecycleHook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLifecycleHookRequest req = CreateLifecycleHookRequest.fromJsonString(params, CreateLifecycleHookRequest.class);                          CreateLifecycleHookResponse resp = client.CreateLifecycleHook(req);                          System.out.println(CreateLifecycleHookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
383,弹性伸缩,生命周期钩子相关接口,升级生命周期挂钩,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLifecycleHookRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteLifecycleHookResponse;  public class DeleteLifecycleHook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLifecycleHookRequest req = DeleteLifecycleHookRequest.fromJsonString(params, DeleteLifecycleHookRequest.class);                          DeleteLifecycleHookResponse resp = client.DeleteLifecycleHook(req);                          System.out.println(DeleteLifecycleHookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
384,弹性伸缩,通知相关接口,创建通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLifecycleHookRequest; import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLifecycleHookResponse;  public class UpgradeLifecycleHook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeLifecycleHookRequest req = UpgradeLifecycleHookRequest.fromJsonString(params, UpgradeLifecycleHookRequest.class);                          UpgradeLifecycleHookResponse resp = client.UpgradeLifecycleHook(req);                          System.out.println(UpgradeLifecycleHookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
385,弹性伸缩,通知相关接口,删除通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLifecycleHookRequest; import com.tencentcloudapi.autoscaling.v20180419.models.UpgradeLifecycleHookResponse;  public class UpgradeLifecycleHook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeLifecycleHookRequest req = UpgradeLifecycleHookRequest.fromJsonString(params, UpgradeLifecycleHookRequest.class);                          UpgradeLifecycleHookResponse resp = client.UpgradeLifecycleHook(req);                          System.out.println(UpgradeLifecycleHookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
386,弹性伸缩,通知相关接口,查询通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.CreateNotificationConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.CreateNotificationConfigurationResponse;  public class CreateNotificationConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNotificationConfigurationRequest req = CreateNotificationConfigurationRequest.fromJsonString(params, CreateNotificationConfigurationRequest.class);                          CreateNotificationConfigurationResponse resp = client.CreateNotificationConfiguration(req);                          System.out.println(CreateNotificationConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
387,弹性伸缩,通知相关接口,修改通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.DeleteNotificationConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.DeleteNotificationConfigurationResponse;  public class DeleteNotificationConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""as.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNotificationConfigurationRequest req = DeleteNotificationConfigurationRequest.fromJsonString(params, DeleteNotificationConfigurationRequest.class);                          DeleteNotificationConfigurationResponse resp = client.DeleteNotificationConfiguration(req);                          System.out.println(DeleteNotificationConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
388,云函数,其他接口,获取函数代码下载地址,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyNotificationConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyNotificationConfigurationResponse;  public class ModifyNotificationConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNotificationConfigurationRequest req = ModifyNotificationConfigurationRequest.fromJsonString(params, ModifyNotificationConfigurationRequest.class);                          ModifyNotificationConfigurationResponse resp = client.ModifyNotificationConfiguration(req);                          System.out.println(ModifyNotificationConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
389,云函数,函数相关接口,复制函数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.autoscaling.v20180419.AutoscalingClient;  import com.tencentcloudapi.autoscaling.v20180419.models.ModifyNotificationConfigurationRequest; import com.tencentcloudapi.autoscaling.v20180419.models.ModifyNotificationConfigurationResponse;  public class ModifyNotificationConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AutoscalingClient client = new AutoscalingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNotificationConfigurationRequest req = ModifyNotificationConfigurationRequest.fromJsonString(params, ModifyNotificationConfigurationRequest.class);                          ModifyNotificationConfigurationResponse resp = client.ModifyNotificationConfiguration(req);                          System.out.println(ModifyNotificationConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
390,云函数,函数相关接口,创建函数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.GetFunctionAddressRequest; import com.tencentcloudapi.scf.v20180416.models.GetFunctionAddressResponse;  public class GetFunctionAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             GetFunctionAddressRequest req = GetFunctionAddressRequest.fromJsonString(params, GetFunctionAddressRequest.class);                          GetFunctionAddressResponse resp = client.GetFunctionAddress(req);                          System.out.println(GetFunctionAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
391,云函数,函数相关接口,删除函数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.GetFunctionAddressRequest; import com.tencentcloudapi.scf.v20180416.models.GetFunctionAddressResponse;  public class GetFunctionAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             GetFunctionAddressRequest req = GetFunctionAddressRequest.fromJsonString(params, GetFunctionAddressRequest.class);                          GetFunctionAddressResponse resp = client.GetFunctionAddress(req);                          System.out.println(GetFunctionAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
392,云函数,函数相关接口,获取函数详细信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.DeleteFunctionRequest; import com.tencentcloudapi.scf.v20180416.models.DeleteFunctionResponse;  public class DeleteFunction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFunctionRequest req = DeleteFunctionRequest.fromJsonString(params, DeleteFunctionRequest.class);                          DeleteFunctionResponse resp = client.DeleteFunction(req);                          System.out.println(DeleteFunctionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
393,云函数,函数相关接口,获取函数运行日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.DeleteFunctionRequest; import com.tencentcloudapi.scf.v20180416.models.DeleteFunctionResponse;  public class DeleteFunction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFunctionRequest req = DeleteFunctionRequest.fromJsonString(params, DeleteFunctionRequest.class);                          DeleteFunctionResponse resp = client.DeleteFunction(req);                          System.out.println(DeleteFunctionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
394,云函数,函数相关接口,运行函数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.GetFunctionRequest; import com.tencentcloudapi.scf.v20180416.models.GetFunctionResponse;  public class GetFunction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             GetFunctionRequest req = GetFunctionRequest.fromJsonString(params, GetFunctionRequest.class);                          GetFunctionResponse resp = client.GetFunction(req);                          System.out.println(GetFunctionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
395,云函数,函数相关接口,获取函数列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.GetFunctionLogsRequest; import com.tencentcloudapi.scf.v20180416.models.GetFunctionLogsResponse;  public class GetFunctionLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             GetFunctionLogsRequest req = GetFunctionLogsRequest.fromJsonString(params, GetFunctionLogsRequest.class);                          GetFunctionLogsResponse resp = client.GetFunctionLogs(req);                          System.out.println(GetFunctionLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
396,云函数,函数相关接口,查询函数版本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.InvokeRequest; import com.tencentcloudapi.scf.v20180416.models.InvokeResponse;  public class Invoke {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             InvokeRequest req = InvokeRequest.fromJsonString(params, InvokeRequest.class);                          InvokeResponse resp = client.Invoke(req);                          System.out.println(InvokeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
397,云函数,函数相关接口,发布新版本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.ListFunctionsRequest; import com.tencentcloudapi.scf.v20180416.models.ListFunctionsResponse;  public class ListFunctions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             ListFunctionsRequest req = ListFunctionsRequest.fromJsonString(params, ListFunctionsRequest.class);                          ListFunctionsResponse resp = client.ListFunctions(req);                          System.out.println(ListFunctionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
398,云函数,函数相关接口,更新函数代码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.ListVersionByFunctionRequest; import com.tencentcloudapi.scf.v20180416.models.ListVersionByFunctionResponse;  public class ListVersionByFunction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             ListVersionByFunctionRequest req = ListVersionByFunctionRequest.fromJsonString(params, ListVersionByFunctionRequest.class);                          ListVersionByFunctionResponse resp = client.ListVersionByFunction(req);                          System.out.println(ListVersionByFunctionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
399,云函数,函数相关接口,更新函数配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.PublishVersionRequest; import com.tencentcloudapi.scf.v20180416.models.PublishVersionResponse;  public class PublishVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             PublishVersionRequest req = PublishVersionRequest.fromJsonString(params, PublishVersionRequest.class);                          PublishVersionResponse resp = client.PublishVersion(req);                          System.out.println(PublishVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
400,云函数,命名空间相关接口,创建命名空间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.UpdateFunctionConfigurationRequest; import com.tencentcloudapi.scf.v20180416.models.UpdateFunctionConfigurationResponse;  public class UpdateFunctionConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateFunctionConfigurationRequest req = UpdateFunctionConfigurationRequest.fromJsonString(params, UpdateFunctionConfigurationRequest.class);                          UpdateFunctionConfigurationResponse resp = client.UpdateFunctionConfiguration(req);                          System.out.println(UpdateFunctionConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
401,云函数,命名空间相关接口,删除命名空间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.UpdateFunctionConfigurationRequest; import com.tencentcloudapi.scf.v20180416.models.UpdateFunctionConfigurationResponse;  public class UpdateFunctionConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateFunctionConfigurationRequest req = UpdateFunctionConfigurationRequest.fromJsonString(params, UpdateFunctionConfigurationRequest.class);                          UpdateFunctionConfigurationResponse resp = client.UpdateFunctionConfiguration(req);                          System.out.println(UpdateFunctionConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
402,云函数,命名空间相关接口,列出命名空间列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.CreateNamespaceRequest; import com.tencentcloudapi.scf.v20180416.models.CreateNamespaceResponse;  public class CreateNamespace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNamespaceRequest req = CreateNamespaceRequest.fromJsonString(params, CreateNamespaceRequest.class);                          CreateNamespaceResponse resp = client.CreateNamespace(req);                          System.out.println(CreateNamespaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
403,云函数,命名空间相关接口,更新命名空间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.DeleteNamespaceRequest; import com.tencentcloudapi.scf.v20180416.models.DeleteNamespaceResponse;  public class DeleteNamespace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNamespaceRequest req = DeleteNamespaceRequest.fromJsonString(params, DeleteNamespaceRequest.class);                          DeleteNamespaceResponse resp = client.DeleteNamespace(req);                          System.out.println(DeleteNamespaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
404,云函数,触发器相关接口,设置函数触发方式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.UpdateNamespaceRequest; import com.tencentcloudapi.scf.v20180416.models.UpdateNamespaceResponse;  public class UpdateNamespace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateNamespaceRequest req = UpdateNamespaceRequest.fromJsonString(params, UpdateNamespaceRequest.class);                          UpdateNamespaceResponse resp = client.UpdateNamespace(req);                          System.out.println(UpdateNamespaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
405,云函数,触发器相关接口,删除触发器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.UpdateNamespaceRequest; import com.tencentcloudapi.scf.v20180416.models.UpdateNamespaceResponse;  public class UpdateNamespace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateNamespaceRequest req = UpdateNamespaceRequest.fromJsonString(params, UpdateNamespaceRequest.class);                          UpdateNamespaceResponse resp = client.UpdateNamespace(req);                          System.out.println(UpdateNamespaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
406,容器实例服务,其他接口,创建容器实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.scf.v20180416.ScfClient;  import com.tencentcloudapi.scf.v20180416.models.DeleteTriggerRequest; import com.tencentcloudapi.scf.v20180416.models.DeleteTriggerResponse;  public class DeleteTrigger {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""scf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ScfClient client = new ScfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTriggerRequest req = DeleteTriggerRequest.fromJsonString(params, DeleteTriggerRequest.class);                          DeleteTriggerResponse resp = client.DeleteTrigger(req);                          System.out.println(DeleteTriggerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
407,容器实例服务,其他接口,删除容器实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.CreateContainerInstanceRequest; import com.tencentcloudapi.cis.v20180408.models.CreateContainerInstanceResponse;  public class CreateContainerInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             CreateContainerInstanceRequest req = CreateContainerInstanceRequest.fromJsonString(params, CreateContainerInstanceRequest.class);                          CreateContainerInstanceResponse resp = client.CreateContainerInstance(req);                          System.out.println(CreateContainerInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
408,容器实例服务,其他接口,获取容器实例信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.DeleteContainerInstanceRequest; import com.tencentcloudapi.cis.v20180408.models.DeleteContainerInstanceResponse;  public class DeleteContainerInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteContainerInstanceRequest req = DeleteContainerInstanceRequest.fromJsonString(params, DeleteContainerInstanceRequest.class);                          DeleteContainerInstanceResponse resp = client.DeleteContainerInstance(req);                          System.out.println(DeleteContainerInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
409,容器实例服务,其他接口,查询容器实例事件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceRequest; import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceResponse;  public class DescribeContainerInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeContainerInstanceRequest req = DescribeContainerInstanceRequest.fromJsonString(params, DescribeContainerInstanceRequest.class);                          DescribeContainerInstanceResponse resp = client.DescribeContainerInstance(req);                          System.out.println(DescribeContainerInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
410,容器实例服务,其他接口,查询容器实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceRequest; import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceResponse;  public class DescribeContainerInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeContainerInstanceRequest req = DescribeContainerInstanceRequest.fromJsonString(params, DescribeContainerInstanceRequest.class);                          DescribeContainerInstanceResponse resp = client.DescribeContainerInstance(req);                          System.out.println(DescribeContainerInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
411,容器实例服务,其他接口,获取容器日志信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceRequest; import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstanceResponse;  public class DescribeContainerInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeContainerInstanceRequest req = DescribeContainerInstanceRequest.fromJsonString(params, DescribeContainerInstanceRequest.class);                          DescribeContainerInstanceResponse resp = client.DescribeContainerInstance(req);                          System.out.println(DescribeContainerInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
412,容器实例服务,其他接口,创建容器实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstancesRequest; import com.tencentcloudapi.cis.v20180408.models.DescribeContainerInstancesResponse;  public class DescribeContainerInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeContainerInstancesRequest req = DescribeContainerInstancesRequest.fromJsonString(params, DescribeContainerInstancesRequest.class);                          DescribeContainerInstancesResponse resp = client.DescribeContainerInstances(req);                          System.out.println(DescribeContainerInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
413,负载均衡,传统型负载均衡相关接口,解绑传统型负载均衡的后端服务器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisRequest; import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisResponse;  public class InquiryPriceCreateCis {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateCisRequest req = InquiryPriceCreateCisRequest.fromJsonString(params, InquiryPriceCreateCisRequest.class);                          InquiryPriceCreateCisResponse resp = client.InquiryPriceCreateCis(req);                          System.out.println(InquiryPriceCreateCisRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
414,负载均衡,传统型负载均衡相关接口,通过后端主机反向查找其绑定的传统型负载均衡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisRequest; import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisResponse;  public class InquiryPriceCreateCis {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateCisRequest req = InquiryPriceCreateCisRequest.fromJsonString(params, InquiryPriceCreateCisRequest.class);                          InquiryPriceCreateCisResponse resp = client.InquiryPriceCreateCis(req);                          System.out.println(InquiryPriceCreateCisRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
415,负载均衡,传统型负载均衡相关接口,获取传统型负载均衡后端的健康状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cis.v20180408.CisClient;  import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisRequest; import com.tencentcloudapi.cis.v20180408.models.InquiryPriceCreateCisResponse;  public class InquiryPriceCreateCis {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CisClient client = new CisClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateCisRequest req = InquiryPriceCreateCisRequest.fromJsonString(params, InquiryPriceCreateCisRequest.class);                          InquiryPriceCreateCisResponse resp = client.InquiryPriceCreateCis(req);                          System.out.println(InquiryPriceCreateCisRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
416,负载均衡,传统型负载均衡相关接口,获取传统型负载均衡监听器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeregisterTargetsFromClassicalLBRequest; import com.tencentcloudapi.clb.v20180317.models.DeregisterTargetsFromClassicalLBResponse;  public class DeregisterTargetsFromClassicalLB {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeregisterTargetsFromClassicalLBRequest req = DeregisterTargetsFromClassicalLBRequest.fromJsonString(params, DeregisterTargetsFromClassicalLBRequest.class);                          DeregisterTargetsFromClassicalLBResponse resp = client.DeregisterTargetsFromClassicalLB(req);                          System.out.println(DeregisterTargetsFromClassicalLBRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
417,负载均衡,传统型负载均衡相关接口,获取传统型负载均衡绑定的后端服务器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeClassicalLBHealthStatusRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeClassicalLBHealthStatusResponse;  public class DescribeClassicalLBHealthStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClassicalLBHealthStatusRequest req = DescribeClassicalLBHealthStatusRequest.fromJsonString(params, DescribeClassicalLBHealthStatusRequest.class);                          DescribeClassicalLBHealthStatusResponse resp = client.DescribeClassicalLBHealthStatus(req);                          System.out.println(DescribeClassicalLBHealthStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
418,负载均衡,传统型负载均衡相关接口,绑定后端服务到传统型负载均衡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeClassicalLBListenersRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeClassicalLBListenersResponse;  public class DescribeClassicalLBListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClassicalLBListenersRequest req = DescribeClassicalLBListenersRequest.fromJsonString(params, DescribeClassicalLBListenersRequest.class);                          DescribeClassicalLBListenersResponse resp = client.DescribeClassicalLBListeners(req);                          System.out.println(DescribeClassicalLBListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
419,负载均衡,其他接口,替换负载均衡实例所关联的证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsWithClassicalLBRequest; import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsWithClassicalLBResponse;  public class RegisterTargetsWithClassicalLB {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterTargetsWithClassicalLBRequest req = RegisterTargetsWithClassicalLBRequest.fromJsonString(params, RegisterTargetsWithClassicalLBRequest.class);                          RegisterTargetsWithClassicalLBResponse resp = client.RegisterTargetsWithClassicalLB(req);                          System.out.println(RegisterTargetsWithClassicalLBRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
420,负载均衡,其他接口,设置负载均衡实例的安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsWithClassicalLBRequest; import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsWithClassicalLBResponse;  public class RegisterTargetsWithClassicalLB {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterTargetsWithClassicalLBRequest req = RegisterTargetsWithClassicalLBRequest.fromJsonString(params, RegisterTargetsWithClassicalLBRequest.class);                          RegisterTargetsWithClassicalLBResponse resp = client.RegisterTargetsWithClassicalLB(req);                          System.out.println(RegisterTargetsWithClassicalLBRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
421,负载均衡,其他接口,绑定或解绑一个安全组到多个负载均衡实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ReplaceCertForLoadBalancersRequest; import com.tencentcloudapi.clb.v20180317.models.ReplaceCertForLoadBalancersResponse;  public class ReplaceCertForLoadBalancers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceCertForLoadBalancersRequest req = ReplaceCertForLoadBalancersRequest.fromJsonString(params, ReplaceCertForLoadBalancersRequest.class);                          ReplaceCertForLoadBalancersResponse resp = client.ReplaceCertForLoadBalancers(req);                          System.out.println(ReplaceCertForLoadBalancersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
422,负载均衡,负载均衡相关接口,自动生成负载均衡转发规则的重定向关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.SetSecurityGroupForLoadbalancersRequest; import com.tencentcloudapi.clb.v20180317.models.SetSecurityGroupForLoadbalancersResponse;  public class SetSecurityGroupForLoadbalancers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             SetSecurityGroupForLoadbalancersRequest req = SetSecurityGroupForLoadbalancersRequest.fromJsonString(params, SetSecurityGroupForLoadbalancersRequest.class);                          SetSecurityGroupForLoadbalancersResponse resp = client.SetSecurityGroupForLoadbalancers(req);                          System.out.println(SetSecurityGroupForLoadbalancersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
423,负载均衡,负载均衡相关接口,批量解绑四七层后端服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.SetSecurityGroupForLoadbalancersRequest; import com.tencentcloudapi.clb.v20180317.models.SetSecurityGroupForLoadbalancersResponse;  public class SetSecurityGroupForLoadbalancers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             SetSecurityGroupForLoadbalancersRequest req = SetSecurityGroupForLoadbalancersRequest.fromJsonString(params, SetSecurityGroupForLoadbalancersRequest.class);                          SetSecurityGroupForLoadbalancersResponse resp = client.SetSecurityGroupForLoadbalancers(req);                          System.out.println(SetSecurityGroupForLoadbalancersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
424,负载均衡,负载均衡相关接口,批量修改监听器绑定的后端机器的转发权重,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.AutoRewriteRequest; import com.tencentcloudapi.clb.v20180317.models.AutoRewriteResponse;  public class AutoRewrite {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             AutoRewriteRequest req = AutoRewriteRequest.fromJsonString(params, AutoRewriteRequest.class);                          AutoRewriteResponse resp = client.AutoRewrite(req);                          System.out.println(AutoRewriteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
425,负载均衡,负载均衡相关接口,批量绑定虚拟主机或弹性网卡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.BatchModifyTargetWeightRequest; import com.tencentcloudapi.clb.v20180317.models.BatchModifyTargetWeightResponse;  public class BatchModifyTargetWeight {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             BatchModifyTargetWeightRequest req = BatchModifyTargetWeightRequest.fromJsonString(params, BatchModifyTargetWeightRequest.class);                          BatchModifyTargetWeightResponse resp = client.BatchModifyTargetWeight(req);                          System.out.println(BatchModifyTargetWeightRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
426,负载均衡,负载均衡相关接口,创建负载均衡监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.BatchModifyTargetWeightRequest; import com.tencentcloudapi.clb.v20180317.models.BatchModifyTargetWeightResponse;  public class BatchModifyTargetWeight {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             BatchModifyTargetWeightRequest req = BatchModifyTargetWeightRequest.fromJsonString(params, BatchModifyTargetWeightRequest.class);                          BatchModifyTargetWeightResponse resp = client.BatchModifyTargetWeight(req);                          System.out.println(BatchModifyTargetWeightRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
427,负载均衡,负载均衡相关接口,购买负载均衡实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.BatchRegisterTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.BatchRegisterTargetsResponse;  public class BatchRegisterTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             BatchRegisterTargetsRequest req = BatchRegisterTargetsRequest.fromJsonString(params, BatchRegisterTargetsRequest.class);                          BatchRegisterTargetsResponse resp = client.BatchRegisterTargets(req);                          System.out.println(BatchRegisterTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
428,负载均衡,负载均衡相关接口,创建负载均衡七层监听器转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.CreateListenerRequest; import com.tencentcloudapi.clb.v20180317.models.CreateListenerResponse;  public class CreateListener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateListenerRequest req = CreateListenerRequest.fromJsonString(params, CreateListenerRequest.class);                          CreateListenerResponse resp = client.CreateListener(req);                          System.out.println(CreateListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
429,负载均衡,负载均衡相关接口,删除负载均衡监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.CreateLoadBalancerRequest; import com.tencentcloudapi.clb.v20180317.models.CreateLoadBalancerResponse;  public class CreateLoadBalancer {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLoadBalancerRequest req = CreateLoadBalancerRequest.fromJsonString(params, CreateLoadBalancerRequest.class);                          CreateLoadBalancerResponse resp = client.CreateLoadBalancer(req);                          System.out.println(CreateLoadBalancerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
430,负载均衡,负载均衡相关接口,删除负载均衡实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.CreateRuleRequest; import com.tencentcloudapi.clb.v20180317.models.CreateRuleResponse;  public class CreateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRuleRequest req = CreateRuleRequest.fromJsonString(params, CreateRuleRequest.class);                          CreateRuleResponse resp = client.CreateRule(req);                          System.out.println(CreateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
431,负载均衡,负载均衡相关接口,删除负载均衡转发规则之间的重定向关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeleteLoadBalancerRequest; import com.tencentcloudapi.clb.v20180317.models.DeleteLoadBalancerResponse;  public class DeleteLoadBalancer {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLoadBalancerRequest req = DeleteLoadBalancerRequest.fromJsonString(params, DeleteLoadBalancerRequest.class);                          DeleteLoadBalancerResponse resp = client.DeleteLoadBalancer(req);                          System.out.println(DeleteLoadBalancerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
432,负载均衡,负载均衡相关接口,删除负载均衡七层监听器的转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeleteLoadBalancerRequest; import com.tencentcloudapi.clb.v20180317.models.DeleteLoadBalancerResponse;  public class DeleteLoadBalancer {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLoadBalancerRequest req = DeleteLoadBalancerRequest.fromJsonString(params, DeleteLoadBalancerRequest.class);                          DeleteLoadBalancerResponse resp = client.DeleteLoadBalancer(req);                          System.out.println(DeleteLoadBalancerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
433,负载均衡,负载均衡相关接口,从负载均衡监听器上解绑后端服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeleteRewriteRequest; import com.tencentcloudapi.clb.v20180317.models.DeleteRewriteResponse;  public class DeleteRewrite {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRewriteRequest req = DeleteRewriteRequest.fromJsonString(params, DeleteRewriteRequest.class);                          DeleteRewriteResponse resp = client.DeleteRewrite(req);                          System.out.println(DeleteRewriteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
434,负载均衡,负载均衡相关接口,查询负载均衡的监听器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeleteRuleRequest; import com.tencentcloudapi.clb.v20180317.models.DeleteRuleResponse;  public class DeleteRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRuleRequest req = DeleteRuleRequest.fromJsonString(params, DeleteRuleRequest.class);                          DeleteRuleResponse resp = client.DeleteRule(req);                          System.out.println(DeleteRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
435,负载均衡,负载均衡相关接口,查询负载均衡实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DeregisterTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.DeregisterTargetsResponse;  public class DeregisterTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DeregisterTargetsRequest req = DeregisterTargetsRequest.fromJsonString(params, DeregisterTargetsRequest.class);                          DeregisterTargetsResponse resp = client.DeregisterTargets(req);                          System.out.println(DeregisterTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
436,负载均衡,负载均衡相关接口,查询负载均衡转发规则的重定向关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeListenersRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeListenersResponse;  public class DescribeListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeListenersRequest req = DescribeListenersRequest.fromJsonString(params, DescribeListenersRequest.class);                          DescribeListenersResponse resp = client.DescribeListeners(req);                          System.out.println(DescribeListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
437,负载均衡,负载均衡相关接口,获取负载均衡后端服务的健康检查状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeLoadBalancersRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeLoadBalancersResponse;  public class DescribeLoadBalancers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoadBalancersRequest req = DescribeLoadBalancersRequest.fromJsonString(params, DescribeLoadBalancersRequest.class);                          DescribeLoadBalancersResponse resp = client.DescribeLoadBalancers(req);                          System.out.println(DescribeLoadBalancersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
438,负载均衡,负载均衡相关接口,查询负载均衡绑定的后端服务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeRewriteRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeRewriteResponse;  public class DescribeRewrite {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRewriteRequest req = DescribeRewriteRequest.fromJsonString(params, DescribeRewriteRequest.class);                          DescribeRewriteResponse resp = client.DescribeRewrite(req);                          System.out.println(DescribeRewriteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
439,负载均衡,负载均衡相关接口,查询异步任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeTargetHealthRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeTargetHealthResponse;  public class DescribeTargetHealth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTargetHealthRequest req = DescribeTargetHealthRequest.fromJsonString(params, DescribeTargetHealthRequest.class);                          DescribeTargetHealthResponse resp = client.DescribeTargetHealth(req);                          System.out.println(DescribeTargetHealthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
440,负载均衡,负载均衡相关接口,手动添加负载均衡转发规则的重定向关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeTargetsResponse;  public class DescribeTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTargetsRequest req = DescribeTargetsRequest.fromJsonString(params, DescribeTargetsRequest.class);                          DescribeTargetsResponse resp = client.DescribeTargets(req);                          System.out.println(DescribeTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
441,负载均衡,负载均衡相关接口,修改七层转发规则的域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.DescribeTaskStatusRequest; import com.tencentcloudapi.clb.v20180317.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
442,负载均衡,负载均衡相关接口,修改负载均衡七层监听器转发规则的域名级别属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ManualRewriteRequest; import com.tencentcloudapi.clb.v20180317.models.ManualRewriteResponse;  public class ManualRewrite {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ManualRewriteRequest req = ManualRewriteRequest.fromJsonString(params, ManualRewriteRequest.class);                          ManualRewriteResponse resp = client.ManualRewrite(req);                          System.out.println(ManualRewriteRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
443,负载均衡,负载均衡相关接口,修改负载均衡监听器属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyDomainAttributesRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyDomainAttributesResponse;  public class ModifyDomainAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDomainAttributesRequest req = ModifyDomainAttributesRequest.fromJsonString(params, ModifyDomainAttributesRequest.class);                          ModifyDomainAttributesResponse resp = client.ModifyDomainAttributes(req);                          System.out.println(ModifyDomainAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
444,负载均衡,负载均衡相关接口,修改负载均衡实例的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyListenerRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyListenerResponse;  public class ModifyListener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyListenerRequest req = ModifyListenerRequest.fromJsonString(params, ModifyListenerRequest.class);                          ModifyListenerResponse resp = client.ModifyListener(req);                          System.out.println(ModifyListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
445,负载均衡,负载均衡相关接口,修改负载均衡七层监听器的转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyListenerRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyListenerResponse;  public class ModifyListener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyListenerRequest req = ModifyListenerRequest.fromJsonString(params, ModifyListenerRequest.class);                          ModifyListenerResponse resp = client.ModifyListener(req);                          System.out.println(ModifyListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
446,负载均衡,负载均衡相关接口,修改监听器绑定的后端机器的端口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyLoadBalancerAttributesRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyLoadBalancerAttributesResponse;  public class ModifyLoadBalancerAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLoadBalancerAttributesRequest req = ModifyLoadBalancerAttributesRequest.fromJsonString(params, ModifyLoadBalancerAttributesRequest.class);                          ModifyLoadBalancerAttributesResponse resp = client.ModifyLoadBalancerAttributes(req);                          System.out.println(ModifyLoadBalancerAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
447,负载均衡,负载均衡相关接口,修改监听器绑定的后端机器的转发权重,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyRuleRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyRuleResponse;  public class ModifyRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyRuleRequest req = ModifyRuleRequest.fromJsonString(params, ModifyRuleRequest.class);                          ModifyRuleResponse resp = client.ModifyRule(req);                          System.out.println(ModifyRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
448,负载均衡,负载均衡相关接口,绑定后端机器到监听器上,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.ModifyTargetPortRequest; import com.tencentcloudapi.clb.v20180317.models.ModifyTargetPortResponse;  public class ModifyTargetPort {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTargetPortRequest req = ModifyTargetPortRequest.fromJsonString(params, ModifyTargetPortRequest.class);                          ModifyTargetPortResponse resp = client.ModifyTargetPort(req);                          System.out.println(ModifyTargetPortRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
449,私有网络,IPV6转换服务相关接口,添加IPV6转换规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsResponse;  public class RegisterTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterTargetsRequest req = RegisterTargetsRequest.fromJsonString(params, RegisterTargetsRequest.class);                          RegisterTargetsResponse resp = client.RegisterTargets(req);                          System.out.println(RegisterTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
450,私有网络,IPV6转换服务相关接口,创建IPV6转换IPV4实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsResponse;  public class RegisterTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterTargetsRequest req = RegisterTargetsRequest.fromJsonString(params, RegisterTargetsRequest.class);                          RegisterTargetsResponse resp = client.RegisterTargets(req);                          System.out.println(RegisterTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
451,私有网络,IPV6转换服务相关接口,释放IPV6转换实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.clb.v20180317.ClbClient;  import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsRequest; import com.tencentcloudapi.clb.v20180317.models.RegisterTargetsResponse;  public class RegisterTargets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""clb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ClbClient client = new ClbClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterTargetsRequest req = RegisterTargetsRequest.fromJsonString(params, RegisterTargetsRequest.class);                          RegisterTargetsResponse resp = client.RegisterTargets(req);                          System.out.println(RegisterTargetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
452,私有网络,IPV6转换服务相关接口,查询账户在指定地域IPV6转换实例和规则的配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateIp6TranslatorsRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateIp6TranslatorsResponse;  public class CreateIp6Translators {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateIp6TranslatorsRequest req = CreateIp6TranslatorsRequest.fromJsonString(params, CreateIp6TranslatorsRequest.class);                          CreateIp6TranslatorsResponse resp = client.CreateIp6Translators(req);                          System.out.println(CreateIp6TranslatorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
453,私有网络,IPV6转换服务相关接口,查询IPV6转换实例及其绑定规则信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteIp6TranslatorsRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteIp6TranslatorsResponse;  public class DeleteIp6Translators {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteIp6TranslatorsRequest req = DeleteIp6TranslatorsRequest.fromJsonString(params, DeleteIp6TranslatorsRequest.class);                          DeleteIp6TranslatorsResponse resp = client.DeleteIp6Translators(req);                          System.out.println(DeleteIp6TranslatorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
454,私有网络,IPV6转换服务相关接口,修改IPV6转换规则属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeIp6TranslatorQuotaRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeIp6TranslatorQuotaResponse;  public class DescribeIp6TranslatorQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIp6TranslatorQuotaRequest req = DescribeIp6TranslatorQuotaRequest.fromJsonString(params, DescribeIp6TranslatorQuotaRequest.class);                          DescribeIp6TranslatorQuotaResponse resp = client.DescribeIp6TranslatorQuota(req);                          System.out.println(DescribeIp6TranslatorQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
455,私有网络,IPV6转换服务相关接口,修改IP6转换实例属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeIp6TranslatorsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeIp6TranslatorsResponse;  public class DescribeIp6Translators {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIp6TranslatorsRequest req = DescribeIp6TranslatorsRequest.fromJsonString(params, DescribeIp6TranslatorsRequest.class);                          DescribeIp6TranslatorsResponse resp = client.DescribeIp6Translators(req);                          System.out.println(DescribeIp6TranslatorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
456,私有网络,IPV6转换服务相关接口,删除IPV6转换规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyIp6RuleRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyIp6RuleResponse;  public class ModifyIp6Rule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyIp6RuleRequest req = ModifyIp6RuleRequest.fromJsonString(params, ModifyIp6RuleRequest.class);                          ModifyIp6RuleResponse resp = client.ModifyIp6Rule(req);                          System.out.println(ModifyIp6RuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
457,私有网络,NAT网关相关接口,NAT网关绑定弹性IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RemoveIp6RulesRequest; import com.tencentcloudapi.vpc.v20170312.models.RemoveIp6RulesResponse;  public class RemoveIp6Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveIp6RulesRequest req = RemoveIp6RulesRequest.fromJsonString(params, RemoveIp6RulesRequest.class);                          RemoveIp6RulesResponse resp = client.RemoveIp6Rules(req);                          System.out.println(RemoveIp6RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
458,私有网络,NAT网关相关接口,创建NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RemoveIp6RulesRequest; import com.tencentcloudapi.vpc.v20170312.models.RemoveIp6RulesResponse;  public class RemoveIp6Rules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveIp6RulesRequest req = RemoveIp6RulesRequest.fromJsonString(params, RemoveIp6RulesRequest.class);                          RemoveIp6RulesResponse resp = client.RemoveIp6Rules(req);                          System.out.println(RemoveIp6RulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
459,私有网络,NAT网关相关接口,创建NAT网关端口转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayResponse;  public class CreateNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNatGatewayRequest req = CreateNatGatewayRequest.fromJsonString(params, CreateNatGatewayRequest.class);                          CreateNatGatewayResponse resp = client.CreateNatGateway(req);                          System.out.println(CreateNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
460,私有网络,NAT网关相关接口,删除NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayResponse;  public class CreateNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNatGatewayRequest req = CreateNatGatewayRequest.fromJsonString(params, CreateNatGatewayRequest.class);                          CreateNatGatewayResponse resp = client.CreateNatGateway(req);                          System.out.println(CreateNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
461,私有网络,NAT网关相关接口,删除NAT网关端口转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayDestinationIpPortTranslationNatRuleRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNatGatewayDestinationIpPortTranslationNatRuleResponse;  public class CreateNatGatewayDestinationIpPortTranslationNatRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNatGatewayDestinationIpPortTranslationNatRuleRequest req = CreateNatGatewayDestinationIpPortTranslationNatRuleRequest.fromJsonString(params, CreateNatGatewayDestinationIpPortTranslationNatRuleRequest.class);                          CreateNatGatewayDestinationIpPortTranslationNatRuleResponse resp = client.CreateNatGatewayDestinationIpPortTranslationNatRule(req);                          System.out.println(CreateNatGatewayDestinationIpPortTranslationNatRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
462,私有网络,NAT网关相关接口,查询NAT网关端口转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteNatGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteNatGatewayResponse;  public class DeleteNatGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNatGatewayRequest req = DeleteNatGatewayRequest.fromJsonString(params, DeleteNatGatewayRequest.class);                          DeleteNatGatewayResponse resp = client.DeleteNatGateway(req);                          System.out.println(DeleteNatGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
463,私有网络,NAT网关相关接口,查询NAT网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteNatGatewayDestinationIpPortTranslationNatRuleRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteNatGatewayDestinationIpPortTranslationNatRuleResponse;  public class DeleteNatGatewayDestinationIpPortTranslationNatRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNatGatewayDestinationIpPortTranslationNatRuleRequest req = DeleteNatGatewayDestinationIpPortTranslationNatRuleRequest.fromJsonString(params, DeleteNatGatewayDestinationIpPortTranslationNatRuleRequest.class);                          DeleteNatGatewayDestinationIpPortTranslationNatRuleResponse resp = client.DeleteNatGatewayDestinationIpPortTranslationNatRule(req);                          System.out.println(DeleteNatGatewayDestinationIpPortTranslationNatRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
464,私有网络,NAT网关相关接口,NAT网关解绑弹性IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeNatGatewayDestinationIpPortTranslationNatRulesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeNatGatewayDestinationIpPortTranslationNatRulesResponse;  public class DescribeNatGatewayDestinationIpPortTranslationNatRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNatGatewayDestinationIpPortTranslationNatRulesRequest req = DescribeNatGatewayDestinationIpPortTranslationNatRulesRequest.fromJsonString(params, DescribeNatGatewayDestinationIpPortTranslationNatRulesRequest.class);                          DescribeNatGatewayDestinationIpPortTranslationNatRulesResponse resp = client.DescribeNatGatewayDestinationIpPortTranslationNatRules(req);                          System.out.println(DescribeNatGatewayDestinationIpPortTranslationNatRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
465,私有网络,NAT网关相关接口,修改NAT网关的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeNatGatewaysRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeNatGatewaysResponse;  public class DescribeNatGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNatGatewaysRequest req = DescribeNatGatewaysRequest.fromJsonString(params, DescribeNatGatewaysRequest.class);                          DescribeNatGatewaysResponse resp = client.DescribeNatGateways(req);                          System.out.println(DescribeNatGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
466,私有网络,NAT网关相关接口,修改NAT网关端口转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DisassociateNatGatewayAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.DisassociateNatGatewayAddressResponse;  public class DisassociateNatGatewayAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateNatGatewayAddressRequest req = DisassociateNatGatewayAddressRequest.fromJsonString(params, DisassociateNatGatewayAddressRequest.class);                          DisassociateNatGatewayAddressResponse resp = client.DisassociateNatGatewayAddress(req);                          System.out.println(DisassociateNatGatewayAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
467,私有网络,NAT网关相关接口,调整NAT网关并发连接上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyNatGatewayAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyNatGatewayAttributeResponse;  public class ModifyNatGatewayAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNatGatewayAttributeRequest req = ModifyNatGatewayAttributeRequest.fromJsonString(params, ModifyNatGatewayAttributeRequest.class);                          ModifyNatGatewayAttributeResponse resp = client.ModifyNatGatewayAttribute(req);                          System.out.println(ModifyNatGatewayAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
468,私有网络,VPN网关相关接口,创建对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetNatGatewayConnectionRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetNatGatewayConnectionResponse;  public class ResetNatGatewayConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetNatGatewayConnectionRequest req = ResetNatGatewayConnectionRequest.fromJsonString(params, ResetNatGatewayConnectionRequest.class);                          ResetNatGatewayConnectionResponse resp = client.ResetNatGatewayConnection(req);                          System.out.println(ResetNatGatewayConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
469,私有网络,VPN网关相关接口,创建VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetNatGatewayConnectionRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetNatGatewayConnectionResponse;  public class ResetNatGatewayConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetNatGatewayConnectionRequest req = ResetNatGatewayConnectionRequest.fromJsonString(params, ResetNatGatewayConnectionRequest.class);                          ResetNatGatewayConnectionResponse resp = client.ResetNatGatewayConnection(req);                          System.out.println(ResetNatGatewayConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
470,私有网络,VPN网关相关接口,创建VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateCustomerGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateCustomerGatewayResponse;  public class CreateCustomerGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCustomerGatewayRequest req = CreateCustomerGatewayRequest.fromJsonString(params, CreateCustomerGatewayRequest.class);                          CreateCustomerGatewayResponse resp = client.CreateCustomerGateway(req);                          System.out.println(CreateCustomerGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
471,私有网络,VPN网关相关接口,删除对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateVpnConnectionRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateVpnConnectionResponse;  public class CreateVpnConnection {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVpnConnectionRequest req = CreateVpnConnectionRequest.fromJsonString(params, CreateVpnConnectionRequest.class);                          CreateVpnConnectionResponse resp = client.CreateVpnConnection(req);                          System.out.println(CreateVpnConnectionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
472,私有网络,VPN网关相关接口,删除VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateVpnGatewayResponse;  public class CreateVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVpnGatewayRequest req = CreateVpnGatewayRequest.fromJsonString(params, CreateVpnGatewayRequest.class);                          CreateVpnGatewayResponse resp = client.CreateVpnGateway(req);                          System.out.println(CreateVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
473,私有网络,VPN网关相关接口,删除VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateVpnGatewayResponse;  public class CreateVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVpnGatewayRequest req = CreateVpnGatewayRequest.fromJsonString(params, CreateVpnGatewayRequest.class);                          CreateVpnGatewayResponse resp = client.CreateVpnGateway(req);                          System.out.println(CreateVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
474,私有网络,VPN网关相关接口,查询对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteVpnGatewayResponse;  public class DeleteVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpnGatewayRequest req = DeleteVpnGatewayRequest.fromJsonString(params, DeleteVpnGatewayRequest.class);                          DeleteVpnGatewayResponse resp = client.DeleteVpnGateway(req);                          System.out.println(DeleteVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
475,私有网络,VPN网关相关接口,查询可支持的对端网关厂商信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewaysRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewaysResponse;  public class DescribeCustomerGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCustomerGatewaysRequest req = DescribeCustomerGatewaysRequest.fromJsonString(params, DescribeCustomerGatewaysRequest.class);                          DescribeCustomerGatewaysResponse resp = client.DescribeCustomerGateways(req);                          System.out.println(DescribeCustomerGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
476,私有网络,VPN网关相关接口,查询VPN通道列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewaysRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewaysResponse;  public class DescribeCustomerGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCustomerGatewaysRequest req = DescribeCustomerGatewaysRequest.fromJsonString(params, DescribeCustomerGatewaysRequest.class);                          DescribeCustomerGatewaysResponse resp = client.DescribeCustomerGateways(req);                          System.out.println(DescribeCustomerGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
477,私有网络,VPN网关相关接口,查询VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewayVendorsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCustomerGatewayVendorsResponse;  public class DescribeCustomerGatewayVendors {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCustomerGatewayVendorsRequest req = DescribeCustomerGatewayVendorsRequest.fromJsonString(params, DescribeCustomerGatewayVendorsRequest.class);                          DescribeCustomerGatewayVendorsResponse resp = client.DescribeCustomerGatewayVendors(req);                          System.out.println(DescribeCustomerGatewayVendorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
478,私有网络,VPN网关相关接口,下载VPN通道配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeVpnConnectionsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeVpnConnectionsResponse;  public class DescribeVpnConnections {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpnConnectionsRequest req = DescribeVpnConnectionsRequest.fromJsonString(params, DescribeVpnConnectionsRequest.class);                          DescribeVpnConnectionsResponse resp = client.DescribeVpnConnections(req);                          System.out.println(DescribeVpnConnectionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
479,私有网络,VPN网关相关接口,创建VPN网关询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeVpnGatewaysRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeVpnGatewaysResponse;  public class DescribeVpnGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpnGatewaysRequest req = DescribeVpnGatewaysRequest.fromJsonString(params, DescribeVpnGatewaysRequest.class);                          DescribeVpnGatewaysResponse resp = client.DescribeVpnGateways(req);                          System.out.println(DescribeVpnGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
480,私有网络,VPN网关相关接口,续费VPN网关询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DownloadCustomerGatewayConfigurationRequest; import com.tencentcloudapi.vpc.v20170312.models.DownloadCustomerGatewayConfigurationResponse;  public class DownloadCustomerGatewayConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadCustomerGatewayConfigurationRequest req = DownloadCustomerGatewayConfigurationRequest.fromJsonString(params, DownloadCustomerGatewayConfigurationRequest.class);                          DownloadCustomerGatewayConfigurationResponse resp = client.DownloadCustomerGatewayConfiguration(req);                          System.out.println(DownloadCustomerGatewayConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
481,私有网络,VPN网关相关接口,调整VPN网关带宽上限询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceCreateVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceCreateVpnGatewayResponse;  public class InquiryPriceCreateVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateVpnGatewayRequest req = InquiryPriceCreateVpnGatewayRequest.fromJsonString(params, InquiryPriceCreateVpnGatewayRequest.class);                          InquiryPriceCreateVpnGatewayResponse resp = client.InquiryPriceCreateVpnGateway(req);                          System.out.println(InquiryPriceCreateVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
482,私有网络,VPN网关相关接口,修改对端网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceRenewVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceRenewVpnGatewayResponse;  public class InquiryPriceRenewVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewVpnGatewayRequest req = InquiryPriceRenewVpnGatewayRequest.fromJsonString(params, InquiryPriceRenewVpnGatewayRequest.class);                          InquiryPriceRenewVpnGatewayResponse resp = client.InquiryPriceRenewVpnGateway(req);                          System.out.println(InquiryPriceRenewVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
483,私有网络,VPN网关相关接口,修改VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceRenewVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.InquiryPriceRenewVpnGatewayResponse;  public class InquiryPriceRenewVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewVpnGatewayRequest req = InquiryPriceRenewVpnGatewayRequest.fromJsonString(params, InquiryPriceRenewVpnGatewayRequest.class);                          InquiryPriceRenewVpnGatewayResponse resp = client.InquiryPriceRenewVpnGateway(req);                          System.out.println(InquiryPriceRenewVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
484,私有网络,VPN网关相关接口,修改VPN网关属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyCustomerGatewayAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyCustomerGatewayAttributeResponse;  public class ModifyCustomerGatewayAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCustomerGatewayAttributeRequest req = ModifyCustomerGatewayAttributeRequest.fromJsonString(params, ModifyCustomerGatewayAttributeRequest.class);                          ModifyCustomerGatewayAttributeResponse resp = client.ModifyCustomerGatewayAttribute(req);                          System.out.println(ModifyCustomerGatewayAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
485,私有网络,VPN网关相关接口,续费VPN网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyVpnConnectionAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyVpnConnectionAttributeResponse;  public class ModifyVpnConnectionAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyVpnConnectionAttributeRequest req = ModifyVpnConnectionAttributeRequest.fromJsonString(params, ModifyVpnConnectionAttributeRequest.class);                          ModifyVpnConnectionAttributeResponse resp = client.ModifyVpnConnectionAttribute(req);                          System.out.println(ModifyVpnConnectionAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
486,私有网络,VPN网关相关接口,重置VPN通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyVpnGatewayAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyVpnGatewayAttributeResponse;  public class ModifyVpnGatewayAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyVpnGatewayAttributeRequest req = ModifyVpnGatewayAttributeRequest.fromJsonString(params, ModifyVpnGatewayAttributeRequest.class);                          ModifyVpnGatewayAttributeResponse resp = client.ModifyVpnGatewayAttribute(req);                          System.out.println(ModifyVpnGatewayAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
487,私有网络,VPN网关相关接口,调整VPN网关带宽上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RenewVpnGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.RenewVpnGatewayResponse;  public class RenewVpnGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RenewVpnGatewayRequest req = RenewVpnGatewayRequest.fromJsonString(params, RenewVpnGatewayRequest.class);                          RenewVpnGatewayResponse resp = client.RenewVpnGateway(req);                          System.out.println(RenewVpnGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
488,私有网络,专线网关相关接口,创建专线网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetVpnGatewayInternetMaxBandwidthRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetVpnGatewayInternetMaxBandwidthResponse;  public class ResetVpnGatewayInternetMaxBandwidth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetVpnGatewayInternetMaxBandwidthRequest req = ResetVpnGatewayInternetMaxBandwidthRequest.fromJsonString(params, ResetVpnGatewayInternetMaxBandwidthRequest.class);                          ResetVpnGatewayInternetMaxBandwidthResponse resp = client.ResetVpnGatewayInternetMaxBandwidth(req);                          System.out.println(ResetVpnGatewayInternetMaxBandwidthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
489,私有网络,专线网关相关接口,创建专线网关云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetVpnGatewayInternetMaxBandwidthRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetVpnGatewayInternetMaxBandwidthResponse;  public class ResetVpnGatewayInternetMaxBandwidth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetVpnGatewayInternetMaxBandwidthRequest req = ResetVpnGatewayInternetMaxBandwidthRequest.fromJsonString(params, ResetVpnGatewayInternetMaxBandwidthRequest.class);                          ResetVpnGatewayInternetMaxBandwidthResponse resp = client.ResetVpnGatewayInternetMaxBandwidth(req);                          System.out.println(ResetVpnGatewayInternetMaxBandwidthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
490,私有网络,专线网关相关接口,删除专线网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateDirectConnectGatewayRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateDirectConnectGatewayResponse;  public class CreateDirectConnectGateway {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDirectConnectGatewayRequest req = CreateDirectConnectGatewayRequest.fromJsonString(params, CreateDirectConnectGatewayRequest.class);                          CreateDirectConnectGatewayResponse resp = client.CreateDirectConnectGateway(req);                          System.out.println(CreateDirectConnectGatewayRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
491,私有网络,专线网关相关接口,删除专线网关云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateDirectConnectGatewayCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateDirectConnectGatewayCcnRoutesResponse;  public class CreateDirectConnectGatewayCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDirectConnectGatewayCcnRoutesRequest req = CreateDirectConnectGatewayCcnRoutesRequest.fromJsonString(params, CreateDirectConnectGatewayCcnRoutesRequest.class);                          CreateDirectConnectGatewayCcnRoutesResponse resp = client.CreateDirectConnectGatewayCcnRoutes(req);                          System.out.println(CreateDirectConnectGatewayCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
492,私有网络,专线网关相关接口,查询专线网关云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteDirectConnectGatewayCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteDirectConnectGatewayCcnRoutesResponse;  public class DeleteDirectConnectGatewayCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDirectConnectGatewayCcnRoutesRequest req = DeleteDirectConnectGatewayCcnRoutesRequest.fromJsonString(params, DeleteDirectConnectGatewayCcnRoutesRequest.class);                          DeleteDirectConnectGatewayCcnRoutesResponse resp = client.DeleteDirectConnectGatewayCcnRoutes(req);                          System.out.println(DeleteDirectConnectGatewayCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
493,私有网络,专线网关相关接口,查询专线网关,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteDirectConnectGatewayCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteDirectConnectGatewayCcnRoutesResponse;  public class DeleteDirectConnectGatewayCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDirectConnectGatewayCcnRoutesRequest req = DeleteDirectConnectGatewayCcnRoutesRequest.fromJsonString(params, DeleteDirectConnectGatewayCcnRoutesRequest.class);                          DeleteDirectConnectGatewayCcnRoutesResponse resp = client.DeleteDirectConnectGatewayCcnRoutes(req);                          System.out.println(DeleteDirectConnectGatewayCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
494,私有网络,专线网关相关接口,修改专线网关属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeDirectConnectGatewayCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeDirectConnectGatewayCcnRoutesResponse;  public class DescribeDirectConnectGatewayCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDirectConnectGatewayCcnRoutesRequest req = DescribeDirectConnectGatewayCcnRoutesRequest.fromJsonString(params, DescribeDirectConnectGatewayCcnRoutesRequest.class);                          DescribeDirectConnectGatewayCcnRoutesResponse resp = client.DescribeDirectConnectGatewayCcnRoutes(req);                          System.out.println(DescribeDirectConnectGatewayCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
495,私有网络,专线网关相关接口,替换专线网关云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeDirectConnectGatewaysRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeDirectConnectGatewaysResponse;  public class DescribeDirectConnectGateways {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDirectConnectGatewaysRequest req = DescribeDirectConnectGatewaysRequest.fromJsonString(params, DescribeDirectConnectGatewaysRequest.class);                          DescribeDirectConnectGatewaysResponse resp = client.DescribeDirectConnectGateways(req);                          System.out.println(DescribeDirectConnectGatewaysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
496,私有网络,云联网相关接口,云联网接受关联实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyDirectConnectGatewayAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyDirectConnectGatewayAttributeResponse;  public class ModifyDirectConnectGatewayAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDirectConnectGatewayAttributeRequest req = ModifyDirectConnectGatewayAttributeRequest.fromJsonString(params, ModifyDirectConnectGatewayAttributeRequest.class);                          ModifyDirectConnectGatewayAttributeResponse resp = client.ModifyDirectConnectGatewayAttribute(req);                          System.out.println(ModifyDirectConnectGatewayAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
497,私有网络,云联网相关接口,云联网关联实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ReplaceDirectConnectGatewayCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.ReplaceDirectConnectGatewayCcnRoutesResponse;  public class ReplaceDirectConnectGatewayCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceDirectConnectGatewayCcnRoutesRequest req = ReplaceDirectConnectGatewayCcnRoutesRequest.fromJsonString(params, ReplaceDirectConnectGatewayCcnRoutesRequest.class);                          ReplaceDirectConnectGatewayCcnRoutesResponse resp = client.ReplaceDirectConnectGatewayCcnRoutes(req);                          System.out.println(ReplaceDirectConnectGatewayCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
498,私有网络,云联网相关接口,创建CCN,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AcceptAttachCcnInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.AcceptAttachCcnInstancesResponse;  public class AcceptAttachCcnInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AcceptAttachCcnInstancesRequest req = AcceptAttachCcnInstancesRequest.fromJsonString(params, AcceptAttachCcnInstancesRequest.class);                          AcceptAttachCcnInstancesResponse resp = client.AcceptAttachCcnInstances(req);                          System.out.println(AcceptAttachCcnInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
499,私有网络,云联网相关接口,删除CCN,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AttachCcnInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.AttachCcnInstancesResponse;  public class AttachCcnInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AttachCcnInstancesRequest req = AttachCcnInstancesRequest.fromJsonString(params, AttachCcnInstancesRequest.class);                          AttachCcnInstancesResponse resp = client.AttachCcnInstances(req);                          System.out.println(AttachCcnInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
500,私有网络,云联网相关接口,查询云联网关联实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateCcnRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateCcnResponse;  public class CreateCcn {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCcnRequest req = CreateCcnRequest.fromJsonString(params, CreateCcnRequest.class);                          CreateCcnResponse resp = client.CreateCcn(req);                          System.out.println(CreateCcnRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
501,私有网络,云联网相关接口,查询云联网各地域出带宽上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteCcnRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteCcnResponse;  public class DeleteCcn {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteCcnRequest req = DeleteCcnRequest.fromJsonString(params, DeleteCcnRequest.class);                          DeleteCcnResponse resp = client.DeleteCcn(req);                          System.out.println(DeleteCcnRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
502,私有网络,云联网相关接口,查询云联网路由策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnAttachedInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnAttachedInstancesResponse;  public class DescribeCcnAttachedInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCcnAttachedInstancesRequest req = DescribeCcnAttachedInstancesRequest.fromJsonString(params, DescribeCcnAttachedInstancesRequest.class);                          DescribeCcnAttachedInstancesResponse resp = client.DescribeCcnAttachedInstances(req);                          System.out.println(DescribeCcnAttachedInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
503,私有网络,云联网相关接口,查询CCN列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnRegionBandwidthLimitsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnRegionBandwidthLimitsResponse;  public class DescribeCcnRegionBandwidthLimits {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCcnRegionBandwidthLimitsRequest req = DescribeCcnRegionBandwidthLimitsRequest.fromJsonString(params, DescribeCcnRegionBandwidthLimitsRequest.class);                          DescribeCcnRegionBandwidthLimitsResponse resp = client.DescribeCcnRegionBandwidthLimits(req);                          System.out.println(DescribeCcnRegionBandwidthLimitsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
504,私有网络,云联网相关接口,云联网解关联实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnRoutesResponse;  public class DescribeCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCcnRoutesRequest req = DescribeCcnRoutesRequest.fromJsonString(params, DescribeCcnRoutesRequest.class);                          DescribeCcnRoutesResponse resp = client.DescribeCcnRoutes(req);                          System.out.println(DescribeCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
505,私有网络,云联网相关接口,禁用云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeCcnsResponse;  public class DescribeCcns {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCcnsRequest req = DescribeCcnsRequest.fromJsonString(params, DescribeCcnsRequest.class);                          DescribeCcnsResponse resp = client.DescribeCcns(req);                          System.out.println(DescribeCcnsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
506,私有网络,云联网相关接口,启用云联网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DisableCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DisableCcnRoutesResponse;  public class DisableCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DisableCcnRoutesRequest req = DisableCcnRoutesRequest.fromJsonString(params, DisableCcnRoutesRequest.class);                          DisableCcnRoutesResponse resp = client.DisableCcnRoutes(req);                          System.out.println(DisableCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
507,私有网络,云联网相关接口,修改CCN属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DisableCcnRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.DisableCcnRoutesResponse;  public class DisableCcnRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DisableCcnRoutesRequest req = DisableCcnRoutesRequest.fromJsonString(params, DisableCcnRoutesRequest.class);                          DisableCcnRoutesResponse resp = client.DisableCcnRoutes(req);                          System.out.println(DisableCcnRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
508,私有网络,云联网相关接口,云联网拒绝关联实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyCcnAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyCcnAttributeResponse;  public class ModifyCcnAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCcnAttributeRequest req = ModifyCcnAttributeRequest.fromJsonString(params, ModifyCcnAttributeRequest.class);                          ModifyCcnAttributeResponse resp = client.ModifyCcnAttribute(req);                          System.out.println(ModifyCcnAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
509,私有网络,云联网相关接口,重新申请关联实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RejectAttachCcnInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.RejectAttachCcnInstancesResponse;  public class RejectAttachCcnInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectAttachCcnInstancesRequest req = RejectAttachCcnInstancesRequest.fromJsonString(params, RejectAttachCcnInstancesRequest.class);                          RejectAttachCcnInstancesResponse resp = client.RejectAttachCcnInstances(req);                          System.out.println(RejectAttachCcnInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
510,私有网络,云联网相关接口,设置云联网各地域出带宽上限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RejectAttachCcnInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.RejectAttachCcnInstancesResponse;  public class RejectAttachCcnInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectAttachCcnInstancesRequest req = RejectAttachCcnInstancesRequest.fromJsonString(params, RejectAttachCcnInstancesRequest.class);                          RejectAttachCcnInstancesResponse resp = client.RejectAttachCcnInstances(req);                          System.out.println(RejectAttachCcnInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
511,私有网络,其他接口,查询网关流量监控明细,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.SetCcnRegionBandwidthLimitsRequest; import com.tencentcloudapi.vpc.v20170312.models.SetCcnRegionBandwidthLimitsResponse;  public class SetCcnRegionBandwidthLimits {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             SetCcnRegionBandwidthLimitsRequest req = SetCcnRegionBandwidthLimitsRequest.fromJsonString(params, SetCcnRegionBandwidthLimitsRequest.class);                          SetCcnRegionBandwidthLimitsResponse resp = client.SetCcnRegionBandwidthLimits(req);                          System.out.println(SetCcnRegionBandwidthLimitsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
512,私有网络,子网相关接口,分配IPv6子网段,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeGatewayFlowMonitorDetailRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeGatewayFlowMonitorDetailResponse;  public class DescribeGatewayFlowMonitorDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGatewayFlowMonitorDetailRequest req = DescribeGatewayFlowMonitorDetailRequest.fromJsonString(params, DescribeGatewayFlowMonitorDetailRequest.class);                          DescribeGatewayFlowMonitorDetailResponse resp = client.DescribeGatewayFlowMonitorDetail(req);                          System.out.println(DescribeGatewayFlowMonitorDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
513,私有网络,子网相关接口,创建子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeGatewayFlowMonitorDetailRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeGatewayFlowMonitorDetailResponse;  public class DescribeGatewayFlowMonitorDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGatewayFlowMonitorDetailRequest req = DescribeGatewayFlowMonitorDetailRequest.fromJsonString(params, DescribeGatewayFlowMonitorDetailRequest.class);                          DescribeGatewayFlowMonitorDetailResponse resp = client.DescribeGatewayFlowMonitorDetail(req);                          System.out.println(DescribeGatewayFlowMonitorDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
514,私有网络,子网相关接口,批量创建子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6SubnetCidrBlockRequest; import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6SubnetCidrBlockResponse;  public class AssignIpv6SubnetCidrBlock {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AssignIpv6SubnetCidrBlockRequest req = AssignIpv6SubnetCidrBlockRequest.fromJsonString(params, AssignIpv6SubnetCidrBlockRequest.class);                          AssignIpv6SubnetCidrBlockResponse resp = client.AssignIpv6SubnetCidrBlock(req);                          System.out.println(AssignIpv6SubnetCidrBlockRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
515,私有网络,子网相关接口,删除子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateSubnetRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateSubnetResponse;  public class CreateSubnet {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSubnetRequest req = CreateSubnetRequest.fromJsonString(params, CreateSubnetRequest.class);                          CreateSubnetResponse resp = client.CreateSubnet(req);                          System.out.println(CreateSubnetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
516,私有网络,子网相关接口,查询子网列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateSubnetsRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateSubnetsResponse;  public class CreateSubnets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSubnetsRequest req = CreateSubnetsRequest.fromJsonString(params, CreateSubnetsRequest.class);                          CreateSubnetsResponse resp = client.CreateSubnets(req);                          System.out.println(CreateSubnetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
517,私有网络,子网相关接口,修改子网属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteSubnetRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteSubnetResponse;  public class DeleteSubnet {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSubnetRequest req = DeleteSubnetRequest.fromJsonString(params, DeleteSubnetRequest.class);                          DeleteSubnetResponse resp = client.DeleteSubnet(req);                          System.out.println(DeleteSubnetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
518,私有网络,子网相关接口,释放IPv6子网段,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeSubnetsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeSubnetsResponse;  public class DescribeSubnets {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSubnetsRequest req = DescribeSubnetsRequest.fromJsonString(params, DescribeSubnetsRequest.class);                          DescribeSubnetsResponse resp = client.DescribeSubnets(req);                          System.out.println(DescribeSubnetsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
519,私有网络,安全组相关接口,创建安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifySubnetAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifySubnetAttributeResponse;  public class ModifySubnetAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySubnetAttributeRequest req = ModifySubnetAttributeRequest.fromJsonString(params, ModifySubnetAttributeRequest.class);                          ModifySubnetAttributeResponse resp = client.ModifySubnetAttribute(req);                          System.out.println(ModifySubnetAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
520,私有网络,安全组相关接口,安全组添加规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6SubnetCidrBlockRequest; import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6SubnetCidrBlockResponse;  public class UnassignIpv6SubnetCidrBlock {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnassignIpv6SubnetCidrBlockRequest req = UnassignIpv6SubnetCidrBlockRequest.fromJsonString(params, UnassignIpv6SubnetCidrBlockRequest.class);                          UnassignIpv6SubnetCidrBlockResponse resp = client.UnassignIpv6SubnetCidrBlock(req);                          System.out.println(UnassignIpv6SubnetCidrBlockRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
521,私有网络,安全组相关接口,删除安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateSecurityGroupRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateSecurityGroupResponse;  public class CreateSecurityGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSecurityGroupRequest req = CreateSecurityGroupRequest.fromJsonString(params, CreateSecurityGroupRequest.class);                          CreateSecurityGroupResponse resp = client.CreateSecurityGroup(req);                          System.out.println(CreateSecurityGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
522,私有网络,安全组相关接口,删除安全组规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateSecurityGroupPoliciesRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateSecurityGroupPoliciesResponse;  public class CreateSecurityGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSecurityGroupPoliciesRequest req = CreateSecurityGroupPoliciesRequest.fromJsonString(params, CreateSecurityGroupPoliciesRequest.class);                          CreateSecurityGroupPoliciesResponse resp = client.CreateSecurityGroupPolicies(req);                          System.out.println(CreateSecurityGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
523,私有网络,安全组相关接口,查询安全组关联实例统计,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteSecurityGroupRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteSecurityGroupResponse;  public class DeleteSecurityGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSecurityGroupRequest req = DeleteSecurityGroupRequest.fromJsonString(params, DeleteSecurityGroupRequest.class);                          DeleteSecurityGroupResponse resp = client.DeleteSecurityGroup(req);                          System.out.println(DeleteSecurityGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
524,私有网络,安全组相关接口,查询安全组规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteSecurityGroupPoliciesRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteSecurityGroupPoliciesResponse;  public class DeleteSecurityGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSecurityGroupPoliciesRequest req = DeleteSecurityGroupPoliciesRequest.fromJsonString(params, DeleteSecurityGroupPoliciesRequest.class);                          DeleteSecurityGroupPoliciesResponse resp = client.DeleteSecurityGroupPolicies(req);                          System.out.println(DeleteSecurityGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
525,私有网络,安全组相关接口,查看安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupPoliciesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupPoliciesResponse;  public class DescribeSecurityGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityGroupPoliciesRequest req = DescribeSecurityGroupPoliciesRequest.fromJsonString(params, DescribeSecurityGroupPoliciesRequest.class);                          DescribeSecurityGroupPoliciesResponse resp = client.DescribeSecurityGroupPolicies(req);                          System.out.println(DescribeSecurityGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
526,私有网络,安全组相关接口,修改安全组属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupPoliciesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupPoliciesResponse;  public class DescribeSecurityGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityGroupPoliciesRequest req = DescribeSecurityGroupPoliciesRequest.fromJsonString(params, DescribeSecurityGroupPoliciesRequest.class);                          DescribeSecurityGroupPoliciesResponse resp = client.DescribeSecurityGroupPolicies(req);                          System.out.println(DescribeSecurityGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
527,私有网络,安全组相关接口,修改安全组出站和入站规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeSecurityGroupsResponse;  public class DescribeSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityGroupsRequest req = DescribeSecurityGroupsRequest.fromJsonString(params, DescribeSecurityGroupsRequest.class);                          DescribeSecurityGroupsResponse resp = client.DescribeSecurityGroups(req);                          System.out.println(DescribeSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
528,私有网络,安全组相关接口,替换单条安全组路由规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifySecurityGroupPoliciesRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifySecurityGroupPoliciesResponse;  public class ModifySecurityGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySecurityGroupPoliciesRequest req = ModifySecurityGroupPoliciesRequest.fromJsonString(params, ModifySecurityGroupPoliciesRequest.class);                          ModifySecurityGroupPoliciesResponse resp = client.ModifySecurityGroupPolicies(req);                          System.out.println(ModifySecurityGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
529,私有网络,带宽包相关接口,添加带宽包资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyRequest; import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyResponse;  public class ReplaceSecurityGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceSecurityGroupPolicyRequest req = ReplaceSecurityGroupPolicyRequest.fromJsonString(params, ReplaceSecurityGroupPolicyRequest.class);                          ReplaceSecurityGroupPolicyResponse resp = client.ReplaceSecurityGroupPolicy(req);                          System.out.println(ReplaceSecurityGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
530,私有网络,带宽包相关接口,创建共享带宽包,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyRequest; import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyResponse;  public class ReplaceSecurityGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceSecurityGroupPolicyRequest req = ReplaceSecurityGroupPolicyRequest.fromJsonString(params, ReplaceSecurityGroupPolicyRequest.class);                          ReplaceSecurityGroupPolicyResponse resp = client.ReplaceSecurityGroupPolicy(req);                          System.out.println(ReplaceSecurityGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
531,私有网络,带宽包相关接口,删除共享带宽包,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyRequest; import com.tencentcloudapi.vpc.v20170312.models.ReplaceSecurityGroupPolicyResponse;  public class ReplaceSecurityGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceSecurityGroupPolicyRequest req = ReplaceSecurityGroupPolicyRequest.fromJsonString(params, ReplaceSecurityGroupPolicyRequest.class);                          ReplaceSecurityGroupPolicyResponse resp = client.ReplaceSecurityGroupPolicy(req);                          System.out.println(ReplaceSecurityGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
532,私有网络,带宽包相关接口,查询带宽包配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateBandwidthPackageRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateBandwidthPackageResponse;  public class CreateBandwidthPackage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateBandwidthPackageRequest req = CreateBandwidthPackageRequest.fromJsonString(params, CreateBandwidthPackageRequest.class);                          CreateBandwidthPackageResponse resp = client.CreateBandwidthPackage(req);                          System.out.println(CreateBandwidthPackageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
533,私有网络,带宽包相关接口,查询带宽包资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteBandwidthPackageRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteBandwidthPackageResponse;  public class DeleteBandwidthPackage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteBandwidthPackageRequest req = DeleteBandwidthPackageRequest.fromJsonString(params, DeleteBandwidthPackageRequest.class);                          DeleteBandwidthPackageResponse resp = client.DeleteBandwidthPackage(req);                          System.out.println(DeleteBandwidthPackageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
534,私有网络,带宽包相关接口,修改带宽包属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeBandwidthPackageQuotaRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeBandwidthPackageQuotaResponse;  public class DescribeBandwidthPackageQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBandwidthPackageQuotaRequest req = DescribeBandwidthPackageQuotaRequest.fromJsonString(params, DescribeBandwidthPackageQuotaRequest.class);                          DescribeBandwidthPackageQuotaResponse resp = client.DescribeBandwidthPackageQuota(req);                          System.out.println(DescribeBandwidthPackageQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
535,私有网络,带宽包相关接口,删除带宽包资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeBandwidthPackagesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeBandwidthPackagesResponse;  public class DescribeBandwidthPackages {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBandwidthPackagesRequest req = DescribeBandwidthPackagesRequest.fromJsonString(params, DescribeBandwidthPackagesRequest.class);                          DescribeBandwidthPackagesResponse resp = client.DescribeBandwidthPackages(req);                          System.out.println(DescribeBandwidthPackagesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
536,私有网络,弹性公网IP相关接口,创建弹性公网IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RemoveBandwidthPackageResourcesRequest; import com.tencentcloudapi.vpc.v20170312.models.RemoveBandwidthPackageResourcesResponse;  public class RemoveBandwidthPackageResources {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveBandwidthPackageResourcesRequest req = RemoveBandwidthPackageResourcesRequest.fromJsonString(params, RemoveBandwidthPackageResourcesRequest.class);                          RemoveBandwidthPackageResourcesResponse resp = client.RemoveBandwidthPackageResources(req);                          System.out.println(RemoveBandwidthPackageResourcesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
537,私有网络,弹性公网IP相关接口,绑定弹性公网IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.RemoveBandwidthPackageResourcesRequest; import com.tencentcloudapi.vpc.v20170312.models.RemoveBandwidthPackageResourcesResponse;  public class RemoveBandwidthPackageResources {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveBandwidthPackageResourcesRequest req = RemoveBandwidthPackageResourcesRequest.fromJsonString(params, RemoveBandwidthPackageResourcesRequest.class);                          RemoveBandwidthPackageResourcesResponse resp = client.RemoveBandwidthPackageResources(req);                          System.out.println(RemoveBandwidthPackageResourcesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
538,私有网络,弹性公网IP相关接口,查询弹性公网IP列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AllocateAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.AllocateAddressesResponse;  public class AllocateAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AllocateAddressesRequest req = AllocateAddressesRequest.fromJsonString(params, AllocateAddressesRequest.class);                          AllocateAddressesResponse resp = client.AllocateAddresses(req);                          System.out.println(AllocateAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
539,私有网络,弹性公网IP相关接口,查询弹性公网IP配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AssociateAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.AssociateAddressResponse;  public class AssociateAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AssociateAddressRequest req = AssociateAddressRequest.fromJsonString(params, AssociateAddressRequest.class);                          AssociateAddressResponse resp = client.AssociateAddress(req);                          System.out.println(AssociateAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
540,私有网络,弹性公网IP相关接口,查询异步任务执行结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressesResponse;  public class DescribeAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAddressesRequest req = DescribeAddressesRequest.fromJsonString(params, DescribeAddressesRequest.class);                          DescribeAddressesResponse resp = client.DescribeAddresses(req);                          System.out.println(DescribeAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
541,私有网络,弹性公网IP相关接口,解绑定弹性公网IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeTaskResultRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeTaskResultResponse;  public class DescribeTaskResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskResultRequest req = DescribeTaskResultRequest.fromJsonString(params, DescribeTaskResultRequest.class);                          DescribeTaskResultResponse resp = client.DescribeTaskResult(req);                          System.out.println(DescribeTaskResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
542,私有网络,弹性公网IP相关接口,修改弹性公网IP属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DisassociateAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.DisassociateAddressResponse;  public class DisassociateAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateAddressRequest req = DisassociateAddressRequest.fromJsonString(params, DisassociateAddressRequest.class);                          DisassociateAddressResponse resp = client.DisassociateAddress(req);                          System.out.println(DisassociateAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
543,私有网络,弹性公网IP相关接口,调整弹性公网ip带宽,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DisassociateAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.DisassociateAddressResponse;  public class DisassociateAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateAddressRequest req = DisassociateAddressRequest.fromJsonString(params, DisassociateAddressRequest.class);                          DisassociateAddressResponse resp = client.DisassociateAddress(req);                          System.out.println(DisassociateAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
544,私有网络,弹性公网IP相关接口,释放弹性公网IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressAttributeResponse;  public class ModifyAddressAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAddressAttributeRequest req = ModifyAddressAttributeRequest.fromJsonString(params, ModifyAddressAttributeRequest.class);                          ModifyAddressAttributeResponse resp = client.ModifyAddressAttribute(req);                          System.out.println(ModifyAddressAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
545,私有网络,弹性公网IP相关接口,普通IP转弹性IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressesBandwidthRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressesBandwidthResponse;  public class ModifyAddressesBandwidth {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAddressesBandwidthRequest req = ModifyAddressesBandwidthRequest.fromJsonString(params, ModifyAddressesBandwidthRequest.class);                          ModifyAddressesBandwidthResponse resp = client.ModifyAddressesBandwidth(req);                          System.out.println(ModifyAddressesBandwidthRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
546,私有网络,弹性网卡相关接口,分配IPv6地址,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.TransformAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.TransformAddressResponse;  public class TransformAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             TransformAddressRequest req = TransformAddressRequest.fromJsonString(params, TransformAddressRequest.class);                          TransformAddressResponse resp = client.TransformAddress(req);                          System.out.println(TransformAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
547,私有网络,弹性网卡相关接口,弹性网卡申请内网 IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.TransformAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.TransformAddressResponse;  public class TransformAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             TransformAddressRequest req = TransformAddressRequest.fromJsonString(params, TransformAddressRequest.class);                          TransformAddressResponse resp = client.TransformAddress(req);                          System.out.println(TransformAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
548,私有网络,弹性网卡相关接口,弹性网卡绑定云主机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6AddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6AddressesResponse;  public class AssignIpv6Addresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AssignIpv6AddressesRequest req = AssignIpv6AddressesRequest.fromJsonString(params, AssignIpv6AddressesRequest.class);                          AssignIpv6AddressesResponse resp = client.AssignIpv6Addresses(req);                          System.out.println(AssignIpv6AddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
549,私有网络,弹性网卡相关接口,创建弹性网卡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AssignPrivateIpAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.AssignPrivateIpAddressesResponse;  public class AssignPrivateIpAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AssignPrivateIpAddressesRequest req = AssignPrivateIpAddressesRequest.fromJsonString(params, AssignPrivateIpAddressesRequest.class);                          AssignPrivateIpAddressesResponse resp = client.AssignPrivateIpAddresses(req);                          System.out.println(AssignPrivateIpAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
550,私有网络,弹性网卡相关接口,删除弹性网卡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AttachNetworkInterfaceRequest; import com.tencentcloudapi.vpc.v20170312.models.AttachNetworkInterfaceResponse;  public class AttachNetworkInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AttachNetworkInterfaceRequest req = AttachNetworkInterfaceRequest.fromJsonString(params, AttachNetworkInterfaceRequest.class);                          AttachNetworkInterfaceResponse resp = client.AttachNetworkInterface(req);                          System.out.println(AttachNetworkInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
551,私有网络,弹性网卡相关接口,查询弹性网卡配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNetworkInterfaceRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNetworkInterfaceResponse;  public class CreateNetworkInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNetworkInterfaceRequest req = CreateNetworkInterfaceRequest.fromJsonString(params, CreateNetworkInterfaceRequest.class);                          CreateNetworkInterfaceResponse resp = client.CreateNetworkInterface(req);                          System.out.println(CreateNetworkInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
552,私有网络,弹性网卡相关接口,查询弹性网卡列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteNetworkInterfaceRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteNetworkInterfaceResponse;  public class DeleteNetworkInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNetworkInterfaceRequest req = DeleteNetworkInterfaceRequest.fromJsonString(params, DeleteNetworkInterfaceRequest.class);                          DeleteNetworkInterfaceResponse resp = client.DeleteNetworkInterface(req);                          System.out.println(DeleteNetworkInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
553,私有网络,弹性网卡相关接口,弹性网卡解绑云主机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeNetworkInterfaceLimitRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeNetworkInterfaceLimitResponse;  public class DescribeNetworkInterfaceLimit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNetworkInterfaceLimitRequest req = DescribeNetworkInterfaceLimitRequest.fromJsonString(params, DescribeNetworkInterfaceLimitRequest.class);                          DescribeNetworkInterfaceLimitResponse resp = client.DescribeNetworkInterfaceLimit(req);                          System.out.println(DescribeNetworkInterfaceLimitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
554,私有网络,弹性网卡相关接口,弹性网卡迁移,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeNetworkInterfacesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeNetworkInterfacesResponse;  public class DescribeNetworkInterfaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNetworkInterfacesRequest req = DescribeNetworkInterfacesRequest.fromJsonString(params, DescribeNetworkInterfacesRequest.class);                          DescribeNetworkInterfacesResponse resp = client.DescribeNetworkInterfaces(req);                          System.out.println(DescribeNetworkInterfacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
555,私有网络,弹性网卡相关接口,弹性网卡内网IP迁移,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DetachNetworkInterfaceRequest; import com.tencentcloudapi.vpc.v20170312.models.DetachNetworkInterfaceResponse;  public class DetachNetworkInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DetachNetworkInterfaceRequest req = DetachNetworkInterfaceRequest.fromJsonString(params, DetachNetworkInterfaceRequest.class);                          DetachNetworkInterfaceResponse resp = client.DetachNetworkInterface(req);                          System.out.println(DetachNetworkInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
556,私有网络,弹性网卡相关接口,修改弹性网卡IPv6地址属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.MigrateNetworkInterfaceRequest; import com.tencentcloudapi.vpc.v20170312.models.MigrateNetworkInterfaceResponse;  public class MigrateNetworkInterface {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             MigrateNetworkInterfaceRequest req = MigrateNetworkInterfaceRequest.fromJsonString(params, MigrateNetworkInterfaceRequest.class);                          MigrateNetworkInterfaceResponse resp = client.MigrateNetworkInterface(req);                          System.out.println(MigrateNetworkInterfaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
557,私有网络,弹性网卡相关接口,修改弹性网卡,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.MigratePrivateIpAddressRequest; import com.tencentcloudapi.vpc.v20170312.models.MigratePrivateIpAddressResponse;  public class MigratePrivateIpAddress {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             MigratePrivateIpAddressRequest req = MigratePrivateIpAddressRequest.fromJsonString(params, MigratePrivateIpAddressRequest.class);                          MigratePrivateIpAddressResponse resp = client.MigratePrivateIpAddress(req);                          System.out.println(MigratePrivateIpAddressRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
558,私有网络,弹性网卡相关接口,修改弹性网卡内网IP信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyIpv6AddressesAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyIpv6AddressesAttributeResponse;  public class ModifyIpv6AddressesAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyIpv6AddressesAttributeRequest req = ModifyIpv6AddressesAttributeRequest.fromJsonString(params, ModifyIpv6AddressesAttributeRequest.class);                          ModifyIpv6AddressesAttributeResponse resp = client.ModifyIpv6AddressesAttribute(req);                          System.out.println(ModifyIpv6AddressesAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
559,私有网络,弹性网卡相关接口,释放IPv6地址,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyNetworkInterfaceAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyNetworkInterfaceAttributeResponse;  public class ModifyNetworkInterfaceAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNetworkInterfaceAttributeRequest req = ModifyNetworkInterfaceAttributeRequest.fromJsonString(params, ModifyNetworkInterfaceAttributeRequest.class);                          ModifyNetworkInterfaceAttributeResponse resp = client.ModifyNetworkInterfaceAttribute(req);                          System.out.println(ModifyNetworkInterfaceAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
560,私有网络,弹性网卡相关接口,弹性网卡退还内网 IP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyPrivateIpAddressesAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyPrivateIpAddressesAttributeResponse;  public class ModifyPrivateIpAddressesAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPrivateIpAddressesAttributeRequest req = ModifyPrivateIpAddressesAttributeRequest.fromJsonString(params, ModifyPrivateIpAddressesAttributeRequest.class);                          ModifyPrivateIpAddressesAttributeResponse resp = client.ModifyPrivateIpAddressesAttribute(req);                          System.out.println(ModifyPrivateIpAddressesAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
561,私有网络,流日志相关接口,创建流日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.UnassignPrivateIpAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.UnassignPrivateIpAddressesResponse;  public class UnassignPrivateIpAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnassignPrivateIpAddressesRequest req = UnassignPrivateIpAddressesRequest.fromJsonString(params, UnassignPrivateIpAddressesRequest.class);                          UnassignPrivateIpAddressesResponse resp = client.UnassignPrivateIpAddresses(req);                          System.out.println(UnassignPrivateIpAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
562,私有网络,流日志相关接口,删除流日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.UnassignPrivateIpAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.UnassignPrivateIpAddressesResponse;  public class UnassignPrivateIpAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnassignPrivateIpAddressesRequest req = UnassignPrivateIpAddressesRequest.fromJsonString(params, UnassignPrivateIpAddressesRequest.class);                          UnassignPrivateIpAddressesResponse resp = client.UnassignPrivateIpAddresses(req);                          System.out.println(UnassignPrivateIpAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
563,私有网络,流日志相关接口,查询流日志实例信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateFlowLogRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateFlowLogResponse;  public class CreateFlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateFlowLogRequest req = CreateFlowLogRequest.fromJsonString(params, CreateFlowLogRequest.class);                          CreateFlowLogResponse resp = client.CreateFlowLog(req);                          System.out.println(CreateFlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
564,私有网络,流日志相关接口,查询流日志集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteFlowLogRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteFlowLogResponse;  public class DeleteFlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFlowLogRequest req = DeleteFlowLogRequest.fromJsonString(params, DeleteFlowLogRequest.class);                          DeleteFlowLogResponse resp = client.DeleteFlowLog(req);                          System.out.println(DeleteFlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
565,私有网络,流日志相关接口,修改流日志属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeFlowLogRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeFlowLogResponse;  public class DescribeFlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFlowLogRequest req = DescribeFlowLogRequest.fromJsonString(params, DescribeFlowLogRequest.class);                          DescribeFlowLogResponse resp = client.DescribeFlowLog(req);                          System.out.println(DescribeFlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
566,私有网络,私有网络相关接口,分配IPv6网段,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyFlowLogAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyFlowLogAttributeResponse;  public class ModifyFlowLogAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyFlowLogAttributeRequest req = ModifyFlowLogAttributeRequest.fromJsonString(params, ModifyFlowLogAttributeRequest.class);                          ModifyFlowLogAttributeResponse resp = client.ModifyFlowLogAttribute(req);                          System.out.println(ModifyFlowLogAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
567,私有网络,私有网络相关接口,创建基础网络互通,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyFlowLogAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyFlowLogAttributeResponse;  public class ModifyFlowLogAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyFlowLogAttributeRequest req = ModifyFlowLogAttributeRequest.fromJsonString(params, ModifyFlowLogAttributeRequest.class);                          ModifyFlowLogAttributeResponse resp = client.ModifyFlowLogAttribute(req);                          System.out.println(ModifyFlowLogAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
568,私有网络,私有网络相关接口,创建默认VPC和默认子网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6CidrBlockRequest; import com.tencentcloudapi.vpc.v20170312.models.AssignIpv6CidrBlockResponse;  public class AssignIpv6CidrBlock {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AssignIpv6CidrBlockRequest req = AssignIpv6CidrBlockRequest.fromJsonString(params, AssignIpv6CidrBlockRequest.class);                          AssignIpv6CidrBlockResponse resp = client.AssignIpv6CidrBlock(req);                          System.out.println(AssignIpv6CidrBlockRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
569,私有网络,私有网络相关接口,创建VPC,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.AttachClassicLinkVpcRequest; import com.tencentcloudapi.vpc.v20170312.models.AttachClassicLinkVpcResponse;  public class AttachClassicLinkVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             AttachClassicLinkVpcRequest req = AttachClassicLinkVpcRequest.fromJsonString(params, AttachClassicLinkVpcRequest.class);                          AttachClassicLinkVpcResponse resp = client.AttachClassicLinkVpc(req);                          System.out.println(AttachClassicLinkVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
570,私有网络,私有网络相关接口,删除VPC,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateDefaultVpcRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateDefaultVpcResponse;  public class CreateDefaultVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDefaultVpcRequest req = CreateDefaultVpcRequest.fromJsonString(params, CreateDefaultVpcRequest.class);                          CreateDefaultVpcResponse resp = client.CreateDefaultVpc(req);                          System.out.println(CreateDefaultVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
571,私有网络,私有网络相关接口,查询账户属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateVpcRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateVpcResponse;  public class CreateVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVpcRequest req = CreateVpcRequest.fromJsonString(params, CreateVpcRequest.class);                          CreateVpcResponse resp = client.CreateVpc(req);                          System.out.println(CreateVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
572,私有网络,私有网络相关接口,查询基础网络互通列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteVpcRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteVpcResponse;  public class DeleteVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteVpcRequest req = DeleteVpcRequest.fromJsonString(params, DeleteVpcRequest.class);                          DeleteVpcResponse resp = client.DeleteVpc(req);                          System.out.println(DeleteVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
573,私有网络,私有网络相关接口,查询VPC内IPv6列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeAccountAttributesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeAccountAttributesResponse;  public class DescribeAccountAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountAttributesRequest req = DescribeAccountAttributesRequest.fromJsonString(params, DescribeAccountAttributesRequest.class);                          DescribeAccountAttributesResponse resp = client.DescribeAccountAttributes(req);                          System.out.println(DescribeAccountAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
574,私有网络,私有网络相关接口,查询VPC内网IP信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeClassicLinkInstancesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeClassicLinkInstancesResponse;  public class DescribeClassicLinkInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClassicLinkInstancesRequest req = DescribeClassicLinkInstancesRequest.fromJsonString(params, DescribeClassicLinkInstancesRequest.class);                          DescribeClassicLinkInstancesResponse resp = client.DescribeClassicLinkInstances(req);                          System.out.println(DescribeClassicLinkInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
575,私有网络,私有网络相关接口,查询VPC列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcIpv6AddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcIpv6AddressesResponse;  public class DescribeVpcIpv6Addresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcIpv6AddressesRequest req = DescribeVpcIpv6AddressesRequest.fromJsonString(params, DescribeVpcIpv6AddressesRequest.class);                          DescribeVpcIpv6AddressesResponse resp = client.DescribeVpcIpv6Addresses(req);                          System.out.println(DescribeVpcIpv6AddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
576,私有网络,私有网络相关接口,删除基础网络互通,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcPrivateIpAddressesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcPrivateIpAddressesResponse;  public class DescribeVpcPrivateIpAddresses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcPrivateIpAddressesRequest req = DescribeVpcPrivateIpAddressesRequest.fromJsonString(params, DescribeVpcPrivateIpAddressesRequest.class);                          DescribeVpcPrivateIpAddressesResponse resp = client.DescribeVpcPrivateIpAddresses(req);                          System.out.println(DescribeVpcPrivateIpAddressesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
577,私有网络,私有网络相关接口,修改VPC属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeVpcsResponse;  public class DescribeVpcs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVpcsRequest req = DescribeVpcsRequest.fromJsonString(params, DescribeVpcsRequest.class);                          DescribeVpcsResponse resp = client.DescribeVpcs(req);                          System.out.println(DescribeVpcsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
578,私有网络,私有网络相关接口,释放IPv6网段,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DetachClassicLinkVpcRequest; import com.tencentcloudapi.vpc.v20170312.models.DetachClassicLinkVpcResponse;  public class DetachClassicLinkVpc {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DetachClassicLinkVpcRequest req = DetachClassicLinkVpcRequest.fromJsonString(params, DetachClassicLinkVpcRequest.class);                          DetachClassicLinkVpcResponse resp = client.DetachClassicLinkVpc(req);                          System.out.println(DetachClassicLinkVpcRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
579,私有网络,网络参数模板相关接口,创建IP地址模版,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6CidrBlockRequest; import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6CidrBlockResponse;  public class UnassignIpv6CidrBlock {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnassignIpv6CidrBlockRequest req = UnassignIpv6CidrBlockRequest.fromJsonString(params, UnassignIpv6CidrBlockRequest.class);                          UnassignIpv6CidrBlockResponse resp = client.UnassignIpv6CidrBlock(req);                          System.out.println(UnassignIpv6CidrBlockRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
580,私有网络,网络参数模板相关接口,创建IP地址模版集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6CidrBlockRequest; import com.tencentcloudapi.vpc.v20170312.models.UnassignIpv6CidrBlockResponse;  public class UnassignIpv6CidrBlock {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             UnassignIpv6CidrBlockRequest req = UnassignIpv6CidrBlockRequest.fromJsonString(params, UnassignIpv6CidrBlockRequest.class);                          UnassignIpv6CidrBlockResponse resp = client.UnassignIpv6CidrBlock(req);                          System.out.println(UnassignIpv6CidrBlockRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
581,私有网络,网络参数模板相关接口,创建协议端口模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateAddressTemplateRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateAddressTemplateResponse;  public class CreateAddressTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAddressTemplateRequest req = CreateAddressTemplateRequest.fromJsonString(params, CreateAddressTemplateRequest.class);                          CreateAddressTemplateResponse resp = client.CreateAddressTemplate(req);                          System.out.println(CreateAddressTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
582,私有网络,网络参数模板相关接口,创建协议端口模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateAddressTemplateGroupRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateAddressTemplateGroupResponse;  public class CreateAddressTemplateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAddressTemplateGroupRequest req = CreateAddressTemplateGroupRequest.fromJsonString(params, CreateAddressTemplateGroupRequest.class);                          CreateAddressTemplateGroupResponse resp = client.CreateAddressTemplateGroup(req);                          System.out.println(CreateAddressTemplateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
583,私有网络,网络参数模板相关接口,删除IP地址模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateServiceTemplateRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateServiceTemplateResponse;  public class CreateServiceTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateServiceTemplateRequest req = CreateServiceTemplateRequest.fromJsonString(params, CreateServiceTemplateRequest.class);                          CreateServiceTemplateResponse resp = client.CreateServiceTemplate(req);                          System.out.println(CreateServiceTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
584,私有网络,网络参数模板相关接口,删除IP地址模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateServiceTemplateGroupRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateServiceTemplateGroupResponse;  public class CreateServiceTemplateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateServiceTemplateGroupRequest req = CreateServiceTemplateGroupRequest.fromJsonString(params, CreateServiceTemplateGroupRequest.class);                          CreateServiceTemplateGroupResponse resp = client.CreateServiceTemplateGroup(req);                          System.out.println(CreateServiceTemplateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
585,私有网络,网络参数模板相关接口,删除协议端口模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteAddressTemplateRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteAddressTemplateResponse;  public class DeleteAddressTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAddressTemplateRequest req = DeleteAddressTemplateRequest.fromJsonString(params, DeleteAddressTemplateRequest.class);                          DeleteAddressTemplateResponse resp = client.DeleteAddressTemplate(req);                          System.out.println(DeleteAddressTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
586,私有网络,网络参数模板相关接口,删除协议端口模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteAddressTemplateGroupRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteAddressTemplateGroupResponse;  public class DeleteAddressTemplateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAddressTemplateGroupRequest req = DeleteAddressTemplateGroupRequest.fromJsonString(params, DeleteAddressTemplateGroupRequest.class);                          DeleteAddressTemplateGroupResponse resp = client.DeleteAddressTemplateGroup(req);                          System.out.println(DeleteAddressTemplateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
587,私有网络,网络参数模板相关接口,查询IP地址模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteServiceTemplateRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteServiceTemplateResponse;  public class DeleteServiceTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteServiceTemplateRequest req = DeleteServiceTemplateRequest.fromJsonString(params, DeleteServiceTemplateRequest.class);                          DeleteServiceTemplateResponse resp = client.DeleteServiceTemplate(req);                          System.out.println(DeleteServiceTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
588,私有网络,网络参数模板相关接口,查询IP地址模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteServiceTemplateRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteServiceTemplateResponse;  public class DeleteServiceTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteServiceTemplateRequest req = DeleteServiceTemplateRequest.fromJsonString(params, DeleteServiceTemplateRequest.class);                          DeleteServiceTemplateResponse resp = client.DeleteServiceTemplate(req);                          System.out.println(DeleteServiceTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
589,私有网络,网络参数模板相关接口,查询协议端口模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressTemplateGroupsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressTemplateGroupsResponse;  public class DescribeAddressTemplateGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAddressTemplateGroupsRequest req = DescribeAddressTemplateGroupsRequest.fromJsonString(params, DescribeAddressTemplateGroupsRequest.class);                          DescribeAddressTemplateGroupsResponse resp = client.DescribeAddressTemplateGroups(req);                          System.out.println(DescribeAddressTemplateGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
590,私有网络,网络参数模板相关接口,查询协议端口模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressTemplatesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeAddressTemplatesResponse;  public class DescribeAddressTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAddressTemplatesRequest req = DescribeAddressTemplatesRequest.fromJsonString(params, DescribeAddressTemplatesRequest.class);                          DescribeAddressTemplatesResponse resp = client.DescribeAddressTemplates(req);                          System.out.println(DescribeAddressTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
591,私有网络,网络参数模板相关接口,修改IP地址模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsResponse;  public class DescribeServiceTemplateGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceTemplateGroupsRequest req = DescribeServiceTemplateGroupsRequest.fromJsonString(params, DescribeServiceTemplateGroupsRequest.class);                          DescribeServiceTemplateGroupsResponse resp = client.DescribeServiceTemplateGroups(req);                          System.out.println(DescribeServiceTemplateGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
592,私有网络,网络参数模板相关接口,修改IP地址模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsResponse;  public class DescribeServiceTemplateGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceTemplateGroupsRequest req = DescribeServiceTemplateGroupsRequest.fromJsonString(params, DescribeServiceTemplateGroupsRequest.class);                          DescribeServiceTemplateGroupsResponse resp = client.DescribeServiceTemplateGroups(req);                          System.out.println(DescribeServiceTemplateGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
593,私有网络,网络参数模板相关接口,修改协议端口模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplateGroupsResponse;  public class DescribeServiceTemplateGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceTemplateGroupsRequest req = DescribeServiceTemplateGroupsRequest.fromJsonString(params, DescribeServiceTemplateGroupsRequest.class);                          DescribeServiceTemplateGroupsResponse resp = client.DescribeServiceTemplateGroups(req);                          System.out.println(DescribeServiceTemplateGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
594,私有网络,网络参数模板相关接口,修改协议端口模板集合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplatesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeServiceTemplatesResponse;  public class DescribeServiceTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceTemplatesRequest req = DescribeServiceTemplatesRequest.fromJsonString(params, DescribeServiceTemplatesRequest.class);                          DescribeServiceTemplatesResponse resp = client.DescribeServiceTemplates(req);                          System.out.println(DescribeServiceTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
595,私有网络,网络探测相关接口,验证网络探测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyServiceTemplateGroupAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyServiceTemplateGroupAttributeResponse;  public class ModifyServiceTemplateGroupAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyServiceTemplateGroupAttributeRequest req = ModifyServiceTemplateGroupAttributeRequest.fromJsonString(params, ModifyServiceTemplateGroupAttributeRequest.class);                          ModifyServiceTemplateGroupAttributeResponse resp = client.ModifyServiceTemplateGroupAttribute(req);                          System.out.println(ModifyServiceTemplateGroupAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
596,私有网络,网络探测相关接口,创建网络探测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressTemplateAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyAddressTemplateAttributeResponse;  public class ModifyAddressTemplateAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAddressTemplateAttributeRequest req = ModifyAddressTemplateAttributeRequest.fromJsonString(params, ModifyAddressTemplateAttributeRequest.class);                          ModifyAddressTemplateAttributeResponse resp = client.ModifyAddressTemplateAttribute(req);                          System.out.println(ModifyAddressTemplateAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
597,私有网络,网络探测相关接口,删除网络探测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNetDetectResponse;  public class CreateNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNetDetectRequest req = CreateNetDetectRequest.fromJsonString(params, CreateNetDetectRequest.class);                          CreateNetDetectResponse resp = client.CreateNetDetect(req);                          System.out.println(CreateNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
598,私有网络,网络探测相关接口,查询网络探测列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateNetDetectResponse;  public class CreateNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateNetDetectRequest req = CreateNetDetectRequest.fromJsonString(params, CreateNetDetectRequest.class);                          CreateNetDetectResponse resp = client.CreateNetDetect(req);                          System.out.println(CreateNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
599,私有网络,网络探测相关接口,查询网络探测验证结果列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteNetDetectResponse;  public class DeleteNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNetDetectRequest req = DeleteNetDetectRequest.fromJsonString(params, DeleteNetDetectRequest.class);                          DeleteNetDetectResponse resp = client.DeleteNetDetect(req);                          System.out.println(DeleteNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
600,私有网络,网络探测相关接口,修改网络探测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeNetDetectsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeNetDetectsResponse;  public class DescribeNetDetects {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNetDetectsRequest req = DescribeNetDetectsRequest.fromJsonString(params, DescribeNetDetectsRequest.class);                          DescribeNetDetectsResponse resp = client.DescribeNetDetects(req);                          System.out.println(DescribeNetDetectsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
601,私有网络,路由表相关接口,创建路由策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectResponse;  public class ModifyNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNetDetectRequest req = ModifyNetDetectRequest.fromJsonString(params, ModifyNetDetectRequest.class);                          ModifyNetDetectResponse resp = client.ModifyNetDetect(req);                          System.out.println(ModifyNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
602,私有网络,路由表相关接口,创建路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectResponse;  public class ModifyNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNetDetectRequest req = ModifyNetDetectRequest.fromJsonString(params, ModifyNetDetectRequest.class);                          ModifyNetDetectResponse resp = client.ModifyNetDetect(req);                          System.out.println(ModifyNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
603,私有网络,路由表相关接口,删除路由策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyNetDetectResponse;  public class ModifyNetDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNetDetectRequest req = ModifyNetDetectRequest.fromJsonString(params, ModifyNetDetectRequest.class);                          ModifyNetDetectResponse resp = client.ModifyNetDetect(req);                          System.out.println(ModifyNetDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
604,私有网络,路由表相关接口,删除路由表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateRouteTableRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateRouteTableResponse;  public class CreateRouteTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRouteTableRequest req = CreateRouteTableRequest.fromJsonString(params, CreateRouteTableRequest.class);                          CreateRouteTableResponse resp = client.CreateRouteTable(req);                          System.out.println(CreateRouteTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
605,私有网络,路由表相关接口,查询路由策略冲突列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteRouteTableRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteRouteTableResponse;  public class DeleteRouteTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRouteTableRequest req = DeleteRouteTableRequest.fromJsonString(params, DeleteRouteTableRequest.class);                          DeleteRouteTableResponse resp = client.DeleteRouteTable(req);                          System.out.println(DeleteRouteTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
606,私有网络,路由表相关接口,查询路由列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteRouteTableRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteRouteTableResponse;  public class DeleteRouteTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRouteTableRequest req = DeleteRouteTableRequest.fromJsonString(params, DeleteRouteTableRequest.class);                          DeleteRouteTableResponse resp = client.DeleteRouteTable(req);                          System.out.println(DeleteRouteTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
607,私有网络,路由表相关接口,禁用子网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteConflictsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteConflictsResponse;  public class DescribeRouteConflicts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteConflictsRequest req = DescribeRouteConflictsRequest.fromJsonString(params, DescribeRouteConflictsRequest.class);                          DescribeRouteConflictsResponse resp = client.DescribeRouteConflicts(req);                          System.out.println(DescribeRouteConflictsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
608,私有网络,路由表相关接口,启用子网路由,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteConflictsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteConflictsResponse;  public class DescribeRouteConflicts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteConflictsRequest req = DescribeRouteConflictsRequest.fromJsonString(params, DescribeRouteConflictsRequest.class);                          DescribeRouteConflictsResponse resp = client.DescribeRouteConflicts(req);                          System.out.println(DescribeRouteConflictsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
609,私有网络,路由表相关接口,修改路由表属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteTablesRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeRouteTablesResponse;  public class DescribeRouteTables {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRouteTablesRequest req = DescribeRouteTablesRequest.fromJsonString(params, DescribeRouteTablesRequest.class);                          DescribeRouteTablesResponse resp = client.DescribeRouteTables(req);                          System.out.println(DescribeRouteTablesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
610,私有网络,路由表相关接口,替换路由策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.EnableRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.EnableRoutesResponse;  public class EnableRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             EnableRoutesRequest req = EnableRoutesRequest.fromJsonString(params, EnableRoutesRequest.class);                          EnableRoutesResponse resp = client.EnableRoutes(req);                          System.out.println(EnableRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
611,私有网络,路由表相关接口,替换路由表绑定关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyRouteTableAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyRouteTableAttributeResponse;  public class ModifyRouteTableAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyRouteTableAttributeRequest req = ModifyRouteTableAttributeRequest.fromJsonString(params, ModifyRouteTableAttributeRequest.class);                          ModifyRouteTableAttributeResponse resp = client.ModifyRouteTableAttribute(req);                          System.out.println(ModifyRouteTableAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
612,私有网络,路由表相关接口,重置路由表名称和路由策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ReplaceRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.ReplaceRoutesResponse;  public class ReplaceRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceRoutesRequest req = ReplaceRoutesRequest.fromJsonString(params, ReplaceRoutesRequest.class);                          ReplaceRoutesResponse resp = client.ReplaceRoutes(req);                          System.out.println(ReplaceRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
613,私有网络,高可用虚拟IP相关接口,创建HAVIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetRoutesResponse;  public class ResetRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetRoutesRequest req = ResetRoutesRequest.fromJsonString(params, ResetRoutesRequest.class);                          ResetRoutesResponse resp = client.ResetRoutes(req);                          System.out.println(ResetRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
614,私有网络,高可用虚拟IP相关接口,删除HAVIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ResetRoutesRequest; import com.tencentcloudapi.vpc.v20170312.models.ResetRoutesResponse;  public class ResetRoutes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ResetRoutesRequest req = ResetRoutesRequest.fromJsonString(params, ResetRoutesRequest.class);                          ResetRoutesResponse resp = client.ResetRoutes(req);                          System.out.println(ResetRoutesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
615,私有网络,高可用虚拟IP相关接口,查询HAVIP列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.CreateHaVipRequest; import com.tencentcloudapi.vpc.v20170312.models.CreateHaVipResponse;  public class CreateHaVip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateHaVipRequest req = CreateHaVipRequest.fromJsonString(params, CreateHaVipRequest.class);                          CreateHaVipResponse resp = client.CreateHaVip(req);                          System.out.println(CreateHaVipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
616,私有网络,高可用虚拟IP相关接口,HAVIP绑定EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DeleteHaVipRequest; import com.tencentcloudapi.vpc.v20170312.models.DeleteHaVipResponse;  public class DeleteHaVip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteHaVipRequest req = DeleteHaVipRequest.fromJsonString(params, DeleteHaVipRequest.class);                          DeleteHaVipResponse resp = client.DeleteHaVip(req);                          System.out.println(DeleteHaVipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
617,私有网络,高可用虚拟IP相关接口,HAVIP解绑EIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.DescribeHaVipsRequest; import com.tencentcloudapi.vpc.v20170312.models.DescribeHaVipsResponse;  public class DescribeHaVips {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHaVipsRequest req = DescribeHaVipsRequest.fromJsonString(params, DescribeHaVipsRequest.class);                          DescribeHaVipsResponse resp = client.DescribeHaVips(req);                          System.out.println(DescribeHaVipsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
618,私有网络,高可用虚拟IP相关接口,修改HAVIP属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.HaVipAssociateAddressIpRequest; import com.tencentcloudapi.vpc.v20170312.models.HaVipAssociateAddressIpResponse;  public class HaVipAssociateAddressIp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vpc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             HaVipAssociateAddressIpRequest req = HaVipAssociateAddressIpRequest.fromJsonString(params, HaVipAssociateAddressIpRequest.class);                          HaVipAssociateAddressIpResponse resp = client.HaVipAssociateAddressIp(req);                          System.out.println(HaVipAssociateAddressIpRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
619,批量计算,任务模板相关接口,创建任务模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyHaVipAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyHaVipAttributeResponse;  public class ModifyHaVipAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyHaVipAttributeRequest req = ModifyHaVipAttributeRequest.fromJsonString(params, ModifyHaVipAttributeRequest.class);                          ModifyHaVipAttributeResponse resp = client.ModifyHaVipAttribute(req);                          System.out.println(ModifyHaVipAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
620,批量计算,任务模板相关接口,删除任务模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vpc.v20170312.VpcClient;  import com.tencentcloudapi.vpc.v20170312.models.ModifyHaVipAttributeRequest; import com.tencentcloudapi.vpc.v20170312.models.ModifyHaVipAttributeResponse;  public class ModifyHaVipAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VpcClient client = new VpcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyHaVipAttributeRequest req = ModifyHaVipAttributeRequest.fromJsonString(params, ModifyHaVipAttributeRequest.class);                          ModifyHaVipAttributeResponse resp = client.ModifyHaVipAttribute(req);                          System.out.println(ModifyHaVipAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
621,批量计算,任务模板相关接口,获取任务模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.CreateTaskTemplateRequest; import com.tencentcloudapi.batch.v20170312.models.CreateTaskTemplateResponse;  public class CreateTaskTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTaskTemplateRequest req = CreateTaskTemplateRequest.fromJsonString(params, CreateTaskTemplateRequest.class);                          CreateTaskTemplateResponse resp = client.CreateTaskTemplate(req);                          System.out.println(CreateTaskTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
622,批量计算,任务模板相关接口,修改任务模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DeleteTaskTemplatesRequest; import com.tencentcloudapi.batch.v20170312.models.DeleteTaskTemplatesResponse;  public class DeleteTaskTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTaskTemplatesRequest req = DeleteTaskTemplatesRequest.fromJsonString(params, DeleteTaskTemplatesRequest.class);                          DeleteTaskTemplatesResponse resp = client.DeleteTaskTemplates(req);                          System.out.println(DeleteTaskTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
623,批量计算,作业相关接口,删除作业,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DeleteTaskTemplatesRequest; import com.tencentcloudapi.batch.v20170312.models.DeleteTaskTemplatesResponse;  public class DeleteTaskTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTaskTemplatesRequest req = DeleteTaskTemplatesRequest.fromJsonString(params, DeleteTaskTemplatesRequest.class);                          DeleteTaskTemplatesResponse resp = client.DeleteTaskTemplates(req);                          System.out.println(DeleteTaskTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
624,批量计算,作业相关接口,查看作业详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.ModifyTaskTemplateRequest; import com.tencentcloudapi.batch.v20170312.models.ModifyTaskTemplateResponse;  public class ModifyTaskTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTaskTemplateRequest req = ModifyTaskTemplateRequest.fromJsonString(params, ModifyTaskTemplateRequest.class);                          ModifyTaskTemplateResponse resp = client.ModifyTaskTemplate(req);                          System.out.println(ModifyTaskTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
625,批量计算,作业相关接口,查看作业列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DeleteJobRequest; import com.tencentcloudapi.batch.v20170312.models.DeleteJobResponse;  public class DeleteJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteJobRequest req = DeleteJobRequest.fromJsonString(params, DeleteJobRequest.class);                          DeleteJobResponse resp = client.DeleteJob(req);                          System.out.println(DeleteJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
626,批量计算,作业相关接口,获取作业的提交信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DeleteJobRequest; import com.tencentcloudapi.batch.v20170312.models.DeleteJobResponse;  public class DeleteJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteJobRequest req = DeleteJobRequest.fromJsonString(params, DeleteJobRequest.class);                          DeleteJobResponse resp = client.DeleteJob(req);                          System.out.println(DeleteJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
627,批量计算,作业相关接口,查询任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeJobRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeJobResponse;  public class DescribeJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeJobRequest req = DescribeJobRequest.fromJsonString(params, DescribeJobRequest.class);                          DescribeJobResponse resp = client.DescribeJob(req);                          System.out.println(DescribeJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
628,批量计算,作业相关接口,获取任务日志详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeJobRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeJobResponse;  public class DescribeJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeJobRequest req = DescribeJobRequest.fromJsonString(params, DescribeJobRequest.class);                          DescribeJobResponse resp = client.DescribeJob(req);                          System.out.println(DescribeJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
629,批量计算,作业相关接口,重试作业,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeJobsRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeJobsResponse;  public class DescribeJobs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeJobsRequest req = DescribeJobsRequest.fromJsonString(params, DescribeJobsRequest.class);                          DescribeJobsResponse resp = client.DescribeJobs(req);                          System.out.println(DescribeJobsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
630,批量计算,作业相关接口,提交作业,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeTaskLogsRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeTaskLogsResponse;  public class DescribeTaskLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskLogsRequest req = DescribeTaskLogsRequest.fromJsonString(params, DescribeTaskLogsRequest.class);                          DescribeTaskLogsResponse resp = client.DescribeTaskLogs(req);                          System.out.println(DescribeTaskLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
631,批量计算,作业相关接口,终止作业,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.SubmitJobRequest; import com.tencentcloudapi.batch.v20170312.models.SubmitJobResponse;  public class SubmitJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             SubmitJobRequest req = SubmitJobRequest.fromJsonString(params, SubmitJobRequest.class);                          SubmitJobResponse resp = client.SubmitJob(req);                          System.out.println(SubmitJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
632,批量计算,作业相关接口,终止任务实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateJobRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateJobResponse;  public class TerminateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateJobRequest req = TerminateJobRequest.fromJsonString(params, TerminateJobRequest.class);                          TerminateJobResponse resp = client.TerminateJob(req);                          System.out.println(TerminateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
633,批量计算,查看配置相关接口,获取批量计算可用的CVM机型配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateJobRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateJobResponse;  public class TerminateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateJobRequest req = TerminateJobRequest.fromJsonString(params, TerminateJobRequest.class);                          TerminateJobResponse resp = client.TerminateJob(req);                          System.out.println(TerminateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
634,批量计算,查看配置相关接口,获取批量计算可用区机型配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateTaskInstanceRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateTaskInstanceResponse;  public class TerminateTaskInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateTaskInstanceRequest req = TerminateTaskInstanceRequest.fromJsonString(params, TerminateTaskInstanceRequest.class);                          TerminateTaskInstanceResponse resp = client.TerminateTaskInstance(req);                          System.out.println(TerminateTaskInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
635,批量计算,查看配置相关接口,查询实例分类信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateTaskInstanceRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateTaskInstanceResponse;  public class TerminateTaskInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateTaskInstanceRequest req = TerminateTaskInstanceRequest.fromJsonString(params, TerminateTaskInstanceRequest.class);                          TerminateTaskInstanceResponse resp = client.TerminateTaskInstance(req);                          System.out.println(TerminateTaskInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
636,批量计算,计算环境相关接口,创建计算环境,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesResponse;  public class DescribeInstanceCategories {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceCategoriesRequest req = DescribeInstanceCategoriesRequest.fromJsonString(params, DescribeInstanceCategoriesRequest.class);                          DescribeInstanceCategoriesResponse resp = client.DescribeInstanceCategories(req);                          System.out.println(DescribeInstanceCategoriesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
637,批量计算,计算环境相关接口,创建黑石计算环境,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesResponse;  public class DescribeInstanceCategories {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceCategoriesRequest req = DescribeInstanceCategoriesRequest.fromJsonString(params, DescribeInstanceCategoriesRequest.class);                          DescribeInstanceCategoriesResponse resp = client.DescribeInstanceCategories(req);                          System.out.println(DescribeInstanceCategoriesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
638,批量计算,计算环境相关接口,删除计算环境,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeInstanceCategoriesResponse;  public class DescribeInstanceCategories {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceCategoriesRequest req = DescribeInstanceCategoriesRequest.fromJsonString(params, DescribeInstanceCategoriesRequest.class);                          DescribeInstanceCategoriesResponse resp = client.DescribeInstanceCategories(req);                          System.out.println(DescribeInstanceCategoriesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
639,批量计算,计算环境相关接口,获取计算环境详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DeleteComputeEnvRequest; import com.tencentcloudapi.batch.v20170312.models.DeleteComputeEnvResponse;  public class DeleteComputeEnv {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteComputeEnvRequest req = DeleteComputeEnvRequest.fromJsonString(params, DeleteComputeEnvRequest.class);                          DeleteComputeEnvResponse resp = client.DeleteComputeEnv(req);                          System.out.println(DeleteComputeEnvRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
640,批量计算,计算环境相关接口,查看计算环境活动信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvResponse;  public class DescribeComputeEnv {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvRequest req = DescribeComputeEnvRequest.fromJsonString(params, DescribeComputeEnvRequest.class);                          DescribeComputeEnvResponse resp = client.DescribeComputeEnv(req);                          System.out.println(DescribeComputeEnvRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
641,批量计算,计算环境相关接口,查看计算环境的创建信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvResponse;  public class DescribeComputeEnv {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvRequest req = DescribeComputeEnvRequest.fromJsonString(params, DescribeComputeEnvRequest.class);                          DescribeComputeEnvResponse resp = client.DescribeComputeEnv(req);                          System.out.println(DescribeComputeEnvRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
642,批量计算,计算环境相关接口,查看计算环境创建信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvResponse;  public class DescribeComputeEnv {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvRequest req = DescribeComputeEnvRequest.fromJsonString(params, DescribeComputeEnvRequest.class);                          DescribeComputeEnvResponse resp = client.DescribeComputeEnv(req);                          System.out.println(DescribeComputeEnvRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
643,批量计算,计算环境相关接口,获取计算环境列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvActivitiesRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvActivitiesResponse;  public class DescribeComputeEnvActivities {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvActivitiesRequest req = DescribeComputeEnvActivitiesRequest.fromJsonString(params, DescribeComputeEnvActivitiesRequest.class);                          DescribeComputeEnvActivitiesResponse resp = client.DescribeComputeEnvActivities(req);                          System.out.println(DescribeComputeEnvActivitiesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
644,批量计算,计算环境相关接口,修改计算环境,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvCreateInfosRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvCreateInfosResponse;  public class DescribeComputeEnvCreateInfos {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvCreateInfosRequest req = DescribeComputeEnvCreateInfosRequest.fromJsonString(params, DescribeComputeEnvCreateInfosRequest.class);                          DescribeComputeEnvCreateInfosResponse resp = client.DescribeComputeEnvCreateInfos(req);                          System.out.println(DescribeComputeEnvCreateInfosRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
645,批量计算,计算环境相关接口,销毁计算节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvsRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvsResponse;  public class DescribeComputeEnvs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvsRequest req = DescribeComputeEnvsRequest.fromJsonString(params, DescribeComputeEnvsRequest.class);                          DescribeComputeEnvsResponse resp = client.DescribeComputeEnvs(req);                          System.out.println(DescribeComputeEnvsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
646,批量计算,计算环境相关接口,批量销毁计算节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvsRequest; import com.tencentcloudapi.batch.v20170312.models.DescribeComputeEnvsResponse;  public class DescribeComputeEnvs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComputeEnvsRequest req = DescribeComputeEnvsRequest.fromJsonString(params, DescribeComputeEnvsRequest.class);                          DescribeComputeEnvsResponse resp = client.DescribeComputeEnvs(req);                          System.out.println(DescribeComputeEnvsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
647,专线接入,专线接入相关接口,接受专用通道申请,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateComputeNodeRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateComputeNodeResponse;  public class TerminateComputeNode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""batch.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateComputeNodeRequest req = TerminateComputeNodeRequest.fromJsonString(params, TerminateComputeNodeRequest.class);                          TerminateComputeNodeResponse resp = client.TerminateComputeNode(req);                          System.out.println(TerminateComputeNodeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
648,专线接入,专线接入相关接口,申请物理专线,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.batch.v20170312.BatchClient;  import com.tencentcloudapi.batch.v20170312.models.TerminateComputeNodesRequest; import com.tencentcloudapi.batch.v20170312.models.TerminateComputeNodesResponse;  public class TerminateComputeNodes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BatchClient client = new BatchClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateComputeNodesRequest req = TerminateComputeNodesRequest.fromJsonString(params, TerminateComputeNodesRequest.class);                          TerminateComputeNodesResponse resp = client.TerminateComputeNodes(req);                          System.out.println(TerminateComputeNodesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
649,专线接入,专线接入相关接口,创建专用通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.AcceptDirectConnectTunnelRequest; import com.tencentcloudapi.dc.v20180410.models.AcceptDirectConnectTunnelResponse;  public class AcceptDirectConnectTunnel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             AcceptDirectConnectTunnelRequest req = AcceptDirectConnectTunnelRequest.fromJsonString(params, AcceptDirectConnectTunnelRequest.class);                          AcceptDirectConnectTunnelResponse resp = client.AcceptDirectConnectTunnel(req);                          System.out.println(AcceptDirectConnectTunnelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
650,专线接入,专线接入相关接口,删除物理专线,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.CreateDirectConnectRequest; import com.tencentcloudapi.dc.v20180410.models.CreateDirectConnectResponse;  public class CreateDirectConnect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDirectConnectRequest req = CreateDirectConnectRequest.fromJsonString(params, CreateDirectConnectRequest.class);                          CreateDirectConnectResponse resp = client.CreateDirectConnect(req);                          System.out.println(CreateDirectConnectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
651,专线接入,专线接入相关接口,删除专用通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.CreateDirectConnectTunnelRequest; import com.tencentcloudapi.dc.v20180410.models.CreateDirectConnectTunnelResponse;  public class CreateDirectConnectTunnel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDirectConnectTunnelRequest req = CreateDirectConnectTunnelRequest.fromJsonString(params, CreateDirectConnectTunnelRequest.class);                          CreateDirectConnectTunnelResponse resp = client.CreateDirectConnectTunnel(req);                          System.out.println(CreateDirectConnectTunnelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
652,专线接入,专线接入相关接口,查询物理专线接入点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.DeleteDirectConnectRequest; import com.tencentcloudapi.dc.v20180410.models.DeleteDirectConnectResponse;  public class DeleteDirectConnect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDirectConnectRequest req = DeleteDirectConnectRequest.fromJsonString(params, DeleteDirectConnectRequest.class);                          DeleteDirectConnectResponse resp = client.DeleteDirectConnect(req);                          System.out.println(DeleteDirectConnectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
653,专线接入,专线接入相关接口,查询物理专线列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.DeleteDirectConnectTunnelRequest; import com.tencentcloudapi.dc.v20180410.models.DeleteDirectConnectTunnelResponse;  public class DeleteDirectConnectTunnel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDirectConnectTunnelRequest req = DeleteDirectConnectTunnelRequest.fromJsonString(params, DeleteDirectConnectTunnelRequest.class);                          DeleteDirectConnectTunnelResponse resp = client.DeleteDirectConnectTunnel(req);                          System.out.println(DeleteDirectConnectTunnelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
654,专线接入,专线接入相关接口,查询专用通道列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.DescribeAccessPointsRequest; import com.tencentcloudapi.dc.v20180410.models.DescribeAccessPointsResponse;  public class DescribeAccessPoints {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccessPointsRequest req = DescribeAccessPointsRequest.fromJsonString(params, DescribeAccessPointsRequest.class);                          DescribeAccessPointsResponse resp = client.DescribeAccessPoints(req);                          System.out.println(DescribeAccessPointsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
655,专线接入,专线接入相关接口,修改物理专线属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.DescribeDirectConnectsRequest; import com.tencentcloudapi.dc.v20180410.models.DescribeDirectConnectsResponse;  public class DescribeDirectConnects {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDirectConnectsRequest req = DescribeDirectConnectsRequest.fromJsonString(params, DescribeDirectConnectsRequest.class);                          DescribeDirectConnectsResponse resp = client.DescribeDirectConnects(req);                          System.out.println(DescribeDirectConnectsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
656,专线接入,专线接入相关接口,修改专用通道属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.DescribeDirectConnectTunnelsRequest; import com.tencentcloudapi.dc.v20180410.models.DescribeDirectConnectTunnelsResponse;  public class DescribeDirectConnectTunnels {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDirectConnectTunnelsRequest req = DescribeDirectConnectTunnelsRequest.fromJsonString(params, DescribeDirectConnectTunnelsRequest.class);                          DescribeDirectConnectTunnelsResponse resp = client.DescribeDirectConnectTunnels(req);                          System.out.println(DescribeDirectConnectTunnelsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
657,专线接入,专线接入相关接口,拒绝专用通道申请,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.ModifyDirectConnectAttributeRequest; import com.tencentcloudapi.dc.v20180410.models.ModifyDirectConnectAttributeResponse;  public class ModifyDirectConnectAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDirectConnectAttributeRequest req = ModifyDirectConnectAttributeRequest.fromJsonString(params, ModifyDirectConnectAttributeRequest.class);                          ModifyDirectConnectAttributeResponse resp = client.ModifyDirectConnectAttribute(req);                          System.out.println(ModifyDirectConnectAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
658,云数据库 MySQL,任务相关接口,查询异步任务的执行结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.RejectDirectConnectTunnelRequest; import com.tencentcloudapi.dc.v20180410.models.RejectDirectConnectTunnelResponse;  public class RejectDirectConnectTunnel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectDirectConnectTunnelRequest req = RejectDirectConnectTunnelRequest.fromJsonString(params, RejectDirectConnectTunnelRequest.class);                          RejectDirectConnectTunnelResponse resp = client.RejectDirectConnectTunnel(req);                          System.out.println(RejectDirectConnectTunnelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
659,云数据库 MySQL,任务相关接口,查询云数据库实例任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dc.v20180410.DcClient;  import com.tencentcloudapi.dc.v20180410.models.RejectDirectConnectTunnelRequest; import com.tencentcloudapi.dc.v20180410.models.RejectDirectConnectTunnelResponse;  public class RejectDirectConnectTunnel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcClient client = new DcClient(cred, """", clientProfile);                          String params = ""{}"";             RejectDirectConnectTunnelRequest req = RejectDirectConnectTunnelRequest.fromJsonString(params, RejectDirectConnectTunnelRequest.class);                          RejectDirectConnectTunnelResponse resp = client.RejectDirectConnectTunnel(req);                          System.out.println(RejectDirectConnectTunnelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
660,云数据库 MySQL,参数相关接口,创建参数模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeAsyncRequestInfoRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeAsyncRequestInfoResponse;  public class DescribeAsyncRequestInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAsyncRequestInfoRequest req = DescribeAsyncRequestInfoRequest.fromJsonString(params, DescribeAsyncRequestInfoRequest.class);                          DescribeAsyncRequestInfoResponse resp = client.DescribeAsyncRequestInfo(req);                          System.out.println(DescribeAsyncRequestInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
661,云数据库 MySQL,参数相关接口,删除参数模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeTasksRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
662,云数据库 MySQL,参数相关接口,查询默认的可设置参数列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeTasksRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
663,云数据库 MySQL,参数相关接口,查询实例参数修改历史,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DeleteParamTemplateRequest; import com.tencentcloudapi.cdb.v20170320.models.DeleteParamTemplateResponse;  public class DeleteParamTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteParamTemplateRequest req = DeleteParamTemplateRequest.fromJsonString(params, DeleteParamTemplateRequest.class);                          DeleteParamTemplateResponse resp = client.DeleteParamTemplate(req);                          System.out.println(DeleteParamTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
664,云数据库 MySQL,参数相关接口,查询实例的可设置参数列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDefaultParamsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDefaultParamsResponse;  public class DescribeDefaultParams {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDefaultParamsRequest req = DescribeDefaultParamsRequest.fromJsonString(params, DescribeDefaultParamsRequest.class);                          DescribeDefaultParamsResponse resp = client.DescribeDefaultParams(req);                          System.out.println(DescribeDefaultParamsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
665,云数据库 MySQL,参数相关接口,查询参数模板详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeInstanceParamRecordsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeInstanceParamRecordsResponse;  public class DescribeInstanceParamRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceParamRecordsRequest req = DescribeInstanceParamRecordsRequest.fromJsonString(params, DescribeInstanceParamRecordsRequest.class);                          DescribeInstanceParamRecordsResponse resp = client.DescribeInstanceParamRecords(req);                          System.out.println(DescribeInstanceParamRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
666,云数据库 MySQL,参数相关接口,查询参数模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeInstanceParamsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeInstanceParamsResponse;  public class DescribeInstanceParams {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceParamsRequest req = DescribeInstanceParamsRequest.fromJsonString(params, DescribeInstanceParamsRequest.class);                          DescribeInstanceParamsResponse resp = client.DescribeInstanceParams(req);                          System.out.println(DescribeInstanceParamsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
667,云数据库 MySQL,参数相关接口,修改实例参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeParamTemplateInfoRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeParamTemplateInfoResponse;  public class DescribeParamTemplateInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeParamTemplateInfoRequest req = DescribeParamTemplateInfoRequest.fromJsonString(params, DescribeParamTemplateInfoRequest.class);                          DescribeParamTemplateInfoResponse resp = client.DescribeParamTemplateInfo(req);                          System.out.println(DescribeParamTemplateInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
668,云数据库 MySQL,参数相关接口,修改参数模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeParamTemplatesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeParamTemplatesResponse;  public class DescribeParamTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeParamTemplatesRequest req = DescribeParamTemplatesRequest.fromJsonString(params, DescribeParamTemplatesRequest.class);                          DescribeParamTemplatesResponse resp = client.DescribeParamTemplates(req);                          System.out.println(DescribeParamTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
669,云数据库 MySQL,回档相关接口,查询可回档时间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyParamTemplateRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyParamTemplateResponse;  public class ModifyParamTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyParamTemplateRequest req = ModifyParamTemplateRequest.fromJsonString(params, ModifyParamTemplateRequest.class);                          ModifyParamTemplateResponse resp = client.ModifyParamTemplate(req);                          System.out.println(ModifyParamTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
670,云数据库 MySQL,回档相关接口,回档数据库表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyParamTemplateRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyParamTemplateResponse;  public class ModifyParamTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyParamTemplateRequest req = ModifyParamTemplateRequest.fromJsonString(params, ModifyParamTemplateRequest.class);                          ModifyParamTemplateResponse resp = client.ModifyParamTemplate(req);                          System.out.println(ModifyParamTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
671,云数据库 MySQL,备份相关接口,创建云数据库备份,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.StartBatchRollbackRequest; import com.tencentcloudapi.cdb.v20170320.models.StartBatchRollbackResponse;  public class StartBatchRollback {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             StartBatchRollbackRequest req = StartBatchRollbackRequest.fromJsonString(params, StartBatchRollbackRequest.class);                          StartBatchRollbackResponse resp = client.StartBatchRollback(req);                          System.out.println(StartBatchRollbackRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
672,云数据库 MySQL,备份相关接口,删除云数据库备份,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.StartBatchRollbackRequest; import com.tencentcloudapi.cdb.v20170320.models.StartBatchRollbackResponse;  public class StartBatchRollback {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             StartBatchRollbackRequest req = StartBatchRollbackRequest.fromJsonString(params, StartBatchRollbackRequest.class);                          StartBatchRollbackResponse resp = client.StartBatchRollback(req);                          System.out.println(StartBatchRollbackRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
673,云数据库 MySQL,备份相关接口,查询云数据库备份配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateBackupRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateBackupResponse;  public class CreateBackup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateBackupRequest req = CreateBackupRequest.fromJsonString(params, CreateBackupRequest.class);                          CreateBackupResponse resp = client.CreateBackup(req);                          System.out.println(CreateBackupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
674,云数据库 MySQL,备份相关接口,查询备份数据库列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DeleteBackupRequest; import com.tencentcloudapi.cdb.v20170320.models.DeleteBackupResponse;  public class DeleteBackup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteBackupRequest req = DeleteBackupRequest.fromJsonString(params, DeleteBackupRequest.class);                          DeleteBackupResponse resp = client.DeleteBackup(req);                          System.out.println(DeleteBackupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
675,云数据库 MySQL,备份相关接口,查询备份日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupConfigRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupConfigResponse;  public class DescribeBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupConfigRequest req = DescribeBackupConfigRequest.fromJsonString(params, DescribeBackupConfigRequest.class);                          DescribeBackupConfigResponse resp = client.DescribeBackupConfig(req);                          System.out.println(DescribeBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
676,云数据库 MySQL,备份相关接口,查询指定数据库的备份数据表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupDatabasesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupDatabasesResponse;  public class DescribeBackupDatabases {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupDatabasesRequest req = DescribeBackupDatabasesRequest.fromJsonString(params, DescribeBackupDatabasesRequest.class);                          DescribeBackupDatabasesResponse resp = client.DescribeBackupDatabases(req);                          System.out.println(DescribeBackupDatabasesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
677,云数据库 MySQL,备份相关接口,查询二进制日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupsResponse;  public class DescribeBackups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupsRequest req = DescribeBackupsRequest.fromJsonString(params, DescribeBackupsRequest.class);                          DescribeBackupsResponse resp = client.DescribeBackups(req);                          System.out.println(DescribeBackupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
678,云数据库 MySQL,备份相关接口,查询慢查询日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupTablesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeBackupTablesResponse;  public class DescribeBackupTables {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupTablesRequest req = DescribeBackupTablesRequest.fromJsonString(params, DescribeBackupTablesRequest.class);                          DescribeBackupTablesResponse resp = client.DescribeBackupTables(req);                          System.out.println(DescribeBackupTablesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
679,云数据库 MySQL,备份相关接口,修改数据库备份配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeBinlogsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeBinlogsResponse;  public class DescribeBinlogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBinlogsRequest req = DescribeBinlogsRequest.fromJsonString(params, DescribeBinlogsRequest.class);                          DescribeBinlogsResponse resp = client.DescribeBinlogs(req);                          System.out.println(DescribeBinlogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
680,云数据库 MySQL,安全组相关接口,安全组批量绑定云资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyBackupConfigRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyBackupConfigResponse;  public class ModifyBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyBackupConfigRequest req = ModifyBackupConfigRequest.fromJsonString(params, ModifyBackupConfigRequest.class);                          ModifyBackupConfigResponse resp = client.ModifyBackupConfig(req);                          System.out.println(ModifyBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
681,云数据库 MySQL,安全组相关接口,查询实例安全组信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyBackupConfigRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyBackupConfigResponse;  public class ModifyBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyBackupConfigRequest req = ModifyBackupConfigRequest.fromJsonString(params, ModifyBackupConfigRequest.class);                          ModifyBackupConfigResponse resp = client.ModifyBackupConfig(req);                          System.out.println(ModifyBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
682,云数据库 MySQL,安全组相关接口,查询项目安全组信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.AssociateSecurityGroupsRequest; import com.tencentcloudapi.cdb.v20170320.models.AssociateSecurityGroupsResponse;  public class AssociateSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             AssociateSecurityGroupsRequest req = AssociateSecurityGroupsRequest.fromJsonString(params, AssociateSecurityGroupsRequest.class);                          AssociateSecurityGroupsResponse resp = client.AssociateSecurityGroups(req);                          System.out.println(AssociateSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
683,云数据库 MySQL,安全组相关接口,安全组批量解绑云资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSecurityGroupsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSecurityGroupsResponse;  public class DescribeDBSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSecurityGroupsRequest req = DescribeDBSecurityGroupsRequest.fromJsonString(params, DescribeDBSecurityGroupsRequest.class);                          DescribeDBSecurityGroupsResponse resp = client.DescribeDBSecurityGroups(req);                          System.out.println(DescribeDBSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
684,云数据库 MySQL,安全组相关接口,修改云数据库安全组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeProjectSecurityGroupsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeProjectSecurityGroupsResponse;  public class DescribeProjectSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProjectSecurityGroupsRequest req = DescribeProjectSecurityGroupsRequest.fromJsonString(params, DescribeProjectSecurityGroupsRequest.class);                          DescribeProjectSecurityGroupsResponse resp = client.DescribeProjectSecurityGroups(req);                          System.out.println(DescribeProjectSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
685,云数据库 MySQL,实例相关接口,添加维护时间窗口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DisassociateSecurityGroupsRequest; import com.tencentcloudapi.cdb.v20170320.models.DisassociateSecurityGroupsResponse;  public class DisassociateSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DisassociateSecurityGroupsRequest req = DisassociateSecurityGroupsRequest.fromJsonString(params, DisassociateSecurityGroupsRequest.class);                          DisassociateSecurityGroupsResponse resp = client.DisassociateSecurityGroups(req);                          System.out.println(DisassociateSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
686,云数据库 MySQL,实例相关接口,关闭实例外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceSecurityGroupsRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceSecurityGroupsResponse;  public class ModifyDBInstanceSecurityGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceSecurityGroupsRequest req = ModifyDBInstanceSecurityGroupsRequest.fromJsonString(params, ModifyDBInstanceSecurityGroupsRequest.class);                          ModifyDBInstanceSecurityGroupsResponse resp = client.ModifyDBInstanceSecurityGroups(req);                          System.out.println(ModifyDBInstanceSecurityGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
687,云数据库 MySQL,实例相关接口,创建云数据库实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.AddTimeWindowRequest; import com.tencentcloudapi.cdb.v20170320.models.AddTimeWindowResponse;  public class AddTimeWindow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             AddTimeWindowRequest req = AddTimeWindowRequest.fromJsonString(params, AddTimeWindowRequest.class);                          AddTimeWindowResponse resp = client.AddTimeWindow(req);                          System.out.println(AddTimeWindowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
688,云数据库 MySQL,实例相关接口,创建云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateDBInstanceRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateDBInstanceResponse;  public class CreateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceRequest req = CreateDBInstanceRequest.fromJsonString(params, CreateDBInstanceRequest.class);                          CreateDBInstanceResponse resp = client.CreateDBInstance(req);                          System.out.println(CreateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
689,云数据库 MySQL,实例相关接口,创建置放群组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateDBInstanceRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateDBInstanceResponse;  public class CreateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceRequest req = CreateDBInstanceRequest.fromJsonString(params, CreateDBInstanceRequest.class);                          CreateDBInstanceResponse resp = client.CreateDBInstance(req);                          System.out.println(CreateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
690,云数据库 MySQL,实例相关接口,删除置放群组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateDeployGroupRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateDeployGroupResponse;  public class CreateDeployGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDeployGroupRequest req = CreateDeployGroupRequest.fromJsonString(params, CreateDeployGroupRequest.class);                          CreateDeployGroupResponse resp = client.CreateDeployGroup(req);                          System.out.println(CreateDeployGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
691,云数据库 MySQL,实例相关接口,删除维护时间窗口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateDeployGroupRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateDeployGroupResponse;  public class CreateDeployGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDeployGroupRequest req = CreateDeployGroupRequest.fromJsonString(params, CreateDeployGroupRequest.class);                          CreateDeployGroupResponse resp = client.CreateDeployGroup(req);                          System.out.println(CreateDeployGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
692,云数据库 MySQL,实例相关接口,查询云数据库实例的字符集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DeleteTimeWindowRequest; import com.tencentcloudapi.cdb.v20170320.models.DeleteTimeWindowResponse;  public class DeleteTimeWindow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTimeWindowRequest req = DeleteTimeWindowRequest.fromJsonString(params, DeleteTimeWindowRequest.class);                          DeleteTimeWindowResponse resp = client.DeleteTimeWindow(req);                          System.out.println(DeleteTimeWindowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
693,云数据库 MySQL,实例相关接口,查询云数据库实例的配置信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DeleteTimeWindowRequest; import com.tencentcloudapi.cdb.v20170320.models.DeleteTimeWindowResponse;  public class DeleteTimeWindow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTimeWindowRequest req = DeleteTimeWindowRequest.fromJsonString(params, DeleteTimeWindowRequest.class);                          DeleteTimeWindowResponse resp = client.DeleteTimeWindow(req);                          System.out.println(DeleteTimeWindowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
694,云数据库 MySQL,实例相关接口,查询云数据实例的GTID是否开通,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceCharsetRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceCharsetResponse;  public class DescribeDBInstanceCharset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceCharsetRequest req = DescribeDBInstanceCharsetRequest.fromJsonString(params, DescribeDBInstanceCharsetRequest.class);                          DescribeDBInstanceCharsetResponse resp = client.DescribeDBInstanceCharset(req);                          System.out.println(DescribeDBInstanceCharsetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
695,云数据库 MySQL,实例相关接口,查询云数据库实例的预期重启时间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceConfigRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceConfigResponse;  public class DescribeDBInstanceConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceConfigRequest req = DescribeDBInstanceConfigRequest.fromJsonString(params, DescribeDBInstanceConfigRequest.class);                          DescribeDBInstanceConfigResponse resp = client.DescribeDBInstanceConfig(req);                          System.out.println(DescribeDBInstanceConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
696,云数据库 MySQL,实例相关接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceGTIDRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstanceGTIDResponse;  public class DescribeDBInstanceGTID {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceGTIDRequest req = DescribeDBInstanceGTIDRequest.fromJsonString(params, DescribeDBInstanceGTIDRequest.class);                          DescribeDBInstanceGTIDResponse resp = client.DescribeDBInstanceGTID(req);                          System.out.println(DescribeDBInstanceGTIDRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
697,云数据库 MySQL,实例相关接口,查询数据库价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBInstancesResponse;  public class DescribeDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstancesRequest req = DescribeDBInstancesRequest.fromJsonString(params, DescribeDBInstancesRequest.class);                          DescribeDBInstancesResponse resp = client.DescribeDBInstances(req);                          System.out.println(DescribeDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
698,云数据库 MySQL,实例相关接口,查询云数据库切换记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBPriceRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBPriceResponse;  public class DescribeDBPrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBPriceRequest req = DescribeDBPriceRequest.fromJsonString(params, DescribeDBPriceRequest.class);                          DescribeDBPriceResponse resp = client.DescribeDBPrice(req);                          System.out.println(DescribeDBPriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
699,云数据库 MySQL,实例相关接口,获取云数据库可售卖规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSwitchRecordsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSwitchRecordsResponse;  public class DescribeDBSwitchRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSwitchRecordsRequest req = DescribeDBSwitchRecordsRequest.fromJsonString(params, DescribeDBSwitchRecordsRequest.class);                          DescribeDBSwitchRecordsResponse resp = client.DescribeDBSwitchRecords(req);                          System.out.println(DescribeDBSwitchRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
700,云数据库 MySQL,实例相关接口,查询置放群组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSwitchRecordsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBSwitchRecordsResponse;  public class DescribeDBSwitchRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSwitchRecordsRequest req = DescribeDBSwitchRecordsRequest.fromJsonString(params, DescribeDBSwitchRecordsRequest.class);                          DescribeDBSwitchRecordsResponse resp = client.DescribeDBSwitchRecords(req);                          System.out.println(DescribeDBSwitchRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
701,云数据库 MySQL,实例相关接口,获取实例绑定的标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBZoneConfigRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBZoneConfigResponse;  public class DescribeDBZoneConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBZoneConfigRequest req = DescribeDBZoneConfigRequest.fromJsonString(params, DescribeDBZoneConfigRequest.class);                          DescribeDBZoneConfigResponse resp = client.DescribeDBZoneConfig(req);                          System.out.println(DescribeDBZoneConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
702,云数据库 MySQL,实例相关接口,查询维护时间窗口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDeployGroupListRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDeployGroupListResponse;  public class DescribeDeployGroupList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeployGroupListRequest req = DescribeDeployGroupListRequest.fromJsonString(params, DescribeDeployGroupListRequest.class);                          DescribeDeployGroupListResponse resp = client.DescribeDeployGroupList(req);                          System.out.println(DescribeDeployGroupListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
703,云数据库 MySQL,实例相关接口,初始化新实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeTagsOfInstanceIdsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeTagsOfInstanceIdsResponse;  public class DescribeTagsOfInstanceIds {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTagsOfInstanceIdsRequest req = DescribeTagsOfInstanceIdsRequest.fromJsonString(params, DescribeTagsOfInstanceIdsRequest.class);                          DescribeTagsOfInstanceIdsResponse resp = client.DescribeTagsOfInstanceIds(req);                          System.out.println(DescribeTagsOfInstanceIdsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
704,云数据库 MySQL,实例相关接口,查询数据库升级价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.InitDBInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.InitDBInstancesResponse;  public class InitDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             InitDBInstancesRequest req = InitDBInstancesRequest.fromJsonString(params, InitDBInstancesRequest.class);                          InitDBInstancesResponse resp = client.InitDBInstances(req);                          System.out.println(InitDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
705,云数据库 MySQL,实例相关接口,隔离云数据库实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.InitDBInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.InitDBInstancesResponse;  public class InitDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             InitDBInstancesRequest req = InitDBInstancesRequest.fromJsonString(params, InitDBInstancesRequest.class);                          InitDBInstancesResponse resp = client.InitDBInstances(req);                          System.out.println(InitDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
706,云数据库 MySQL,实例相关接口,修改云数据库实例的自动续费标记,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.InquiryPriceUpgradeInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.InquiryPriceUpgradeInstancesResponse;  public class InquiryPriceUpgradeInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceUpgradeInstancesRequest req = InquiryPriceUpgradeInstancesRequest.fromJsonString(params, InquiryPriceUpgradeInstancesRequest.class);                          InquiryPriceUpgradeInstancesResponse resp = client.InquiryPriceUpgradeInstances(req);                          System.out.println(InquiryPriceUpgradeInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
707,云数据库 MySQL,实例相关接口,修改云数据库实例名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.IsolateDBInstanceRequest; import com.tencentcloudapi.cdb.v20170320.models.IsolateDBInstanceResponse;  public class IsolateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             IsolateDBInstanceRequest req = IsolateDBInstanceRequest.fromJsonString(params, IsolateDBInstanceRequest.class);                          IsolateDBInstanceResponse resp = client.IsolateDBInstance(req);                          System.out.println(IsolateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
708,云数据库 MySQL,实例相关接口,修改云数据库实例的所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyAutoRenewFlagRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyAutoRenewFlagResponse;  public class ModifyAutoRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoRenewFlagRequest req = ModifyAutoRenewFlagRequest.fromJsonString(params, ModifyAutoRenewFlagRequest.class);                          ModifyAutoRenewFlagResponse resp = client.ModifyAutoRenewFlag(req);                          System.out.println(ModifyAutoRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
709,云数据库 MySQL,实例相关接口,修改云数据库实例的IP和端口号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceNameRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceNameResponse;  public class ModifyDBInstanceName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceNameRequest req = ModifyDBInstanceNameRequest.fromJsonString(params, ModifyDBInstanceNameRequest.class);                          ModifyDBInstanceNameResponse resp = client.ModifyDBInstanceName(req);                          System.out.println(ModifyDBInstanceNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
710,云数据库 MySQL,实例相关接口,修改实例标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceProjectRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceProjectResponse;  public class ModifyDBInstanceProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceProjectRequest req = ModifyDBInstanceProjectRequest.fromJsonString(params, ModifyDBInstanceProjectRequest.class);                          ModifyDBInstanceProjectResponse resp = client.ModifyDBInstanceProject(req);                          System.out.println(ModifyDBInstanceProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
711,云数据库 MySQL,实例相关接口,修改置放群组的名称或者描述,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceVipVportRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyDBInstanceVipVportResponse;  public class ModifyDBInstanceVipVport {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceVipVportRequest req = ModifyDBInstanceVipVportRequest.fromJsonString(params, ModifyDBInstanceVipVportRequest.class);                          ModifyDBInstanceVipVportResponse resp = client.ModifyDBInstanceVipVport(req);                          System.out.println(ModifyDBInstanceVipVportRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
712,云数据库 MySQL,实例相关接口,更新维护时间窗口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyInstanceTagRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyInstanceTagResponse;  public class ModifyInstanceTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstanceTagRequest req = ModifyInstanceTagRequest.fromJsonString(params, ModifyInstanceTagRequest.class);                          ModifyInstanceTagResponse resp = client.ModifyInstanceTag(req);                          System.out.println(ModifyInstanceTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
713,云数据库 MySQL,实例相关接口,下线隔离状态的云数据库实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyNameOrDescByDpIdRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyNameOrDescByDpIdResponse;  public class ModifyNameOrDescByDpId {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNameOrDescByDpIdRequest req = ModifyNameOrDescByDpIdRequest.fromJsonString(params, ModifyNameOrDescByDpIdRequest.class);                          ModifyNameOrDescByDpIdResponse resp = client.ModifyNameOrDescByDpId(req);                          System.out.println(ModifyNameOrDescByDpIdRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
714,云数据库 MySQL,实例相关接口,开启实例的GTID,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyTimeWindowRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyTimeWindowResponse;  public class ModifyTimeWindow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTimeWindowRequest req = ModifyTimeWindowRequest.fromJsonString(params, ModifyTimeWindowRequest.class);                          ModifyTimeWindowResponse resp = client.ModifyTimeWindow(req);                          System.out.println(ModifyTimeWindowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
715,云数据库 MySQL,实例相关接口,开通实例外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.OfflineIsolatedInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.OfflineIsolatedInstancesResponse;  public class OfflineIsolatedInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             OfflineIsolatedInstancesRequest req = OfflineIsolatedInstancesRequest.fromJsonString(params, OfflineIsolatedInstancesRequest.class);                          OfflineIsolatedInstancesResponse resp = client.OfflineIsolatedInstances(req);                          System.out.println(OfflineIsolatedInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
716,云数据库 MySQL,实例相关接口,续费云数据库实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.OpenDBInstanceGTIDRequest; import com.tencentcloudapi.cdb.v20170320.models.OpenDBInstanceGTIDResponse;  public class OpenDBInstanceGTID {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             OpenDBInstanceGTIDRequest req = OpenDBInstanceGTIDRequest.fromJsonString(params, OpenDBInstanceGTIDRequest.class);                          OpenDBInstanceGTIDResponse resp = client.OpenDBInstanceGTID(req);                          System.out.println(OpenDBInstanceGTIDRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
717,云数据库 MySQL,实例相关接口,重启实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.OpenWanServiceRequest; import com.tencentcloudapi.cdb.v20170320.models.OpenWanServiceResponse;  public class OpenWanService {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             OpenWanServiceRequest req = OpenWanServiceRequest.fromJsonString(params, OpenWanServiceRequest.class);                          OpenWanServiceResponse resp = client.OpenWanService(req);                          System.out.println(OpenWanServiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
718,云数据库 MySQL,实例相关接口,切换访问新实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.RenewDBInstanceRequest; import com.tencentcloudapi.cdb.v20170320.models.RenewDBInstanceResponse;  public class RenewDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             RenewDBInstanceRequest req = RenewDBInstanceRequest.fromJsonString(params, RenewDBInstanceRequest.class);                          RenewDBInstanceResponse resp = client.RenewDBInstance(req);                          System.out.println(RenewDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
719,云数据库 MySQL,实例相关接口,调整云数据库实例的配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.RestartDBInstancesRequest; import com.tencentcloudapi.cdb.v20170320.models.RestartDBInstancesResponse;  public class RestartDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             RestartDBInstancesRequest req = RestartDBInstancesRequest.fromJsonString(params, RestartDBInstancesRequest.class);                          RestartDBInstancesResponse resp = client.RestartDBInstances(req);                          System.out.println(RestartDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
720,云数据库 MySQL,实例相关接口,升级实例版本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.SwitchForUpgradeRequest; import com.tencentcloudapi.cdb.v20170320.models.SwitchForUpgradeResponse;  public class SwitchForUpgrade {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             SwitchForUpgradeRequest req = SwitchForUpgradeRequest.fromJsonString(params, SwitchForUpgradeRequest.class);                          SwitchForUpgradeResponse resp = client.SwitchForUpgrade(req);                          System.out.println(SwitchForUpgradeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
721,云数据库 MySQL,数据导入相关接口,创建数据导入任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.UpgradeDBInstanceEngineVersionRequest; import com.tencentcloudapi.cdb.v20170320.models.UpgradeDBInstanceEngineVersionResponse;  public class UpgradeDBInstanceEngineVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceEngineVersionRequest req = UpgradeDBInstanceEngineVersionRequest.fromJsonString(params, UpgradeDBInstanceEngineVersionRequest.class);                          UpgradeDBInstanceEngineVersionResponse resp = client.UpgradeDBInstanceEngineVersion(req);                          System.out.println(UpgradeDBInstanceEngineVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
722,云数据库 MySQL,数据导入相关接口,查询数据库导入任务记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.UpgradeDBInstanceEngineVersionRequest; import com.tencentcloudapi.cdb.v20170320.models.UpgradeDBInstanceEngineVersionResponse;  public class UpgradeDBInstanceEngineVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceEngineVersionRequest req = UpgradeDBInstanceEngineVersionRequest.fromJsonString(params, UpgradeDBInstanceEngineVersionRequest.class);                          UpgradeDBInstanceEngineVersionResponse resp = client.UpgradeDBInstanceEngineVersion(req);                          System.out.println(UpgradeDBInstanceEngineVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
723,云数据库 MySQL,数据导入相关接口,查询导入SQL文件列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateDBImportJobRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateDBImportJobResponse;  public class CreateDBImportJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBImportJobRequest req = CreateDBImportJobRequest.fromJsonString(params, CreateDBImportJobRequest.class);                          CreateDBImportJobResponse resp = client.CreateDBImportJob(req);                          System.out.println(CreateDBImportJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
724,云数据库 MySQL,数据导入相关接口,终止数据导入任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDBImportRecordsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDBImportRecordsResponse;  public class DescribeDBImportRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBImportRecordsRequest req = DescribeDBImportRecordsRequest.fromJsonString(params, DescribeDBImportRecordsRequest.class);                          DescribeDBImportRecordsResponse resp = client.DescribeDBImportRecords(req);                          System.out.println(DescribeDBImportRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
725,云数据库 MySQL,数据库相关接口,查询数据库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.StopDBImportJobRequest; import com.tencentcloudapi.cdb.v20170320.models.StopDBImportJobResponse;  public class StopDBImportJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             StopDBImportJobRequest req = StopDBImportJobRequest.fromJsonString(params, StopDBImportJobRequest.class);                          StopDBImportJobResponse resp = client.StopDBImportJob(req);                          System.out.println(StopDBImportJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
726,云数据库 MySQL,数据库相关接口,查询数据库表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.StopDBImportJobRequest; import com.tencentcloudapi.cdb.v20170320.models.StopDBImportJobResponse;  public class StopDBImportJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             StopDBImportJobRequest req = StopDBImportJobRequest.fromJsonString(params, StopDBImportJobRequest.class);                          StopDBImportJobResponse resp = client.StopDBImportJob(req);                          System.out.println(StopDBImportJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
727,云数据库 MySQL,监控相关接口,物理机监控信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeTablesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeTablesResponse;  public class DescribeTables {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTablesRequest req = DescribeTablesRequest.fromJsonString(params, DescribeTablesRequest.class);                          DescribeTablesResponse resp = client.DescribeTables(req);                          System.out.println(DescribeTablesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
728,云数据库 MySQL,账号相关接口,创建云数据库的账户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeTablesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeTablesResponse;  public class DescribeTables {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTablesRequest req = DescribeTablesRequest.fromJsonString(params, DescribeTablesRequest.class);                          DescribeTablesResponse resp = client.DescribeTables(req);                          System.out.println(DescribeTablesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
729,云数据库 MySQL,账号相关接口,删除云数据库的账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeDeviceMonitorInfoRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeDeviceMonitorInfoResponse;  public class DescribeDeviceMonitorInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceMonitorInfoRequest req = DescribeDeviceMonitorInfoRequest.fromJsonString(params, DescribeDeviceMonitorInfoRequest.class);                          DescribeDeviceMonitorInfoResponse resp = client.DescribeDeviceMonitorInfo(req);                          System.out.println(DescribeDeviceMonitorInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
730,云数据库 MySQL,账号相关接口,查询云数据库账户的权限信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.CreateAccountsRequest; import com.tencentcloudapi.cdb.v20170320.models.CreateAccountsResponse;  public class CreateAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAccountsRequest req = CreateAccountsRequest.fromJsonString(params, CreateAccountsRequest.class);                          CreateAccountsResponse resp = client.CreateAccounts(req);                          System.out.println(CreateAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
731,云数据库 MySQL,账号相关接口,查询云数据库的所有账号信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DeleteAccountsRequest; import com.tencentcloudapi.cdb.v20170320.models.DeleteAccountsResponse;  public class DeleteAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccountsRequest req = DeleteAccountsRequest.fromJsonString(params, DeleteAccountsRequest.class);                          DeleteAccountsResponse resp = client.DeleteAccounts(req);                          System.out.println(DeleteAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
732,云数据库 MySQL,账号相关接口,查询云数据库实例支持的权限信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeAccountPrivilegesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeAccountPrivilegesResponse;  public class DescribeAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountPrivilegesRequest req = DescribeAccountPrivilegesRequest.fromJsonString(params, DescribeAccountPrivilegesRequest.class);                          DescribeAccountPrivilegesResponse resp = client.DescribeAccountPrivileges(req);                          System.out.println(DescribeAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
733,云数据库 MySQL,账号相关接口,修改云数据库实例账号的备注信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeAccountsRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
734,云数据库 MySQL,账号相关接口,修改云数据库实例账号的密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.DescribeSupportedPrivilegesRequest; import com.tencentcloudapi.cdb.v20170320.models.DescribeSupportedPrivilegesResponse;  public class DescribeSupportedPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSupportedPrivilegesRequest req = DescribeSupportedPrivilegesRequest.fromJsonString(params, DescribeSupportedPrivilegesRequest.class);                          DescribeSupportedPrivilegesResponse resp = client.DescribeSupportedPrivileges(req);                          System.out.println(DescribeSupportedPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
735,云数据库 MySQL,账号相关接口,修改云数据库实例账号的权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyAccountDescriptionRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyAccountDescriptionResponse;  public class ModifyAccountDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountDescriptionRequest req = ModifyAccountDescriptionRequest.fromJsonString(params, ModifyAccountDescriptionRequest.class);                          ModifyAccountDescriptionResponse resp = client.ModifyAccountDescription(req);                          System.out.println(ModifyAccountDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
736,云数据库 MySQL,账号相关接口,验证root账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.ModifyAccountPasswordRequest; import com.tencentcloudapi.cdb.v20170320.models.ModifyAccountPasswordResponse;  public class ModifyAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountPasswordRequest req = ModifyAccountPasswordRequest.fromJsonString(params, ModifyAccountPasswordRequest.class);                          ModifyAccountPasswordResponse resp = client.ModifyAccountPassword(req);                          System.out.println(ModifyAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
737,云数据库 MariaDB,参数管理相关接口,查看数据库参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.VerifyRootAccountRequest; import com.tencentcloudapi.cdb.v20170320.models.VerifyRootAccountResponse;  public class VerifyRootAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             VerifyRootAccountRequest req = VerifyRootAccountRequest.fromJsonString(params, VerifyRootAccountRequest.class);                          VerifyRootAccountResponse resp = client.VerifyRootAccount(req);                          System.out.println(VerifyRootAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
738,云数据库 MariaDB,参数管理相关接口,查看备份日志备份天数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdb.v20170320.CdbClient;  import com.tencentcloudapi.cdb.v20170320.models.VerifyRootAccountRequest; import com.tencentcloudapi.cdb.v20170320.models.VerifyRootAccountResponse;  public class VerifyRootAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdbClient client = new CdbClient(cred, """", clientProfile);                          String params = ""{}"";             VerifyRootAccountRequest req = VerifyRootAccountRequest.fromJsonString(params, VerifyRootAccountRequest.class);                          VerifyRootAccountResponse resp = client.VerifyRootAccount(req);                          System.out.println(VerifyRootAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
739,云数据库 MariaDB,参数管理相关接口,修改数据库参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBParametersRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBParametersResponse;  public class DescribeDBParameters {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBParametersRequest req = DescribeDBParametersRequest.fromJsonString(params, DescribeDBParametersRequest.class);                          DescribeDBParametersResponse resp = client.DescribeDBParameters(req);                          System.out.println(DescribeDBParametersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
740,云数据库 MariaDB,参数管理相关接口,修改备份日志保存天数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeLogFileRetentionPeriodRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeLogFileRetentionPeriodResponse;  public class DescribeLogFileRetentionPeriod {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLogFileRetentionPeriodRequest req = DescribeLogFileRetentionPeriodRequest.fromJsonString(params, DescribeLogFileRetentionPeriodRequest.class);                          DescribeLogFileRetentionPeriodResponse resp = client.DescribeLogFileRetentionPeriod(req);                          System.out.println(DescribeLogFileRetentionPeriodRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
741,云数据库 MariaDB,备份与恢复相关接口,获取日志列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyLogFileRetentionPeriodRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyLogFileRetentionPeriodResponse;  public class ModifyLogFileRetentionPeriod {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLogFileRetentionPeriodRequest req = ModifyLogFileRetentionPeriodRequest.fromJsonString(params, ModifyLogFileRetentionPeriodRequest.class);                          ModifyLogFileRetentionPeriodResponse resp = client.ModifyLogFileRetentionPeriod(req);                          System.out.println(ModifyLogFileRetentionPeriodRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
742,云数据库 MariaDB,实例管理相关接口,关闭外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBLogFilesRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBLogFilesResponse;  public class DescribeDBLogFiles {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBLogFilesRequest req = DescribeDBLogFilesRequest.fromJsonString(params, DescribeDBLogFilesRequest.class);                          DescribeDBLogFilesResponse resp = client.DescribeDBLogFiles(req);                          System.out.println(DescribeDBLogFilesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
743,云数据库 MariaDB,实例管理相关接口,创建实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBLogFilesRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBLogFilesResponse;  public class DescribeDBLogFiles {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBLogFilesRequest req = DescribeDBLogFilesRequest.fromJsonString(params, DescribeDBLogFilesRequest.class);                          DescribeDBLogFilesResponse resp = client.DescribeDBLogFiles(req);                          System.out.println(DescribeDBLogFilesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
744,云数据库 MariaDB,实例管理相关接口,查询备份时间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.CreateDBInstanceRequest; import com.tencentcloudapi.mariadb.v20170312.models.CreateDBInstanceResponse;  public class CreateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceRequest req = CreateDBInstanceRequest.fromJsonString(params, CreateDBInstanceRequest.class);                          CreateDBInstanceResponse resp = client.CreateDBInstance(req);                          System.out.println(CreateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
745,云数据库 MariaDB,实例管理相关接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.CreateDBInstanceRequest; import com.tencentcloudapi.mariadb.v20170312.models.CreateDBInstanceResponse;  public class CreateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceRequest req = CreateDBInstanceRequest.fromJsonString(params, CreateDBInstanceRequest.class);                          CreateDBInstanceResponse resp = client.CreateDBInstance(req);                          System.out.println(CreateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
746,云数据库 MariaDB,实例管理相关接口,查询云数据库可售卖规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeBackupTimeRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeBackupTimeResponse;  public class DescribeBackupTime {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupTimeRequest req = DescribeBackupTimeRequest.fromJsonString(params, DescribeBackupTimeRequest.class);                          DescribeBackupTimeResponse resp = client.DescribeBackupTime(req);                          System.out.println(DescribeBackupTimeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
747,云数据库 MariaDB,实例管理相关接口,查询流程状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBInstanceSpecsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBInstanceSpecsResponse;  public class DescribeDBInstanceSpecs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceSpecsRequest req = DescribeDBInstanceSpecsRequest.fromJsonString(params, DescribeDBInstanceSpecsRequest.class);                          DescribeDBInstanceSpecsResponse resp = client.DescribeDBInstanceSpecs(req);                          System.out.println(DescribeDBInstanceSpecsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
748,云数据库 MariaDB,实例管理相关接口,查询订单信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBInstanceSpecsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBInstanceSpecsResponse;  public class DescribeDBInstanceSpecs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceSpecsRequest req = DescribeDBInstanceSpecsRequest.fromJsonString(params, DescribeDBInstanceSpecsRequest.class);                          DescribeDBInstanceSpecsResponse resp = client.DescribeDBInstanceSpecs(req);                          System.out.println(DescribeDBInstanceSpecsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
749,云数据库 MariaDB,实例管理相关接口,新购实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeFlowRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeFlowResponse;  public class DescribeFlow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFlowRequest req = DescribeFlowRequest.fromJsonString(params, DescribeFlowRequest.class);                          DescribeFlowResponse resp = client.DescribeFlow(req);                          System.out.println(DescribeFlowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
750,云数据库 MariaDB,实例管理相关接口,续费实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeOrdersRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeOrdersResponse;  public class DescribeOrders {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOrdersRequest req = DescribeOrdersRequest.fromJsonString(params, DescribeOrdersRequest.class);                          DescribeOrdersResponse resp = client.DescribeOrders(req);                          System.out.println(DescribeOrdersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
751,云数据库 MariaDB,实例管理相关接口,查询云数据库可售卖地域和可用区信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribePriceRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribePriceResponse;  public class DescribePrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePriceRequest req = DescribePriceRequest.fromJsonString(params, DescribePriceRequest.class);                          DescribePriceResponse resp = client.DescribePrice(req);                          System.out.println(DescribePriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
752,云数据库 MariaDB,实例管理相关接口,扩容实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeSaleInfoRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeSaleInfoResponse;  public class DescribeSaleInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSaleInfoRequest req = DescribeSaleInfoRequest.fromJsonString(params, DescribeSaleInfoRequest.class);                          DescribeSaleInfoResponse resp = client.DescribeSaleInfo(req);                          System.out.println(DescribeSaleInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
753,云数据库 MariaDB,实例管理相关接口,初始化实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeSaleInfoRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeSaleInfoResponse;  public class DescribeSaleInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSaleInfoRequest req = DescribeSaleInfoRequest.fromJsonString(params, DescribeSaleInfoRequest.class);                          DescribeSaleInfoResponse resp = client.DescribeSaleInfo(req);                          System.out.println(DescribeSaleInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
754,云数据库 MariaDB,实例管理相关接口,修改备份时间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeUpgradePriceRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeUpgradePriceResponse;  public class DescribeUpgradePrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUpgradePriceRequest req = DescribeUpgradePriceRequest.fromJsonString(params, DescribeUpgradePriceRequest.class);                          DescribeUpgradePriceResponse resp = client.DescribeUpgradePrice(req);                          System.out.println(DescribeUpgradePriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
755,云数据库 MariaDB,实例管理相关接口,修改实例名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyBackupTimeRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyBackupTimeResponse;  public class ModifyBackupTime {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyBackupTimeRequest req = ModifyBackupTimeRequest.fromJsonString(params, ModifyBackupTimeRequest.class);                          ModifyBackupTimeResponse resp = client.ModifyBackupTime(req);                          System.out.println(ModifyBackupTimeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
756,云数据库 MariaDB,实例管理相关接口,修改实例所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyBackupTimeRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyBackupTimeResponse;  public class ModifyBackupTime {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyBackupTimeRequest req = ModifyBackupTimeRequest.fromJsonString(params, ModifyBackupTimeRequest.class);                          ModifyBackupTimeResponse resp = client.ModifyBackupTime(req);                          System.out.println(ModifyBackupTimeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
757,云数据库 MariaDB,实例管理相关接口,开通外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyDBInstanceNameRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyDBInstanceNameResponse;  public class ModifyDBInstanceName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceNameRequest req = ModifyDBInstanceNameRequest.fromJsonString(params, ModifyDBInstanceNameRequest.class);                          ModifyDBInstanceNameResponse resp = client.ModifyDBInstanceName(req);                          System.out.println(ModifyDBInstanceNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
758,云数据库 MariaDB,实例管理相关接口,续费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyDBInstancesProjectRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyDBInstancesProjectResponse;  public class ModifyDBInstancesProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstancesProjectRequest req = ModifyDBInstancesProjectRequest.fromJsonString(params, ModifyDBInstancesProjectRequest.class);                          ModifyDBInstancesProjectResponse resp = client.ModifyDBInstancesProject(req);                          System.out.println(ModifyDBInstancesProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
759,云数据库 MariaDB,实例管理相关接口,扩容实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.OpenDBExtranetAccessRequest; import com.tencentcloudapi.mariadb.v20170312.models.OpenDBExtranetAccessResponse;  public class OpenDBExtranetAccess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             OpenDBExtranetAccessRequest req = OpenDBExtranetAccessRequest.fromJsonString(params, OpenDBExtranetAccessRequest.class);                          OpenDBExtranetAccessResponse resp = client.OpenDBExtranetAccess(req);                          System.out.println(OpenDBExtranetAccessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
760,云数据库 MariaDB,监控管理相关接口,查看实例性能数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.mariadb.v20170312.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
761,云数据库 MariaDB,监控管理相关接口,查看实例性能数据详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.mariadb.v20170312.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
762,云数据库 MariaDB,监控管理相关接口,查看实例资源使用情况,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBPerformanceRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBPerformanceResponse;  public class DescribeDBPerformance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBPerformanceRequest req = DescribeDBPerformanceRequest.fromJsonString(params, DescribeDBPerformanceRequest.class);                          DescribeDBPerformanceResponse resp = client.DescribeDBPerformance(req);                          System.out.println(DescribeDBPerformanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
763,云数据库 MariaDB,监控管理相关接口,查看实例资源使用详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBPerformanceDetailsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBPerformanceDetailsResponse;  public class DescribeDBPerformanceDetails {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBPerformanceDetailsRequest req = DescribeDBPerformanceDetailsRequest.fromJsonString(params, DescribeDBPerformanceDetailsRequest.class);                          DescribeDBPerformanceDetailsResponse resp = client.DescribeDBPerformanceDetails(req);                          System.out.println(DescribeDBPerformanceDetailsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
764,云数据库 MariaDB,监控管理相关接口,查询慢查询日志列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBResourceUsageRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBResourceUsageResponse;  public class DescribeDBResourceUsage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBResourceUsageRequest req = DescribeDBResourceUsageRequest.fromJsonString(params, DescribeDBResourceUsageRequest.class);                          DescribeDBResourceUsageResponse resp = client.DescribeDBResourceUsage(req);                          System.out.println(DescribeDBResourceUsageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
765,云数据库 MariaDB,监控管理相关接口,获取SQL日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBResourceUsageDetailsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeDBResourceUsageDetailsResponse;  public class DescribeDBResourceUsageDetails {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBResourceUsageDetailsRequest req = DescribeDBResourceUsageDetailsRequest.fromJsonString(params, DescribeDBResourceUsageDetailsRequest.class);                          DescribeDBResourceUsageDetailsResponse resp = client.DescribeDBResourceUsageDetails(req);                          System.out.println(DescribeDBResourceUsageDetailsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
766,云数据库 MariaDB,账号相关接口,克隆实例账户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeSqlLogsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeSqlLogsResponse;  public class DescribeSqlLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSqlLogsRequest req = DescribeSqlLogsRequest.fromJsonString(params, DescribeSqlLogsRequest.class);                          DescribeSqlLogsResponse resp = client.DescribeSqlLogs(req);                          System.out.println(DescribeSqlLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
767,云数据库 MariaDB,账号相关接口,复制账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeSqlLogsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeSqlLogsResponse;  public class DescribeSqlLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSqlLogsRequest req = DescribeSqlLogsRequest.fromJsonString(params, DescribeSqlLogsRequest.class);                          DescribeSqlLogsResponse resp = client.DescribeSqlLogs(req);                          System.out.println(DescribeSqlLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
768,云数据库 MariaDB,账号相关接口,创建账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.CloneAccountRequest; import com.tencentcloudapi.mariadb.v20170312.models.CloneAccountResponse;  public class CloneAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             CloneAccountRequest req = CloneAccountRequest.fromJsonString(params, CloneAccountRequest.class);                          CloneAccountResponse resp = client.CloneAccount(req);                          System.out.println(CloneAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
769,云数据库 MariaDB,账号相关接口,删除账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.CopyAccountPrivilegesRequest; import com.tencentcloudapi.mariadb.v20170312.models.CopyAccountPrivilegesResponse;  public class CopyAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             CopyAccountPrivilegesRequest req = CopyAccountPrivilegesRequest.fromJsonString(params, CopyAccountPrivilegesRequest.class);                          CopyAccountPrivilegesResponse resp = client.CopyAccountPrivileges(req);                          System.out.println(CopyAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
770,云数据库 MariaDB,账号相关接口,查询账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DeleteAccountRequest; import com.tencentcloudapi.mariadb.v20170312.models.DeleteAccountResponse;  public class DeleteAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccountRequest req = DeleteAccountRequest.fromJsonString(params, DeleteAccountRequest.class);                          DeleteAccountResponse resp = client.DeleteAccount(req);                          System.out.println(DeleteAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
771,云数据库 MariaDB,账号相关接口,查询账号列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DeleteAccountRequest; import com.tencentcloudapi.mariadb.v20170312.models.DeleteAccountResponse;  public class DeleteAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccountRequest req = DeleteAccountRequest.fromJsonString(params, DeleteAccountRequest.class);                          DeleteAccountResponse resp = client.DeleteAccount(req);                          System.out.println(DeleteAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
772,云数据库 MariaDB,账号相关接口,设置账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeAccountPrivilegesRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeAccountPrivilegesResponse;  public class DescribeAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountPrivilegesRequest req = DescribeAccountPrivilegesRequest.fromJsonString(params, DescribeAccountPrivilegesRequest.class);                          DescribeAccountPrivilegesResponse resp = client.DescribeAccountPrivileges(req);                          System.out.println(DescribeAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
773,云数据库 MariaDB,账号相关接口,修改数据库账号备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.DescribeAccountsRequest; import com.tencentcloudapi.mariadb.v20170312.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
774,云数据库 MariaDB,账号相关接口,重置账号密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ModifyAccountDescriptionRequest; import com.tencentcloudapi.mariadb.v20170312.models.ModifyAccountDescriptionResponse;  public class ModifyAccountDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountDescriptionRequest req = ModifyAccountDescriptionRequest.fromJsonString(params, ModifyAccountDescriptionRequest.class);                          ModifyAccountDescriptionResponse resp = client.ModifyAccountDescription(req);                          System.out.println(ModifyAccountDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
775,云数据库 SQL Server,其他接口,查询订单信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ResetAccountPasswordRequest; import com.tencentcloudapi.mariadb.v20170312.models.ResetAccountPasswordResponse;  public class ResetAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ResetAccountPasswordRequest req = ResetAccountPasswordRequest.fromJsonString(params, ResetAccountPasswordRequest.class);                          ResetAccountPasswordResponse resp = client.ResetAccountPassword(req);                          System.out.println(ResetAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
776,云数据库 SQL Server,其他接口,获取慢查询日志文件信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mariadb.v20170312.MariadbClient;  import com.tencentcloudapi.mariadb.v20170312.models.ResetAccountPasswordRequest; import com.tencentcloudapi.mariadb.v20170312.models.ResetAccountPasswordResponse;  public class ResetAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mariadb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MariadbClient client = new MariadbClient(cred, """", clientProfile);                          String params = ""{}"";             ResetAccountPasswordRequest req = ResetAccountPasswordRequest.fromJsonString(params, ResetAccountPasswordRequest.class);                          ResetAccountPasswordResponse resp = client.ResetAccountPassword(req);                          System.out.println(ResetAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
777,云数据库 SQL Server,其他接口,修改账户备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeOrdersRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeOrdersResponse;  public class DescribeOrders {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOrdersRequest req = DescribeOrdersRequest.fromJsonString(params, DescribeOrdersRequest.class);                          DescribeOrdersResponse resp = client.DescribeOrders(req);                          System.out.println(DescribeOrdersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
778,云数据库 SQL Server,备份与恢复接口,创建备份,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeSlowlogsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeSlowlogsResponse;  public class DescribeSlowlogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSlowlogsRequest req = DescribeSlowlogsRequest.fromJsonString(params, DescribeSlowlogsRequest.class);                          DescribeSlowlogsResponse resp = client.DescribeSlowlogs(req);                          System.out.println(DescribeSlowlogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
779,云数据库 SQL Server,备份与恢复接口,创建迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyAccountRemarkRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyAccountRemarkResponse;  public class ModifyAccountRemark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountRemarkRequest req = ModifyAccountRemarkRequest.fromJsonString(params, ModifyAccountRemarkRequest.class);                          ModifyAccountRemarkResponse resp = client.ModifyAccountRemark(req);                          System.out.println(ModifyAccountRemarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
780,云数据库 SQL Server,备份与恢复接口,删除迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.CreateMigrationRequest; import com.tencentcloudapi.sqlserver.v20180328.models.CreateMigrationResponse;  public class CreateMigration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMigrationRequest req = CreateMigrationRequest.fromJsonString(params, CreateMigrationRequest.class);                          CreateMigrationResponse resp = client.CreateMigration(req);                          System.out.println(CreateMigrationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
781,云数据库 SQL Server,备份与恢复接口,查询备份列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.CreateMigrationRequest; import com.tencentcloudapi.sqlserver.v20180328.models.CreateMigrationResponse;  public class CreateMigration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMigrationRequest req = CreateMigrationRequest.fromJsonString(params, CreateMigrationRequest.class);                          CreateMigrationResponse resp = client.CreateMigration(req);                          System.out.println(CreateMigrationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
782,云数据库 SQL Server,备份与恢复接口,查询迁移任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DeleteMigrationRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DeleteMigrationResponse;  public class DeleteMigration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMigrationRequest req = DeleteMigrationRequest.fromJsonString(params, DeleteMigrationRequest.class);                          DeleteMigrationResponse resp = client.DeleteMigration(req);                          System.out.println(DeleteMigrationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
783,云数据库 SQL Server,备份与恢复接口,查询迁移任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeBackupsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeBackupsResponse;  public class DescribeBackups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupsRequest req = DescribeBackupsRequest.fromJsonString(params, DescribeBackupsRequest.class);                          DescribeBackupsResponse resp = client.DescribeBackups(req);                          System.out.println(DescribeBackupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
784,云数据库 SQL Server,备份与恢复接口,修改迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeMigrationDetailRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeMigrationDetailResponse;  public class DescribeMigrationDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMigrationDetailRequest req = DescribeMigrationDetailRequest.fromJsonString(params, DescribeMigrationDetailRequest.class);                          DescribeMigrationDetailResponse resp = client.DescribeMigrationDetail(req);                          System.out.println(DescribeMigrationDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
785,云数据库 SQL Server,备份与恢复接口,执行迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeMigrationsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeMigrationsResponse;  public class DescribeMigrations {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMigrationsRequest req = DescribeMigrationsRequest.fromJsonString(params, DescribeMigrationsRequest.class);                          DescribeMigrationsResponse resp = client.DescribeMigrations(req);                          System.out.println(DescribeMigrationsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
786,云数据库 SQL Server,实例管理接口,创建实例账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RunMigrationRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RunMigrationResponse;  public class RunMigration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RunMigrationRequest req = RunMigrationRequest.fromJsonString(params, RunMigrationRequest.class);                          RunMigrationResponse resp = client.RunMigration(req);                          System.out.println(RunMigrationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
787,云数据库 SQL Server,实例管理接口,创建数据库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RunMigrationRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RunMigrationResponse;  public class RunMigration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RunMigrationRequest req = RunMigrationRequest.fromJsonString(params, RunMigrationRequest.class);                          RunMigrationResponse resp = client.RunMigration(req);                          System.out.println(RunMigrationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
788,云数据库 SQL Server,实例管理接口,创建实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.CreateAccountRequest; import com.tencentcloudapi.sqlserver.v20180328.models.CreateAccountResponse;  public class CreateAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAccountRequest req = CreateAccountRequest.fromJsonString(params, CreateAccountRequest.class);                          CreateAccountResponse resp = client.CreateAccount(req);                          System.out.println(CreateAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
789,云数据库 SQL Server,实例管理接口,删除实例账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.CreateDBRequest; import com.tencentcloudapi.sqlserver.v20180328.models.CreateDBResponse;  public class CreateDB {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBRequest req = CreateDBRequest.fromJsonString(params, CreateDBRequest.class);                          CreateDBResponse resp = client.CreateDB(req);                          System.out.println(CreateDBRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
790,云数据库 SQL Server,实例管理接口,删除数据库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.CreateDBInstancesRequest; import com.tencentcloudapi.sqlserver.v20180328.models.CreateDBInstancesResponse;  public class CreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstancesRequest req = CreateDBInstancesRequest.fromJsonString(params, CreateDBInstancesRequest.class);                          CreateDBInstancesResponse resp = client.CreateDBInstances(req);                          System.out.println(CreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
791,云数据库 SQL Server,实例管理接口,拉取实例账户列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DeleteAccountRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DeleteAccountResponse;  public class DeleteAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccountRequest req = DeleteAccountRequest.fromJsonString(params, DeleteAccountRequest.class);                          DeleteAccountResponse resp = client.DeleteAccount(req);                          System.out.println(DeleteAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
792,云数据库 SQL Server,实例管理接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeAccountsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
793,云数据库 SQL Server,实例管理接口,查询数据库列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeAccountsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
794,云数据库 SQL Server,实例管理接口,查询流程状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeDBInstancesRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeDBInstancesResponse;  public class DescribeDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstancesRequest req = DescribeDBInstancesRequest.fromJsonString(params, DescribeDBInstancesRequest.class);                          DescribeDBInstancesResponse resp = client.DescribeDBInstances(req);                          System.out.println(DescribeDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
795,云数据库 SQL Server,实例管理接口,查询售卖规格配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeDBsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeDBsResponse;  public class DescribeDBs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBsRequest req = DescribeDBsRequest.fromJsonString(params, DescribeDBsRequest.class);                          DescribeDBsResponse resp = client.DescribeDBs(req);                          System.out.println(DescribeDBsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
796,云数据库 SQL Server,实例管理接口,查询售卖地域,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeFlowStatusRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeFlowStatusResponse;  public class DescribeFlowStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFlowStatusRequest req = DescribeFlowStatusRequest.fromJsonString(params, DescribeFlowStatusRequest.class);                          DescribeFlowStatusResponse resp = client.DescribeFlowStatus(req);                          System.out.println(DescribeFlowStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
797,云数据库 SQL Server,实例管理接口,查询实例可回档时间范围,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeProductConfigRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeProductConfigResponse;  public class DescribeProductConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProductConfigRequest req = DescribeProductConfigRequest.fromJsonString(params, DescribeProductConfigRequest.class);                          DescribeProductConfigResponse resp = client.DescribeProductConfig(req);                          System.out.println(DescribeProductConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
798,云数据库 SQL Server,实例管理接口,查询售卖可用区,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeRegionsRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeRegionsResponse;  public class DescribeRegions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRegionsRequest req = DescribeRegionsRequest.fromJsonString(params, DescribeRegionsRequest.class);                          DescribeRegionsResponse resp = client.DescribeRegions(req);                          System.out.println(DescribeRegionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
799,云数据库 SQL Server,实例管理接口,查询申请实例价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeRollbackTimeRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeRollbackTimeResponse;  public class DescribeRollbackTime {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRollbackTimeRequest req = DescribeRollbackTimeRequest.fromJsonString(params, DescribeRollbackTimeRequest.class);                          DescribeRollbackTimeResponse resp = client.DescribeRollbackTime(req);                          System.out.println(DescribeRollbackTimeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
800,云数据库 SQL Server,实例管理接口,查询实例续费价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.DescribeZonesRequest; import com.tencentcloudapi.sqlserver.v20180328.models.DescribeZonesResponse;  public class DescribeZones {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZonesRequest req = DescribeZonesRequest.fromJsonString(params, DescribeZonesRequest.class);                          DescribeZonesResponse resp = client.DescribeZones(req);                          System.out.println(DescribeZonesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
801,云数据库 SQL Server,实例管理接口,查询升级实例价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceCreateDBInstancesRequest; import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceCreateDBInstancesResponse;  public class InquiryPriceCreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateDBInstancesRequest req = InquiryPriceCreateDBInstancesRequest.fromJsonString(params, InquiryPriceCreateDBInstancesRequest.class);                          InquiryPriceCreateDBInstancesResponse resp = client.InquiryPriceCreateDBInstances(req);                          System.out.println(InquiryPriceCreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
802,云数据库 SQL Server,实例管理接口,修改实例账户权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceRenewDBInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceRenewDBInstanceResponse;  public class InquiryPriceRenewDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewDBInstanceRequest req = InquiryPriceRenewDBInstanceRequest.fromJsonString(params, InquiryPriceRenewDBInstanceRequest.class);                          InquiryPriceRenewDBInstanceResponse resp = client.InquiryPriceRenewDBInstance(req);                          System.out.println(InquiryPriceRenewDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
803,云数据库 SQL Server,实例管理接口,修改实例名字,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceUpgradeDBInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.InquiryPriceUpgradeDBInstanceResponse;  public class InquiryPriceUpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceUpgradeDBInstanceRequest req = InquiryPriceUpgradeDBInstanceRequest.fromJsonString(params, InquiryPriceUpgradeDBInstanceRequest.class);                          InquiryPriceUpgradeDBInstanceResponse resp = client.InquiryPriceUpgradeDBInstance(req);                          System.out.println(InquiryPriceUpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
804,云数据库 SQL Server,实例管理接口,修改数据库实例所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyAccountPrivilegeRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyAccountPrivilegeResponse;  public class ModifyAccountPrivilege {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountPrivilegeRequest req = ModifyAccountPrivilegeRequest.fromJsonString(params, ModifyAccountPrivilegeRequest.class);                          ModifyAccountPrivilegeResponse resp = client.ModifyAccountPrivilege(req);                          System.out.println(ModifyAccountPrivilegeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
805,云数据库 SQL Server,实例管理接口,修改实例续费标记,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceNameRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceNameResponse;  public class ModifyDBInstanceName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceNameRequest req = ModifyDBInstanceNameRequest.fromJsonString(params, ModifyDBInstanceNameRequest.class);                          ModifyDBInstanceNameResponse resp = client.ModifyDBInstanceName(req);                          System.out.println(ModifyDBInstanceNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
806,云数据库 SQL Server,实例管理接口,更新数据库名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceRenewFlagRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceRenewFlagResponse;  public class ModifyDBInstanceRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceRenewFlagRequest req = ModifyDBInstanceRenewFlagRequest.fromJsonString(params, ModifyDBInstanceRenewFlagRequest.class);                          ModifyDBInstanceRenewFlagResponse resp = client.ModifyDBInstanceRenewFlag(req);                          System.out.println(ModifyDBInstanceRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
807,云数据库 SQL Server,实例管理接口,修改数据库备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceRenewFlagRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBInstanceRenewFlagResponse;  public class ModifyDBInstanceRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceRenewFlagRequest req = ModifyDBInstanceRenewFlagRequest.fromJsonString(params, ModifyDBInstanceRenewFlagRequest.class);                          ModifyDBInstanceRenewFlagResponse resp = client.ModifyDBInstanceRenewFlag(req);                          System.out.println(ModifyDBInstanceRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
808,云数据库 SQL Server,实例管理接口,续费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBNameRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBNameResponse;  public class ModifyDBName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBNameRequest req = ModifyDBNameRequest.fromJsonString(params, ModifyDBNameRequest.class);                          ModifyDBNameResponse resp = client.ModifyDBName(req);                          System.out.println(ModifyDBNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
809,云数据库 SQL Server,实例管理接口,重置账户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBRemarkRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ModifyDBRemarkResponse;  public class ModifyDBRemark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBRemarkRequest req = ModifyDBRemarkRequest.fromJsonString(params, ModifyDBRemarkRequest.class);                          ModifyDBRemarkResponse resp = client.ModifyDBRemark(req);                          System.out.println(ModifyDBRemarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
810,云数据库 SQL Server,实例管理接口,重启实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RenewDBInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RenewDBInstanceResponse;  public class RenewDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RenewDBInstanceRequest req = RenewDBInstanceRequest.fromJsonString(params, RenewDBInstanceRequest.class);                          RenewDBInstanceResponse resp = client.RenewDBInstance(req);                          System.out.println(RenewDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
811,云数据库 SQL Server,实例管理接口,根据备份文件恢复实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.ResetAccountPasswordRequest; import com.tencentcloudapi.sqlserver.v20180328.models.ResetAccountPasswordResponse;  public class ResetAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             ResetAccountPasswordRequest req = ResetAccountPasswordRequest.fromJsonString(params, ResetAccountPasswordRequest.class);                          ResetAccountPasswordResponse resp = client.ResetAccountPassword(req);                          System.out.println(ResetAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
812,云数据库 SQL Server,实例管理接口,回档实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RestoreInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RestoreInstanceResponse;  public class RestoreInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RestoreInstanceRequest req = RestoreInstanceRequest.fromJsonString(params, RestoreInstanceRequest.class);                          RestoreInstanceResponse resp = client.RestoreInstance(req);                          System.out.println(RestoreInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
813,云数据库 SQL Server,实例管理接口,主动销毁按量计费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RollbackInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RollbackInstanceResponse;  public class RollbackInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RollbackInstanceRequest req = RollbackInstanceRequest.fromJsonString(params, RollbackInstanceRequest.class);                          RollbackInstanceResponse resp = client.RollbackInstance(req);                          System.out.println(RollbackInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
814,云数据库 SQL Server,实例管理接口,升级实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.RollbackInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.RollbackInstanceResponse;  public class RollbackInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sqlserver.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             RollbackInstanceRequest req = RollbackInstanceRequest.fromJsonString(params, RollbackInstanceRequest.class);                          RollbackInstanceResponse resp = client.RollbackInstance(req);                          System.out.println(RollbackInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
815,云数据库 PostgreSQL,地域相关接口,查询售卖地域,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
816,云数据库 PostgreSQL,地域相关接口,查询售卖可用区,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sqlserver.v20180328.SqlserverClient;  import com.tencentcloudapi.sqlserver.v20180328.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.sqlserver.v20180328.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SqlserverClient client = new SqlserverClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
817,云数据库 PostgreSQL,备份与恢复相关接口,查询实例备份列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeZonesRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeZonesResponse;  public class DescribeZones {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZonesRequest req = DescribeZonesRequest.fromJsonString(params, DescribeZonesRequest.class);                          DescribeZonesResponse resp = client.DescribeZones(req);                          System.out.println(DescribeZonesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
818,云数据库 PostgreSQL,备份与恢复相关接口,获取错误日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeZonesRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeZonesResponse;  public class DescribeZones {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeZonesRequest req = DescribeZonesRequest.fromJsonString(params, DescribeZonesRequest.class);                          DescribeZonesResponse resp = client.DescribeZones(req);                          System.out.println(DescribeZonesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
819,云数据库 PostgreSQL,备份与恢复相关接口,获取慢查询日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBBackupsRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBBackupsResponse;  public class DescribeDBBackups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBBackupsRequest req = DescribeDBBackupsRequest.fromJsonString(params, DescribeDBBackupsRequest.class);                          DescribeDBBackupsResponse resp = client.DescribeDBBackups(req);                          System.out.println(DescribeDBBackupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
820,云数据库 PostgreSQL,备份与恢复相关接口,获取实例Xlog列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBErrlogsRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBErrlogsResponse;  public class DescribeDBErrlogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBErrlogsRequest req = DescribeDBErrlogsRequest.fromJsonString(params, DescribeDBErrlogsRequest.class);                          DescribeDBErrlogsResponse resp = client.DescribeDBErrlogs(req);                          System.out.println(DescribeDBErrlogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
821,云数据库 PostgreSQL,实例相关接口,关闭实例外网链接,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBSlowlogsRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBSlowlogsResponse;  public class DescribeDBSlowlogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSlowlogsRequest req = DescribeDBSlowlogsRequest.fromJsonString(params, DescribeDBSlowlogsRequest.class);                          DescribeDBSlowlogsResponse resp = client.DescribeDBSlowlogs(req);                          System.out.println(DescribeDBSlowlogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
822,云数据库 PostgreSQL,实例相关接口,创建DB实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBXlogsRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBXlogsResponse;  public class DescribeDBXlogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBXlogsRequest req = DescribeDBXlogsRequest.fromJsonString(params, DescribeDBXlogsRequest.class);                          DescribeDBXlogsResponse resp = client.DescribeDBXlogs(req);                          System.out.println(DescribeDBXlogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
823,云数据库 PostgreSQL,实例相关接口,查询实例详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.CreateDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.CreateDBInstancesResponse;  public class CreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstancesRequest req = CreateDBInstancesRequest.fromJsonString(params, CreateDBInstancesRequest.class);                          CreateDBInstancesResponse resp = client.CreateDBInstances(req);                          System.out.println(CreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
824,云数据库 PostgreSQL,实例相关接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.CreateDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.CreateDBInstancesResponse;  public class CreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstancesRequest req = CreateDBInstancesRequest.fromJsonString(params, CreateDBInstancesRequest.class);                          CreateDBInstancesResponse resp = client.CreateDBInstances(req);                          System.out.println(CreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
825,云数据库 PostgreSQL,实例相关接口,获取订单信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBInstanceAttributeRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBInstanceAttributeResponse;  public class DescribeDBInstanceAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstanceAttributeRequest req = DescribeDBInstanceAttributeRequest.fromJsonString(params, DescribeDBInstanceAttributeRequest.class);                          DescribeDBInstanceAttributeResponse resp = client.DescribeDBInstanceAttribute(req);                          System.out.println(DescribeDBInstanceAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
826,云数据库 PostgreSQL,实例相关接口,初始化实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.DescribeDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.DescribeDBInstancesResponse;  public class DescribeDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstancesRequest req = DescribeDBInstancesRequest.fromJsonString(params, DescribeDBInstancesRequest.class);                          DescribeDBInstancesResponse resp = client.DescribeDBInstances(req);                          System.out.println(DescribeDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
827,云数据库 PostgreSQL,实例相关接口,查询实例续费价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InitDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.InitDBInstancesResponse;  public class InitDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InitDBInstancesRequest req = InitDBInstancesRequest.fromJsonString(params, InitDBInstancesRequest.class);                          InitDBInstancesResponse resp = client.InitDBInstances(req);                          System.out.println(InitDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
828,云数据库 PostgreSQL,实例相关接口,查询升级实例价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InitDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.InitDBInstancesResponse;  public class InitDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InitDBInstancesRequest req = InitDBInstancesRequest.fromJsonString(params, InitDBInstancesRequest.class);                          InitDBInstancesResponse resp = client.InitDBInstances(req);                          System.out.println(InitDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
829,云数据库 PostgreSQL,实例相关接口,修改实例名字,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceRenewDBInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceRenewDBInstanceResponse;  public class InquiryPriceRenewDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewDBInstanceRequest req = InquiryPriceRenewDBInstanceRequest.fromJsonString(params, InquiryPriceRenewDBInstanceRequest.class);                          InquiryPriceRenewDBInstanceResponse resp = client.InquiryPriceRenewDBInstance(req);                          System.out.println(InquiryPriceRenewDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
830,云数据库 PostgreSQL,实例相关接口,将实例转至其他项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceUpgradeDBInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceUpgradeDBInstanceResponse;  public class InquiryPriceUpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceUpgradeDBInstanceRequest req = InquiryPriceUpgradeDBInstanceRequest.fromJsonString(params, InquiryPriceUpgradeDBInstanceRequest.class);                          InquiryPriceUpgradeDBInstanceResponse resp = client.InquiryPriceUpgradeDBInstance(req);                          System.out.println(InquiryPriceUpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
831,云数据库 PostgreSQL,实例相关接口,开通外网,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.ModifyDBInstanceNameRequest; import com.tencentcloudapi.postgres.v20170312.models.ModifyDBInstanceNameResponse;  public class ModifyDBInstanceName {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstanceNameRequest req = ModifyDBInstanceNameRequest.fromJsonString(params, ModifyDBInstanceNameRequest.class);                          ModifyDBInstanceNameResponse resp = client.ModifyDBInstanceName(req);                          System.out.println(ModifyDBInstanceNameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
832,云数据库 PostgreSQL,实例相关接口,续费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.ModifyDBInstancesProjectRequest; import com.tencentcloudapi.postgres.v20170312.models.ModifyDBInstancesProjectResponse;  public class ModifyDBInstancesProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstancesProjectRequest req = ModifyDBInstancesProjectRequest.fromJsonString(params, ModifyDBInstancesProjectRequest.class);                          ModifyDBInstancesProjectResponse resp = client.ModifyDBInstancesProject(req);                          System.out.println(ModifyDBInstancesProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
833,云数据库 PostgreSQL,实例相关接口,重启实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.OpenDBExtranetAccessRequest; import com.tencentcloudapi.postgres.v20170312.models.OpenDBExtranetAccessResponse;  public class OpenDBExtranetAccess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             OpenDBExtranetAccessRequest req = OpenDBExtranetAccessRequest.fromJsonString(params, OpenDBExtranetAccessRequest.class);                          OpenDBExtranetAccessResponse resp = client.OpenDBExtranetAccess(req);                          System.out.println(OpenDBExtranetAccessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
834,云数据库 PostgreSQL,实例相关接口,设置自动续费,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.RenewInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.RenewInstanceResponse;  public class RenewInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             RenewInstanceRequest req = RenewInstanceRequest.fromJsonString(params, RenewInstanceRequest.class);                          RenewInstanceResponse resp = client.RenewInstance(req);                          System.out.println(RenewInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
835,云数据库 PostgreSQL,实例相关接口,升级实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.RestartDBInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.RestartDBInstanceResponse;  public class RestartDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             RestartDBInstanceRequest req = RestartDBInstanceRequest.fromJsonString(params, RestartDBInstanceRequest.class);                          RestartDBInstanceResponse resp = client.RestartDBInstance(req);                          System.out.println(RestartDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
836,云数据库 PostgreSQL,帐号相关接口,获取实例用户列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
837,云数据库 PostgreSQL,帐号相关接口,修改帐号备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.UpgradeDBInstanceRequest; import com.tencentcloudapi.postgres.v20170312.models.UpgradeDBInstanceResponse;  public class UpgradeDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceRequest req = UpgradeDBInstanceRequest.fromJsonString(params, UpgradeDBInstanceRequest.class);                          UpgradeDBInstanceResponse resp = client.UpgradeDBInstance(req);                          System.out.println(UpgradeDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
838,云数据库 PostgreSQL,帐号相关接口,重置账户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.ModifyAccountRemarkRequest; import com.tencentcloudapi.postgres.v20170312.models.ModifyAccountRemarkResponse;  public class ModifyAccountRemark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountRemarkRequest req = ModifyAccountRemarkRequest.fromJsonString(params, ModifyAccountRemarkRequest.class);                          ModifyAccountRemarkResponse resp = client.ModifyAccountRemark(req);                          System.out.println(ModifyAccountRemarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
839,云数据库 PostgreSQL,规格相关接口,查询售卖规格配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.ResetAccountPasswordRequest; import com.tencentcloudapi.postgres.v20170312.models.ResetAccountPasswordResponse;  public class ResetAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             ResetAccountPasswordRequest req = ResetAccountPasswordRequest.fromJsonString(params, ResetAccountPasswordRequest.class);                          ResetAccountPasswordResponse resp = client.ResetAccountPassword(req);                          System.out.println(ResetAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
840,云数据库 PostgreSQL,规格相关接口,查询售卖价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.ResetAccountPasswordRequest; import com.tencentcloudapi.postgres.v20170312.models.ResetAccountPasswordResponse;  public class ResetAccountPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""postgres.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             ResetAccountPasswordRequest req = ResetAccountPasswordRequest.fromJsonString(params, ResetAccountPasswordRequest.class);                          ResetAccountPasswordResponse resp = client.ResetAccountPassword(req);                          System.out.println(ResetAccountPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
841,内容分发网络,内容管理相关接口,刷新历史查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesResponse;  public class InquiryPriceCreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateDBInstancesRequest req = InquiryPriceCreateDBInstancesRequest.fromJsonString(params, InquiryPriceCreateDBInstancesRequest.class);                          InquiryPriceCreateDBInstancesResponse resp = client.InquiryPriceCreateDBInstances(req);                          System.out.println(InquiryPriceCreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
842,内容分发网络,内容管理相关接口,预热历史查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesResponse;  public class InquiryPriceCreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateDBInstancesRequest req = InquiryPriceCreateDBInstancesRequest.fromJsonString(params, InquiryPriceCreateDBInstancesRequest.class);                          InquiryPriceCreateDBInstancesResponse resp = client.InquiryPriceCreateDBInstances(req);                          System.out.println(InquiryPriceCreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
843,内容分发网络,内容管理相关接口,禁用 URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.postgres.v20170312.PostgresClient;  import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesRequest; import com.tencentcloudapi.postgres.v20170312.models.InquiryPriceCreateDBInstancesResponse;  public class InquiryPriceCreateDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PostgresClient client = new PostgresClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateDBInstancesRequest req = InquiryPriceCreateDBInstancesRequest.fromJsonString(params, InquiryPriceCreateDBInstancesRequest.class);                          InquiryPriceCreateDBInstancesResponse resp = client.InquiryPriceCreateDBInstances(req);                          System.out.println(InquiryPriceCreateDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
844,内容分发网络,内容管理相关接口,解禁 URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribePushTasksRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribePushTasksResponse;  public class DescribePushTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePushTasksRequest req = DescribePushTasksRequest.fromJsonString(params, DescribePushTasksRequest.class);                          DescribePushTasksResponse resp = client.DescribePushTasks(req);                          System.out.println(DescribePushTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
845,内容分发网络,内容管理相关接口,禁用历史查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DisableCachesRequest; import com.tencentcloudapi.cdn.v20180606.models.DisableCachesResponse;  public class DisableCaches {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DisableCachesRequest req = DisableCachesRequest.fromJsonString(params, DisableCachesRequest.class);                          DisableCachesResponse resp = client.DisableCaches(req);                          System.out.println(DisableCachesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
846,内容分发网络,内容管理相关接口,刷新目录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.EnableCachesRequest; import com.tencentcloudapi.cdn.v20180606.models.EnableCachesResponse;  public class EnableCaches {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             EnableCachesRequest req = EnableCachesRequest.fromJsonString(params, EnableCachesRequest.class);                          EnableCachesResponse resp = client.EnableCaches(req);                          System.out.println(EnableCachesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
847,内容分发网络,内容管理相关接口,刷新 URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.GetDisableRecordsRequest; import com.tencentcloudapi.cdn.v20180606.models.GetDisableRecordsResponse;  public class GetDisableRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             GetDisableRecordsRequest req = GetDisableRecordsRequest.fromJsonString(params, GetDisableRecordsRequest.class);                          GetDisableRecordsResponse resp = client.GetDisableRecords(req);                          System.out.println(GetDisableRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
848,内容分发网络,内容管理相关接口,预热 URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.GetDisableRecordsRequest; import com.tencentcloudapi.cdn.v20180606.models.GetDisableRecordsResponse;  public class GetDisableRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             GetDisableRecordsRequest req = GetDisableRecordsRequest.fromJsonString(params, GetDisableRecordsRequest.class);                          GetDisableRecordsResponse resp = client.GetDisableRecords(req);                          System.out.println(GetDisableRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
849,内容分发网络,数据查询相关接口,访问数据查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.PurgeUrlsCacheRequest; import com.tencentcloudapi.cdn.v20180606.models.PurgeUrlsCacheResponse;  public class PurgeUrlsCache {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             PurgeUrlsCacheRequest req = PurgeUrlsCacheRequest.fromJsonString(params, PurgeUrlsCacheRequest.class);                          PurgeUrlsCacheResponse resp = client.PurgeUrlsCache(req);                          System.out.println(PurgeUrlsCacheRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
850,内容分发网络,数据查询相关接口,活跃用户查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.PushUrlsCacheRequest; import com.tencentcloudapi.cdn.v20180606.models.PushUrlsCacheResponse;  public class PushUrlsCache {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             PushUrlsCacheRequest req = PushUrlsCacheRequest.fromJsonString(params, PushUrlsCacheRequest.class);                          PushUrlsCacheResponse resp = client.PushUrlsCache(req);                          System.out.println(PushUrlsCacheRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
851,内容分发网络,数据查询相关接口,回源数据查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribeCdnDataRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribeCdnDataResponse;  public class DescribeCdnData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCdnDataRequest req = DescribeCdnDataRequest.fromJsonString(params, DescribeCdnDataRequest.class);                          DescribeCdnDataResponse resp = client.DescribeCdnData(req);                          System.out.println(DescribeCdnDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
852,内容分发网络,数据查询相关接口,TOP 数据查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribeIpVisitRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribeIpVisitResponse;  public class DescribeIpVisit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIpVisitRequest req = DescribeIpVisitRequest.fromJsonString(params, DescribeIpVisitRequest.class);                          DescribeIpVisitResponse resp = client.DescribeIpVisit(req);                          System.out.println(DescribeIpVisitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
853,内容分发网络,服务查询相关接口,IP 归属查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribeOriginDataRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribeOriginDataResponse;  public class DescribeOriginData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOriginDataRequest req = DescribeOriginDataRequest.fromJsonString(params, DescribeOriginDataRequest.class);                          DescribeOriginDataResponse resp = client.DescribeOriginData(req);                          System.out.println(DescribeOriginDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
854,内容分发网络,服务查询相关接口,省份运营商映射查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.ListTopDataRequest; import com.tencentcloudapi.cdn.v20180606.models.ListTopDataResponse;  public class ListTopData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             ListTopDataRequest req = ListTopDataRequest.fromJsonString(params, ListTopDataRequest.class);                          ListTopDataResponse resp = client.ListTopData(req);                          System.out.println(ListTopDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
855,内容分发网络,服务查询相关接口,查询计费方式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.ListTopDataRequest; import com.tencentcloudapi.cdn.v20180606.models.ListTopDataResponse;  public class ListTopData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cdn.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             ListTopDataRequest req = ListTopDataRequest.fromJsonString(params, ListTopDataRequest.class);                          ListTopDataResponse resp = client.ListTopData(req);                          System.out.println(ListTopDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
856,云数据库 Redis,其他接口,交换实例VIP,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribePayTypeRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribePayTypeResponse;  public class DescribePayType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePayTypeRequest req = DescribePayTypeRequest.fromJsonString(params, DescribePayTypeRequest.class);                          DescribePayTypeResponse resp = client.DescribePayType(req);                          System.out.println(DescribePayTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
857,云数据库 Redis,参数管理接口,查询参数修改历史列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cdn.v20180606.CdnClient;  import com.tencentcloudapi.cdn.v20180606.models.DescribePayTypeRequest; import com.tencentcloudapi.cdn.v20180606.models.DescribePayTypeResponse;  public class DescribePayType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdnClient client = new CdnClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePayTypeRequest req = DescribePayTypeRequest.fromJsonString(params, DescribePayTypeRequest.class);                          DescribePayTypeResponse resp = client.DescribePayType(req);                          System.out.println(DescribePayTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
858,云数据库 Redis,参数管理接口,查询实例参数列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.SwitchInstanceVipRequest; import com.tencentcloudapi.redis.v20180412.models.SwitchInstanceVipResponse;  public class SwitchInstanceVip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             SwitchInstanceVipRequest req = SwitchInstanceVipRequest.fromJsonString(params, SwitchInstanceVipRequest.class);                          SwitchInstanceVipResponse resp = client.SwitchInstanceVip(req);                          System.out.println(SwitchInstanceVipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
859,云数据库 Redis,参数管理接口,查询实例安全组信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceParamRecordsRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceParamRecordsResponse;  public class DescribeInstanceParamRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceParamRecordsRequest req = DescribeInstanceParamRecordsRequest.fromJsonString(params, DescribeInstanceParamRecordsRequest.class);                          DescribeInstanceParamRecordsResponse resp = client.DescribeInstanceParamRecords(req);                          System.out.println(DescribeInstanceParamRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
860,云数据库 Redis,参数管理接口,查询项目安全组信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceParamsRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceParamsResponse;  public class DescribeInstanceParams {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceParamsRequest req = DescribeInstanceParamsRequest.fromJsonString(params, DescribeInstanceParamsRequest.class);                          DescribeInstanceParamsResponse resp = client.DescribeInstanceParams(req);                          System.out.println(DescribeInstanceParamsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
861,云数据库 Redis,参数管理接口,修改实例参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceSecurityGroupRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceSecurityGroupResponse;  public class DescribeInstanceSecurityGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceSecurityGroupRequest req = DescribeInstanceSecurityGroupRequest.fromJsonString(params, DescribeInstanceSecurityGroupRequest.class);                          DescribeInstanceSecurityGroupResponse resp = client.DescribeInstanceSecurityGroup(req);                          System.out.println(DescribeInstanceSecurityGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
862,云数据库 Redis,地域相关接口,查询产品售卖规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeProjectSecurityGroupRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeProjectSecurityGroupResponse;  public class DescribeProjectSecurityGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProjectSecurityGroupRequest req = DescribeProjectSecurityGroupRequest.fromJsonString(params, DescribeProjectSecurityGroupRequest.class);                          DescribeProjectSecurityGroupResponse resp = client.DescribeProjectSecurityGroup(req);                          System.out.println(DescribeProjectSecurityGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
863,云数据库 Redis,备份和恢复接口,查询备份Rdb下载地址,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeProductInfoRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeProductInfoResponse;  public class DescribeProductInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProductInfoRequest req = DescribeProductInfoRequest.fromJsonString(params, DescribeProductInfoRequest.class);                          DescribeProductInfoResponse resp = client.DescribeProductInfo(req);                          System.out.println(DescribeProductInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
864,云数据库 Redis,备份和恢复接口,查询Redis实例备份列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeProductInfoRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeProductInfoResponse;  public class DescribeProductInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProductInfoRequest req = DescribeProductInfoRequest.fromJsonString(params, DescribeProductInfoRequest.class);                          DescribeProductInfoResponse resp = client.DescribeProductInfo(req);                          System.out.println(DescribeProductInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
865,云数据库 Redis,备份和恢复接口,手动备份Redis实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeBackupUrlRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeBackupUrlResponse;  public class DescribeBackupUrl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBackupUrlRequest req = DescribeBackupUrlRequest.fromJsonString(params, DescribeBackupUrlRequest.class);                          DescribeBackupUrlResponse resp = client.DescribeBackupUrl(req);                          System.out.println(DescribeBackupUrlRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
866,云数据库 Redis,实例相关接口,回收站实例立即下线,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ManualBackupInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.ManualBackupInstanceResponse;  public class ManualBackupInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ManualBackupInstanceRequest req = ManualBackupInstanceRequest.fromJsonString(params, ManualBackupInstanceRequest.class);                          ManualBackupInstanceResponse resp = client.ManualBackupInstance(req);                          System.out.println(ManualBackupInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
867,云数据库 Redis,实例相关接口,清空Redis实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ManualBackupInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.ManualBackupInstanceResponse;  public class ManualBackupInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ManualBackupInstanceRequest req = ManualBackupInstanceRequest.fromJsonString(params, ManualBackupInstanceRequest.class);                          ManualBackupInstanceResponse resp = client.ManualBackupInstance(req);                          System.out.println(ManualBackupInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
868,云数据库 Redis,实例相关接口,创建实例子账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.CleanUpInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.CleanUpInstanceResponse;  public class CleanUpInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             CleanUpInstanceRequest req = CleanUpInstanceRequest.fromJsonString(params, CleanUpInstanceRequest.class);                          CleanUpInstanceResponse resp = client.CleanUpInstance(req);                          System.out.println(CleanUpInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
869,云数据库 Redis,实例相关接口,创建Redis实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ClearInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.ClearInstanceResponse;  public class ClearInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ClearInstanceRequest req = ClearInstanceRequest.fromJsonString(params, ClearInstanceRequest.class);                          ClearInstanceResponse resp = client.ClearInstance(req);                          System.out.println(ClearInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
870,云数据库 Redis,实例相关接口,删除实例子账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.CreateInstanceAccountRequest; import com.tencentcloudapi.redis.v20180412.models.CreateInstanceAccountResponse;  public class CreateInstanceAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             CreateInstanceAccountRequest req = CreateInstanceAccountRequest.fromJsonString(params, CreateInstanceAccountRequest.class);                          CreateInstanceAccountResponse resp = client.CreateInstanceAccount(req);                          System.out.println(CreateInstanceAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
871,云数据库 Redis,实例相关接口,获取备份配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DeleteInstanceAccountRequest; import com.tencentcloudapi.redis.v20180412.models.DeleteInstanceAccountResponse;  public class DeleteInstanceAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteInstanceAccountRequest req = DeleteInstanceAccountRequest.fromJsonString(params, DeleteInstanceAccountRequest.class);                          DeleteInstanceAccountResponse resp = client.DeleteInstanceAccount(req);                          System.out.println(DeleteInstanceAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
872,云数据库 Redis,实例相关接口,查看实例子账号信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeAutoBackupConfigRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeAutoBackupConfigResponse;  public class DescribeAutoBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoBackupConfigRequest req = DescribeAutoBackupConfigRequest.fromJsonString(params, DescribeAutoBackupConfigRequest.class);                          DescribeAutoBackupConfigResponse resp = client.DescribeAutoBackupConfig(req);                          System.out.println(DescribeAutoBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
873,云数据库 Redis,实例相关接口,查询订单信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeAutoBackupConfigRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeAutoBackupConfigResponse;  public class DescribeAutoBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAutoBackupConfigRequest req = DescribeAutoBackupConfigRequest.fromJsonString(params, DescribeAutoBackupConfigRequest.class);                          DescribeAutoBackupConfigResponse resp = client.DescribeAutoBackupConfig(req);                          System.out.println(DescribeAutoBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
874,云数据库 Redis,实例相关接口,查询Redis实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceAccountRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceAccountResponse;  public class DescribeInstanceAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceAccountRequest req = DescribeInstanceAccountRequest.fromJsonString(params, DescribeInstanceAccountRequest.class);                          DescribeInstanceAccountResponse resp = client.DescribeInstanceAccount(req);                          System.out.println(DescribeInstanceAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
875,云数据库 Redis,实例相关接口,获取集群版实例分片信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstancesRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstancesResponse;  public class DescribeInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesRequest req = DescribeInstancesRequest.fromJsonString(params, DescribeInstancesRequest.class);                          DescribeInstancesResponse resp = client.DescribeInstances(req);                          System.out.println(DescribeInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
876,云数据库 Redis,实例相关接口,查询实例慢查询记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstancesRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstancesResponse;  public class DescribeInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesRequest req = DescribeInstancesRequest.fromJsonString(params, DescribeInstancesRequest.class);                          DescribeInstancesResponse resp = client.DescribeInstances(req);                          System.out.println(DescribeInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
877,云数据库 Redis,实例相关接口,Redis查询任务结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceShardsRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceShardsResponse;  public class DescribeInstanceShards {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceShardsRequest req = DescribeInstanceShardsRequest.fromJsonString(params, DescribeInstanceShardsRequest.class);                          DescribeInstanceShardsResponse resp = client.DescribeInstanceShards(req);                          System.out.println(DescribeInstanceShardsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
878,云数据库 Redis,实例相关接口,按量计费实例销毁,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeSlowLogRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeSlowLogResponse;  public class DescribeSlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSlowLogRequest req = DescribeSlowLogRequest.fromJsonString(params, DescribeSlowLogRequest.class);                          DescribeSlowLogResponse resp = client.DescribeSlowLog(req);                          System.out.println(DescribeSlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
879,云数据库 Redis,实例相关接口,包年包月实例退还,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeTaskInfoRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeTaskInfoResponse;  public class DescribeTaskInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskInfoRequest req = DescribeTaskInfoRequest.fromJsonString(params, DescribeTaskInfoRequest.class);                          DescribeTaskInfoResponse resp = client.DescribeTaskInfo(req);                          System.out.println(DescribeTaskInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
880,云数据库 Redis,实例相关接口,禁用读写分离,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DestroyPostpaidInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.DestroyPostpaidInstanceResponse;  public class DestroyPostpaidInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DestroyPostpaidInstanceRequest req = DestroyPostpaidInstanceRequest.fromJsonString(params, DestroyPostpaidInstanceRequest.class);                          DestroyPostpaidInstanceResponse resp = client.DestroyPostpaidInstance(req);                          System.out.println(DestroyPostpaidInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
881,云数据库 Redis,实例相关接口,启用读写分离,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DestroyPrepaidInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.DestroyPrepaidInstanceResponse;  public class DestroyPrepaidInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DestroyPrepaidInstanceRequest req = DestroyPrepaidInstanceRequest.fromJsonString(params, DestroyPrepaidInstanceRequest.class);                          DestroyPrepaidInstanceResponse resp = client.DestroyPrepaidInstance(req);                          System.out.println(DestroyPrepaidInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
882,云数据库 Redis,实例相关接口,修改Redis密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DisableReplicaReadonlyRequest; import com.tencentcloudapi.redis.v20180412.models.DisableReplicaReadonlyResponse;  public class DisableReplicaReadonly {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DisableReplicaReadonlyRequest req = DisableReplicaReadonlyRequest.fromJsonString(params, DisableReplicaReadonlyRequest.class);                          DisableReplicaReadonlyResponse resp = client.DisableReplicaReadonly(req);                          System.out.println(DisableReplicaReadonlyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
883,云数据库 Redis,实例相关接口,设置自动备份时间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.EnableReplicaReadonlyRequest; import com.tencentcloudapi.redis.v20180412.models.EnableReplicaReadonlyResponse;  public class EnableReplicaReadonly {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             EnableReplicaReadonlyRequest req = EnableReplicaReadonlyRequest.fromJsonString(params, EnableReplicaReadonlyRequest.class);                          EnableReplicaReadonlyResponse resp = client.EnableReplicaReadonly(req);                          System.out.println(EnableReplicaReadonlyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
884,云数据库 Redis,实例相关接口,修改实例相关信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ModfiyInstancePasswordRequest; import com.tencentcloudapi.redis.v20180412.models.ModfiyInstancePasswordResponse;  public class ModfiyInstancePassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ModfiyInstancePasswordRequest req = ModfiyInstancePasswordRequest.fromJsonString(params, ModfiyInstancePasswordRequest.class);                          ModfiyInstancePasswordResponse resp = client.ModfiyInstancePassword(req);                          System.out.println(ModfiyInstancePasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
885,云数据库 Redis,实例相关接口,修改实例子账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ModifyAutoBackupConfigRequest; import com.tencentcloudapi.redis.v20180412.models.ModifyAutoBackupConfigResponse;  public class ModifyAutoBackupConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoBackupConfigRequest req = ModifyAutoBackupConfigRequest.fromJsonString(params, ModifyAutoBackupConfigRequest.class);                          ModifyAutoBackupConfigResponse resp = client.ModifyAutoBackupConfig(req);                          System.out.println(ModifyAutoBackupConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
886,云数据库 Redis,实例相关接口,修改实例网络配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ModifyInstanceAccountRequest; import com.tencentcloudapi.redis.v20180412.models.ModifyInstanceAccountResponse;  public class ModifyInstanceAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstanceAccountRequest req = ModifyInstanceAccountRequest.fromJsonString(params, ModifyInstanceAccountRequest.class);                          ModifyInstanceAccountResponse resp = client.ModifyInstanceAccount(req);                          System.out.println(ModifyInstanceAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
887,云数据库 Redis,实例相关接口,续费实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ModifyInstanceAccountRequest; import com.tencentcloudapi.redis.v20180412.models.ModifyInstanceAccountResponse;  public class ModifyInstanceAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyInstanceAccountRequest req = ModifyInstanceAccountRequest.fromJsonString(params, ModifyInstanceAccountRequest.class);                          ModifyInstanceAccountResponse resp = client.ModifyInstanceAccount(req);                          System.out.println(ModifyInstanceAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
888,云数据库 Redis,实例相关接口,重置密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ModifyNetworkConfigRequest; import com.tencentcloudapi.redis.v20180412.models.ModifyNetworkConfigResponse;  public class ModifyNetworkConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyNetworkConfigRequest req = ModifyNetworkConfigRequest.fromJsonString(params, ModifyNetworkConfigRequest.class);                          ModifyNetworkConfigResponse resp = client.ModifyNetworkConfig(req);                          System.out.println(ModifyNetworkConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
889,云数据库 Redis,实例相关接口,恢复 CRS 实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.RenewInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.RenewInstanceResponse;  public class RenewInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             RenewInstanceRequest req = RenewInstanceRequest.fromJsonString(params, RenewInstanceRequest.class);                          RenewInstanceResponse resp = client.RenewInstance(req);                          System.out.println(RenewInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
890,云数据库 Redis,实例相关接口,升级实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.ResetPasswordRequest; import com.tencentcloudapi.redis.v20180412.models.ResetPasswordResponse;  public class ResetPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             ResetPasswordRequest req = ResetPasswordRequest.fromJsonString(params, ResetPasswordRequest.class);                          ResetPasswordResponse resp = client.ResetPassword(req);                          System.out.println(ResetPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
891,云数据库 Redis,监控管理接口,查询实例大Key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.RestoreInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.RestoreInstanceResponse;  public class RestoreInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             RestoreInstanceRequest req = RestoreInstanceRequest.fromJsonString(params, RestoreInstanceRequest.class);                          RestoreInstanceResponse resp = client.RestoreInstance(req);                          System.out.println(RestoreInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
892,云数据库 Redis,监控管理接口,查询实例大Key大小分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.UpgradeInstanceRequest; import com.tencentcloudapi.redis.v20180412.models.UpgradeInstanceResponse;  public class UpgradeInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeInstanceRequest req = UpgradeInstanceRequest.fromJsonString(params, UpgradeInstanceRequest.class);                          UpgradeInstanceResponse resp = client.UpgradeInstance(req);                          System.out.println(UpgradeInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
893,云数据库 Redis,监控管理接口,查询实例大Key类型分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeyRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeyResponse;  public class DescribeInstanceMonitorBigKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorBigKeyRequest req = DescribeInstanceMonitorBigKeyRequest.fromJsonString(params, DescribeInstanceMonitorBigKeyRequest.class);                          DescribeInstanceMonitorBigKeyResponse resp = client.DescribeInstanceMonitorBigKey(req);                          System.out.println(DescribeInstanceMonitorBigKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
894,云数据库 Redis,监控管理接口,查询实例热Key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeySizeDistRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeySizeDistResponse;  public class DescribeInstanceMonitorBigKeySizeDist {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorBigKeySizeDistRequest req = DescribeInstanceMonitorBigKeySizeDistRequest.fromJsonString(params, DescribeInstanceMonitorBigKeySizeDistRequest.class);                          DescribeInstanceMonitorBigKeySizeDistResponse resp = client.DescribeInstanceMonitorBigKeySizeDist(req);                          System.out.println(DescribeInstanceMonitorBigKeySizeDistRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
895,云数据库 Redis,监控管理接口,查询实例访问来源信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeyTypeDistRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorBigKeyTypeDistResponse;  public class DescribeInstanceMonitorBigKeyTypeDist {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorBigKeyTypeDistRequest req = DescribeInstanceMonitorBigKeyTypeDistRequest.fromJsonString(params, DescribeInstanceMonitorBigKeyTypeDistRequest.class);                          DescribeInstanceMonitorBigKeyTypeDistResponse resp = client.DescribeInstanceMonitorBigKeyTypeDist(req);                          System.out.println(DescribeInstanceMonitorBigKeyTypeDistRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
896,云数据库 Redis,监控管理接口,查询实例大Key大小分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorHotKeyRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorHotKeyResponse;  public class DescribeInstanceMonitorHotKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorHotKeyRequest req = DescribeInstanceMonitorHotKeyRequest.fromJsonString(params, DescribeInstanceMonitorHotKeyRequest.class);                          DescribeInstanceMonitorHotKeyResponse resp = client.DescribeInstanceMonitorHotKey(req);                          System.out.println(DescribeInstanceMonitorHotKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
897,云数据库 Redis,监控管理接口,查询实例访问命令,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorSIPRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorSIPResponse;  public class DescribeInstanceMonitorSIP {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorSIPRequest req = DescribeInstanceMonitorSIPRequest.fromJsonString(params, DescribeInstanceMonitorSIPRequest.class);                          DescribeInstanceMonitorSIPResponse resp = client.DescribeInstanceMonitorSIP(req);                          System.out.println(DescribeInstanceMonitorSIPRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
898,云数据库 Redis,监控管理接口,查询实例CPU耗时,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTookDistRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTookDistResponse;  public class DescribeInstanceMonitorTookDist {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""redis.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorTookDistRequest req = DescribeInstanceMonitorTookDistRequest.fromJsonString(params, DescribeInstanceMonitorTookDistRequest.class);                          DescribeInstanceMonitorTookDistResponse resp = client.DescribeInstanceMonitorTookDist(req);                          System.out.println(DescribeInstanceMonitorTookDistRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
899,云数据库 MongoDB,实例相关接口,指定云数据库实例的所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTopNCmdTookRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTopNCmdTookResponse;  public class DescribeInstanceMonitorTopNCmdTook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorTopNCmdTookRequest req = DescribeInstanceMonitorTopNCmdTookRequest.fromJsonString(params, DescribeInstanceMonitorTopNCmdTookRequest.class);                          DescribeInstanceMonitorTopNCmdTookResponse resp = client.DescribeInstanceMonitorTopNCmdTook(req);                          System.out.println(DescribeInstanceMonitorTopNCmdTookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
900,云数据库 MongoDB,实例相关接口,创建云数据库实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.redis.v20180412.RedisClient;  import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTopNCmdTookRequest; import com.tencentcloudapi.redis.v20180412.models.DescribeInstanceMonitorTopNCmdTookResponse;  public class DescribeInstanceMonitorTopNCmdTook {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      RedisClient client = new RedisClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceMonitorTopNCmdTookRequest req = DescribeInstanceMonitorTopNCmdTookRequest.fromJsonString(params, DescribeInstanceMonitorTopNCmdTookRequest.class);                          DescribeInstanceMonitorTopNCmdTookResponse resp = client.DescribeInstanceMonitorTopNCmdTook(req);                          System.out.println(DescribeInstanceMonitorTopNCmdTookRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
901,云数据库 MongoDB,实例相关接口,创建云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.AssignProjectRequest; import com.tencentcloudapi.mongodb.v20180408.models.AssignProjectResponse;  public class AssignProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             AssignProjectRequest req = AssignProjectRequest.fromJsonString(params, AssignProjectRequest.class);                          AssignProjectResponse resp = client.AssignProject(req);                          System.out.println(AssignProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
902,云数据库 MongoDB,实例相关接口,查询实例客户端连接信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceResponse;  public class CreateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceRequest req = CreateDBInstanceRequest.fromJsonString(params, CreateDBInstanceRequest.class);                          CreateDBInstanceResponse resp = client.CreateDBInstance(req);                          System.out.println(CreateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
903,云数据库 MongoDB,实例相关接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourRequest; import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourResponse;  public class CreateDBInstanceHour {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceHourRequest req = CreateDBInstanceHourRequest.fromJsonString(params, CreateDBInstanceHourRequest.class);                          CreateDBInstanceHourResponse resp = client.CreateDBInstanceHour(req);                          System.out.println(CreateDBInstanceHourRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
904,云数据库 MongoDB,实例相关接口,查询实例慢日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeClientConnectionsRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeClientConnectionsResponse;  public class DescribeClientConnections {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClientConnectionsRequest req = DescribeClientConnectionsRequest.fromJsonString(params, DescribeClientConnectionsRequest.class);                          DescribeClientConnectionsResponse resp = client.DescribeClientConnections(req);                          System.out.println(DescribeClientConnectionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
905,云数据库 MongoDB,实例相关接口,查询云数据库的售卖规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeSlowLogRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeSlowLogResponse;  public class DescribeSlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSlowLogRequest req = DescribeSlowLogRequest.fromJsonString(params, DescribeSlowLogRequest.class);                          DescribeSlowLogResponse resp = client.DescribeSlowLog(req);                          System.out.println(DescribeSlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
906,云数据库 MongoDB,实例相关接口,修改实例名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeSlowLogRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeSlowLogResponse;  public class DescribeSlowLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSlowLogRequest req = DescribeSlowLogRequest.fromJsonString(params, DescribeSlowLogRequest.class);                          DescribeSlowLogResponse resp = client.DescribeSlowLog(req);                          System.out.println(DescribeSlowLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
907,云数据库 MongoDB,实例相关接口,设置云数据库实例的续费选项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceResponse;  public class RenameInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             RenameInstanceRequest req = RenameInstanceRequest.fromJsonString(params, RenameInstanceRequest.class);                          RenameInstanceResponse resp = client.RenameInstance(req);                          System.out.println(RenameInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
908,云数据库 MongoDB,实例相关接口,销毁云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceResponse;  public class RenameInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             RenameInstanceRequest req = RenameInstanceRequest.fromJsonString(params, RenameInstanceRequest.class);                          RenameInstanceResponse resp = client.RenameInstance(req);                          System.out.println(RenameInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
909,云数据库 MongoDB,实例相关接口,升级云数据库实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetAutoRenewRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetAutoRenewResponse;  public class SetAutoRenew {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetAutoRenewRequest req = SetAutoRenewRequest.fromJsonString(params, SetAutoRenewRequest.class);                          SetAutoRenewResponse resp = client.SetAutoRenew(req);                          System.out.println(SetAutoRenewRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
910,云数据库 MongoDB,实例相关接口,升级云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.TerminateDBInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.TerminateDBInstanceResponse;  public class TerminateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateDBInstanceRequest req = TerminateDBInstanceRequest.fromJsonString(params, TerminateDBInstanceRequest.class);                          TerminateDBInstanceResponse resp = client.TerminateDBInstance(req);                          System.out.println(TerminateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
911,云数据库 MongoDB,账号相关接口,修改云数据库实例的账户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.UpgradeDBInstanceHourRequest; import com.tencentcloudapi.mongodb.v20180408.models.UpgradeDBInstanceHourResponse;  public class UpgradeDBInstanceHour {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceHourRequest req = UpgradeDBInstanceHourRequest.fromJsonString(params, UpgradeDBInstanceHourRequest.class);                          UpgradeDBInstanceHourResponse resp = client.UpgradeDBInstanceHour(req);                          System.out.println(UpgradeDBInstanceHourRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
912,云数据库 MongoDB,实例相关接口,指定云数据库实例的所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordResponse;  public class SetPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetPasswordRequest req = SetPasswordRequest.fromJsonString(params, SetPasswordRequest.class);                          SetPasswordResponse resp = client.SetPassword(req);                          System.out.println(SetPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
913,云数据库 MongoDB,实例相关接口,创建云数据库实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordResponse;  public class SetPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetPasswordRequest req = SetPasswordRequest.fromJsonString(params, SetPasswordRequest.class);                          SetPasswordResponse resp = client.SetPassword(req);                          System.out.println(SetPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
914,云数据库 MongoDB,实例相关接口,创建云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.AssignProjectRequest; import com.tencentcloudapi.mongodb.v20180408.models.AssignProjectResponse;  public class AssignProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             AssignProjectRequest req = AssignProjectRequest.fromJsonString(params, AssignProjectRequest.class);                          AssignProjectResponse resp = client.AssignProject(req);                          System.out.println(AssignProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
915,云数据库 MongoDB,实例相关接口,查询实例客户端连接信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourRequest; import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourResponse;  public class CreateDBInstanceHour {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceHourRequest req = CreateDBInstanceHourRequest.fromJsonString(params, CreateDBInstanceHourRequest.class);                          CreateDBInstanceHourResponse resp = client.CreateDBInstanceHour(req);                          System.out.println(CreateDBInstanceHourRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
916,云数据库 MongoDB,实例相关接口,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourRequest; import com.tencentcloudapi.mongodb.v20180408.models.CreateDBInstanceHourResponse;  public class CreateDBInstanceHour {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDBInstanceHourRequest req = CreateDBInstanceHourRequest.fromJsonString(params, CreateDBInstanceHourRequest.class);                          CreateDBInstanceHourResponse resp = client.CreateDBInstanceHour(req);                          System.out.println(CreateDBInstanceHourRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
917,云数据库 MongoDB,实例相关接口,查询实例慢日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeClientConnectionsRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeClientConnectionsResponse;  public class DescribeClientConnections {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClientConnectionsRequest req = DescribeClientConnectionsRequest.fromJsonString(params, DescribeClientConnectionsRequest.class);                          DescribeClientConnectionsResponse resp = client.DescribeClientConnections(req);                          System.out.println(DescribeClientConnectionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
918,云数据库 MongoDB,实例相关接口,查询云数据库的售卖规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeDBInstancesRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeDBInstancesResponse;  public class DescribeDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBInstancesRequest req = DescribeDBInstancesRequest.fromJsonString(params, DescribeDBInstancesRequest.class);                          DescribeDBInstancesResponse resp = client.DescribeDBInstances(req);                          System.out.println(DescribeDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
919,云数据库 MongoDB,实例相关接口,修改实例名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeSpecInfoRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeSpecInfoResponse;  public class DescribeSpecInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSpecInfoRequest req = DescribeSpecInfoRequest.fromJsonString(params, DescribeSpecInfoRequest.class);                          DescribeSpecInfoResponse resp = client.DescribeSpecInfo(req);                          System.out.println(DescribeSpecInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
920,云数据库 MongoDB,实例相关接口,设置云数据库实例的续费选项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.DescribeSpecInfoRequest; import com.tencentcloudapi.mongodb.v20180408.models.DescribeSpecInfoResponse;  public class DescribeSpecInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSpecInfoRequest req = DescribeSpecInfoRequest.fromJsonString(params, DescribeSpecInfoRequest.class);                          DescribeSpecInfoResponse resp = client.DescribeSpecInfo(req);                          System.out.println(DescribeSpecInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
921,云数据库 MongoDB,实例相关接口,销毁云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.RenameInstanceResponse;  public class RenameInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             RenameInstanceRequest req = RenameInstanceRequest.fromJsonString(params, RenameInstanceRequest.class);                          RenameInstanceResponse resp = client.RenameInstance(req);                          System.out.println(RenameInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
922,云数据库 MongoDB,实例相关接口,升级云数据库实例（包年包月）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetAutoRenewRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetAutoRenewResponse;  public class SetAutoRenew {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetAutoRenewRequest req = SetAutoRenewRequest.fromJsonString(params, SetAutoRenewRequest.class);                          SetAutoRenewResponse resp = client.SetAutoRenew(req);                          System.out.println(SetAutoRenewRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
923,云数据库 MongoDB,实例相关接口,升级云数据库实例（按量计费）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.TerminateDBInstanceRequest; import com.tencentcloudapi.mongodb.v20180408.models.TerminateDBInstanceResponse;  public class TerminateDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateDBInstanceRequest req = TerminateDBInstanceRequest.fromJsonString(params, TerminateDBInstanceRequest.class);                          TerminateDBInstanceResponse resp = client.TerminateDBInstance(req);                          System.out.println(TerminateDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
924,云数据库 MongoDB,账号相关接口,修改云数据库实例的账户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.UpgradeDBInstanceHourRequest; import com.tencentcloudapi.mongodb.v20180408.models.UpgradeDBInstanceHourResponse;  public class UpgradeDBInstanceHour {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDBInstanceHourRequest req = UpgradeDBInstanceHourRequest.fromJsonString(params, UpgradeDBInstanceHourRequest.class);                          UpgradeDBInstanceHourResponse resp = client.UpgradeDBInstanceHour(req);                          System.out.println(UpgradeDBInstanceHourRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
925,分布式数据库 TDSQL,分布式数据库,克隆实例账户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordResponse;  public class SetPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetPasswordRequest req = SetPasswordRequest.fromJsonString(params, SetPasswordRequest.class);                          SetPasswordResponse resp = client.SetPassword(req);                          System.out.println(SetPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
926,分布式数据库 TDSQL,分布式数据库,关闭外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mongodb.v20180408.MongodbClient;  import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordRequest; import com.tencentcloudapi.mongodb.v20180408.models.SetPasswordResponse;  public class SetPassword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mongodb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MongodbClient client = new MongodbClient(cred, """", clientProfile);                          String params = ""{}"";             SetPasswordRequest req = SetPasswordRequest.fromJsonString(params, SetPasswordRequest.class);                          SetPasswordResponse resp = client.SetPassword(req);                          System.out.println(SetPasswordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
927,分布式数据库 TDSQL,分布式数据库,复制账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.CloneAccountRequest; import com.tencentcloudapi.dcdb.v20180411.models.CloneAccountResponse;  public class CloneAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             CloneAccountRequest req = CloneAccountRequest.fromJsonString(params, CloneAccountRequest.class);                          CloneAccountResponse resp = client.CloneAccount(req);                          System.out.println(CloneAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
928,分布式数据库 TDSQL,分布式数据库,创建账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.CloseDBExtranetAccessRequest; import com.tencentcloudapi.dcdb.v20180411.models.CloseDBExtranetAccessResponse;  public class CloseDBExtranetAccess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             CloseDBExtranetAccessRequest req = CloseDBExtranetAccessRequest.fromJsonString(params, CloseDBExtranetAccessRequest.class);                          CloseDBExtranetAccessResponse resp = client.CloseDBExtranetAccess(req);                          System.out.println(CloseDBExtranetAccessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
929,分布式数据库 TDSQL,分布式数据库,创建DCDB分布式实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.CopyAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.CopyAccountPrivilegesResponse;  public class CopyAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             CopyAccountPrivilegesRequest req = CopyAccountPrivilegesRequest.fromJsonString(params, CopyAccountPrivilegesRequest.class);                          CopyAccountPrivilegesResponse resp = client.CopyAccountPrivileges(req);                          System.out.println(CopyAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
930,分布式数据库 TDSQL,分布式数据库,删除账号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.CopyAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.CopyAccountPrivilegesResponse;  public class CopyAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             CopyAccountPrivilegesRequest req = CopyAccountPrivilegesRequest.fromJsonString(params, CopyAccountPrivilegesRequest.class);                          CopyAccountPrivilegesResponse resp = client.CopyAccountPrivileges(req);                          System.out.println(CopyAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
931,分布式数据库 TDSQL,分布式数据库,查询账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.CreateDCDBInstanceRequest; import com.tencentcloudapi.dcdb.v20180411.models.CreateDCDBInstanceResponse;  public class CreateDCDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             CreateDCDBInstanceRequest req = CreateDCDBInstanceRequest.fromJsonString(params, CreateDCDBInstanceRequest.class);                          CreateDCDBInstanceResponse resp = client.CreateDCDBInstance(req);                          System.out.println(CreateDCDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
932,分布式数据库 TDSQL,分布式数据库,查询账号列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesResponse;  public class DescribeAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountPrivilegesRequest req = DescribeAccountPrivilegesRequest.fromJsonString(params, DescribeAccountPrivilegesRequest.class);                          DescribeAccountPrivilegesResponse resp = client.DescribeAccountPrivileges(req);                          System.out.println(DescribeAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
933,分布式数据库 TDSQL,分布式数据库,查询数据库对象列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesResponse;  public class DescribeAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountPrivilegesRequest req = DescribeAccountPrivilegesRequest.fromJsonString(params, DescribeAccountPrivilegesRequest.class);                          DescribeAccountPrivilegesResponse resp = client.DescribeAccountPrivileges(req);                          System.out.println(DescribeAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
934,分布式数据库 TDSQL,分布式数据库,查询数据库列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountPrivilegesResponse;  public class DescribeAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountPrivilegesRequest req = DescribeAccountPrivilegesRequest.fromJsonString(params, DescribeAccountPrivilegesRequest.class);                          DescribeAccountPrivilegesResponse resp = client.DescribeAccountPrivileges(req);                          System.out.println(DescribeAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
935,分布式数据库 TDSQL,分布式数据库,查询数据库表信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountsRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
936,分布式数据库 TDSQL,分布式数据库,获取日志列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabasesRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabasesResponse;  public class DescribeDatabases {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDatabasesRequest req = DescribeDatabasesRequest.fromJsonString(params, DescribeDatabasesRequest.class);                          DescribeDatabasesResponse resp = client.DescribeDatabases(req);                          System.out.println(DescribeDatabasesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
937,分布式数据库 TDSQL,分布式数据库,查看数据库参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabaseTableRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabaseTableResponse;  public class DescribeDatabaseTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDatabaseTableRequest req = DescribeDatabaseTableRequest.fromJsonString(params, DescribeDatabaseTableRequest.class);                          DescribeDatabaseTableResponse resp = client.DescribeDatabaseTable(req);                          System.out.println(DescribeDatabaseTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
938,分布式数据库 TDSQL,分布式数据库,查询同步模式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabaseTableRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDatabaseTableResponse;  public class DescribeDatabaseTable {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDatabaseTableRequest req = DescribeDatabaseTableRequest.fromJsonString(params, DescribeDatabaseTableRequest.class);                          DescribeDatabaseTableResponse resp = client.DescribeDatabaseTable(req);                          System.out.println(DescribeDatabaseTableRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
939,分布式数据库 TDSQL,分布式数据库,查询实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeResponse;  public class DescribeDBSyncMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSyncModeRequest req = DescribeDBSyncModeRequest.fromJsonString(params, DescribeDBSyncModeRequest.class);                          DescribeDBSyncModeResponse resp = client.DescribeDBSyncMode(req);                          System.out.println(DescribeDBSyncModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
940,分布式数据库 TDSQL,分布式数据库,新购分布式数据库实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeResponse;  public class DescribeDBSyncMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSyncModeRequest req = DescribeDBSyncModeRequest.fromJsonString(params, DescribeDBSyncModeRequest.class);                          DescribeDBSyncModeResponse resp = client.DescribeDBSyncMode(req);                          System.out.println(DescribeDBSyncModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
941,分布式数据库 TDSQL,分布式数据库,续费实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDBSyncModeResponse;  public class DescribeDBSyncMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDBSyncModeRequest req = DescribeDBSyncModeRequest.fromJsonString(params, DescribeDBSyncModeRequest.class);                          DescribeDBSyncModeResponse resp = client.DescribeDBSyncMode(req);                          System.out.println(DescribeDBSyncModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
942,分布式数据库 TDSQL,分布式数据库,查询分布式数据库可售卖地域和可用区信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBRenewalPriceRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBRenewalPriceResponse;  public class DescribeDCDBRenewalPrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDCDBRenewalPriceRequest req = DescribeDCDBRenewalPriceRequest.fromJsonString(params, DescribeDCDBRenewalPriceRequest.class);                          DescribeDCDBRenewalPriceResponse resp = client.DescribeDCDBRenewalPrice(req);                          System.out.println(DescribeDCDBRenewalPriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
943,分布式数据库 TDSQL,分布式数据库,查询分片信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBPriceRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBPriceResponse;  public class DescribeDCDBPrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDCDBPriceRequest req = DescribeDCDBPriceRequest.fromJsonString(params, DescribeDCDBPriceRequest.class);                          DescribeDCDBPriceResponse resp = client.DescribeDCDBPrice(req);                          System.out.println(DescribeDCDBPriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
944,分布式数据库 TDSQL,分布式数据库,查询升级分布式数据库实例价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBSaleInfoRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBSaleInfoResponse;  public class DescribeDCDBSaleInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDCDBSaleInfoRequest req = DescribeDCDBSaleInfoRequest.fromJsonString(params, DescribeDCDBSaleInfoRequest.class);                          DescribeDCDBSaleInfoResponse resp = client.DescribeDCDBSaleInfo(req);                          System.out.println(DescribeDCDBSaleInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
945,分布式数据库 TDSQL,分布式数据库,查询订单信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBShardsRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBShardsResponse;  public class DescribeDCDBShards {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDCDBShardsRequest req = DescribeDCDBShardsRequest.fromJsonString(params, DescribeDCDBShardsRequest.class);                          DescribeDCDBShardsResponse resp = client.DescribeDCDBShards(req);                          System.out.println(DescribeDCDBShardsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
946,分布式数据库 TDSQL,分布式数据库,查询分布式数据库可售卖分片规格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBUpgradePriceRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeDCDBUpgradePriceResponse;  public class DescribeDCDBUpgradePrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDCDBUpgradePriceRequest req = DescribeDCDBUpgradePriceRequest.fromJsonString(params, DescribeDCDBUpgradePriceRequest.class);                          DescribeDCDBUpgradePriceResponse resp = client.DescribeDCDBUpgradePrice(req);                          System.out.println(DescribeDCDBUpgradePriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
947,分布式数据库 TDSQL,分布式数据库,获取SQL日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeShardSpecRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeShardSpecResponse;  public class DescribeShardSpec {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeShardSpecRequest req = DescribeShardSpecRequest.fromJsonString(params, DescribeShardSpecRequest.class);                          DescribeShardSpecResponse resp = client.DescribeShardSpec(req);                          System.out.println(DescribeShardSpecRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
948,分布式数据库 TDSQL,分布式数据库,设置账号权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeShardSpecRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeShardSpecResponse;  public class DescribeShardSpec {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeShardSpecRequest req = DescribeShardSpecRequest.fromJsonString(params, DescribeShardSpecRequest.class);                          DescribeShardSpecResponse resp = client.DescribeShardSpec(req);                          System.out.println(DescribeShardSpecRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
949,分布式数据库 TDSQL,分布式数据库,初始化实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.DescribeSqlLogsRequest; import com.tencentcloudapi.dcdb.v20180411.models.DescribeSqlLogsResponse;  public class DescribeSqlLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSqlLogsRequest req = DescribeSqlLogsRequest.fromJsonString(params, DescribeSqlLogsRequest.class);                          DescribeSqlLogsResponse resp = client.DescribeSqlLogs(req);                          System.out.println(DescribeSqlLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
950,分布式数据库 TDSQL,分布式数据库,修改数据库账号备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.GrantAccountPrivilegesRequest; import com.tencentcloudapi.dcdb.v20180411.models.GrantAccountPrivilegesResponse;  public class GrantAccountPrivileges {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             GrantAccountPrivilegesRequest req = GrantAccountPrivilegesRequest.fromJsonString(params, GrantAccountPrivilegesRequest.class);                          GrantAccountPrivilegesResponse resp = client.GrantAccountPrivileges(req);                          System.out.println(GrantAccountPrivilegesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
951,分布式数据库 TDSQL,分布式数据库,修改实例所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.InitDCDBInstancesRequest; import com.tencentcloudapi.dcdb.v20180411.models.InitDCDBInstancesResponse;  public class InitDCDBInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             InitDCDBInstancesRequest req = InitDCDBInstancesRequest.fromJsonString(params, InitDCDBInstancesRequest.class);                          InitDCDBInstancesResponse resp = client.InitDCDBInstances(req);                          System.out.println(InitDCDBInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
952,分布式数据库 TDSQL,分布式数据库,修改数据库参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.ModifyAccountDescriptionRequest; import com.tencentcloudapi.dcdb.v20180411.models.ModifyAccountDescriptionResponse;  public class ModifyAccountDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccountDescriptionRequest req = ModifyAccountDescriptionRequest.fromJsonString(params, ModifyAccountDescriptionRequest.class);                          ModifyAccountDescriptionResponse resp = client.ModifyAccountDescription(req);                          System.out.println(ModifyAccountDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
953,分布式数据库 TDSQL,分布式数据库,修改同步模式,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBInstancesProjectRequest; import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBInstancesProjectResponse;  public class ModifyDBInstancesProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBInstancesProjectRequest req = ModifyDBInstancesProjectRequest.fromJsonString(params, ModifyDBInstancesProjectRequest.class);                          ModifyDBInstancesProjectResponse resp = client.ModifyDBInstancesProject(req);                          System.out.println(ModifyDBInstancesProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
954,分布式数据库 TDSQL,分布式数据库,开通外网访问,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBParametersRequest; import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBParametersResponse;  public class ModifyDBParameters {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBParametersRequest req = ModifyDBParametersRequest.fromJsonString(params, ModifyDBParametersRequest.class);                          ModifyDBParametersResponse resp = client.ModifyDBParameters(req);                          System.out.println(ModifyDBParametersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
955,分布式数据库 TDSQL,分布式数据库,续费分布式数据库实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBSyncModeRequest; import com.tencentcloudapi.dcdb.v20180411.models.ModifyDBSyncModeResponse;  public class ModifyDBSyncMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDBSyncModeRequest req = ModifyDBSyncModeRequest.fromJsonString(params, ModifyDBSyncModeRequest.class);                          ModifyDBSyncModeResponse resp = client.ModifyDBSyncMode(req);                          System.out.println(ModifyDBSyncModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
956,分布式数据库 TDSQL,分布式数据库,重置账号密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.OpenDBExtranetAccessRequest; import com.tencentcloudapi.dcdb.v20180411.models.OpenDBExtranetAccessResponse;  public class OpenDBExtranetAccess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             OpenDBExtranetAccessRequest req = OpenDBExtranetAccessRequest.fromJsonString(params, OpenDBExtranetAccessRequest.class);                          OpenDBExtranetAccessResponse resp = client.OpenDBExtranetAccess(req);                          System.out.println(OpenDBExtranetAccessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
957,分布式数据库 TDSQL,分布式数据库,升级分布式数据库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.RenewDCDBInstanceRequest; import com.tencentcloudapi.dcdb.v20180411.models.RenewDCDBInstanceResponse;  public class RenewDCDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             RenewDCDBInstanceRequest req = RenewDCDBInstanceRequest.fromJsonString(params, RenewDCDBInstanceRequest.class);                          RenewDCDBInstanceResponse resp = client.RenewDCDBInstance(req);                          System.out.println(RenewDCDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
958,数据传输服务 DTS,数据传输服务相关接口,完成数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dcdb.v20180411.DcdbClient;  import com.tencentcloudapi.dcdb.v20180411.models.UpgradeDCDBInstanceRequest; import com.tencentcloudapi.dcdb.v20180411.models.UpgradeDCDBInstanceResponse;  public class UpgradeDCDBInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dcdb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DcdbClient client = new DcdbClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeDCDBInstanceRequest req = UpgradeDCDBInstanceRequest.fromJsonString(params, UpgradeDCDBInstanceRequest.class);                          UpgradeDCDBInstanceResponse resp = client.UpgradeDCDBInstance(req);                          System.out.println(UpgradeDCDBInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
959,数据传输服务 DTS,数据传输服务相关接口,创建校验迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.CompleteMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.CompleteMigrateJobResponse;  public class CompleteMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             CompleteMigrateJobRequest req = CompleteMigrateJobRequest.fromJsonString(params, CompleteMigrateJobRequest.class);                          CompleteMigrateJobResponse resp = client.CompleteMigrateJob(req);                          System.out.println(CompleteMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
960,数据传输服务 DTS,数据传输服务相关接口,创建数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.CompleteMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.CompleteMigrateJobResponse;  public class CompleteMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             CompleteMigrateJobRequest req = CompleteMigrateJobRequest.fromJsonString(params, CompleteMigrateJobRequest.class);                          CompleteMigrateJobResponse resp = client.CompleteMigrateJob(req);                          System.out.println(CompleteMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
961,数据传输服务 DTS,数据传输服务相关接口,删除数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.CreateMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.CreateMigrateJobResponse;  public class CreateMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMigrateJobRequest req = CreateMigrateJobRequest.fromJsonString(params, CreateMigrateJobRequest.class);                          CreateMigrateJobResponse resp = client.CreateMigrateJob(req);                          System.out.println(CreateMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
962,数据传输服务 DTS,数据传输服务相关接口,获取迁移校验结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DeleteMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.DeleteMigrateJobResponse;  public class DeleteMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMigrateJobRequest req = DeleteMigrateJobRequest.fromJsonString(params, DeleteMigrateJobRequest.class);                          DeleteMigrateJobResponse resp = client.DeleteMigrateJob(req);                          System.out.println(DeleteMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
963,数据传输服务 DTS,数据传输服务相关接口,查询数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DeleteMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.DeleteMigrateJobResponse;  public class DeleteMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMigrateJobRequest req = DeleteMigrateJobRequest.fromJsonString(params, DeleteMigrateJobRequest.class);                          DeleteMigrateJobResponse resp = client.DeleteMigrateJob(req);                          System.out.println(DeleteMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
964,数据传输服务 DTS,数据传输服务相关接口,修改数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DescribeMigrateCheckJobRequest; import com.tencentcloudapi.dts.v20180330.models.DescribeMigrateCheckJobResponse;  public class DescribeMigrateCheckJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMigrateCheckJobRequest req = DescribeMigrateCheckJobRequest.fromJsonString(params, DescribeMigrateCheckJobRequest.class);                          DescribeMigrateCheckJobResponse resp = client.DescribeMigrateCheckJob(req);                          System.out.println(DescribeMigrateCheckJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
965,数据传输服务 DTS,数据传输服务相关接口,启动数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.ModifyMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.ModifyMigrateJobResponse;  public class ModifyMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMigrateJobRequest req = ModifyMigrateJobRequest.fromJsonString(params, ModifyMigrateJobRequest.class);                          ModifyMigrateJobResponse resp = client.ModifyMigrateJob(req);                          System.out.println(ModifyMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
966,数据传输服务 DTS,数据传输服务相关接口,撤销数据迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.StartMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.StartMigrateJobResponse;  public class StartMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             StartMigrateJobRequest req = StartMigrateJobRequest.fromJsonString(params, StartMigrateJobRequest.class);                          StartMigrateJobResponse resp = client.StartMigrateJob(req);                          System.out.println(StartMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
967,数据传输服务 DTS,灾备同步相关接口,校验灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.StopMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.StopMigrateJobResponse;  public class StopMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             StopMigrateJobRequest req = StopMigrateJobRequest.fromJsonString(params, StopMigrateJobRequest.class);                          StopMigrateJobResponse resp = client.StopMigrateJob(req);                          System.out.println(StopMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
968,数据传输服务 DTS,灾备同步相关接口,创建灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.StopMigrateJobRequest; import com.tencentcloudapi.dts.v20180330.models.StopMigrateJobResponse;  public class StopMigrateJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             StopMigrateJobRequest req = StopMigrateJobRequest.fromJsonString(params, StopMigrateJobRequest.class);                          StopMigrateJobResponse resp = client.StopMigrateJob(req);                          System.out.println(StopMigrateJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
969,数据传输服务 DTS,灾备同步相关接口,删除灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.CreateSyncCheckJobRequest; import com.tencentcloudapi.dts.v20180330.models.CreateSyncCheckJobResponse;  public class CreateSyncCheckJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSyncCheckJobRequest req = CreateSyncCheckJobRequest.fromJsonString(params, CreateSyncCheckJobRequest.class);                          CreateSyncCheckJobResponse resp = client.CreateSyncCheckJob(req);                          System.out.println(CreateSyncCheckJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
970,数据传输服务 DTS,灾备同步相关接口,查询灾备同步任务校验结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DeleteSyncJobRequest; import com.tencentcloudapi.dts.v20180330.models.DeleteSyncJobResponse;  public class DeleteSyncJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSyncJobRequest req = DeleteSyncJobRequest.fromJsonString(params, DeleteSyncJobRequest.class);                          DeleteSyncJobResponse resp = client.DeleteSyncJob(req);                          System.out.println(DeleteSyncJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
971,数据传输服务 DTS,灾备同步相关接口,查询在迁移平台发起的灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DeleteSyncJobRequest; import com.tencentcloudapi.dts.v20180330.models.DeleteSyncJobResponse;  public class DeleteSyncJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSyncJobRequest req = DeleteSyncJobRequest.fromJsonString(params, DeleteSyncJobRequest.class);                          DeleteSyncJobResponse resp = client.DeleteSyncJob(req);                          System.out.println(DeleteSyncJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
972,数据传输服务 DTS,灾备同步相关接口,修改灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DescribeSyncCheckJobRequest; import com.tencentcloudapi.dts.v20180330.models.DescribeSyncCheckJobResponse;  public class DescribeSyncCheckJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSyncCheckJobRequest req = DescribeSyncCheckJobRequest.fromJsonString(params, DescribeSyncCheckJobRequest.class);                          DescribeSyncCheckJobResponse resp = client.DescribeSyncCheckJob(req);                          System.out.println(DescribeSyncCheckJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
973,数据传输服务 DTS,灾备同步相关接口,开始灾备同步任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.DescribeSyncJobsRequest; import com.tencentcloudapi.dts.v20180330.models.DescribeSyncJobsResponse;  public class DescribeSyncJobs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSyncJobsRequest req = DescribeSyncJobsRequest.fromJsonString(params, DescribeSyncJobsRequest.class);                          DescribeSyncJobsResponse resp = client.DescribeSyncJobs(req);                          System.out.println(DescribeSyncJobsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
974,数据传输服务 DTS,灾备同步相关接口,灾备升级为主实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.ModifySyncJobRequest; import com.tencentcloudapi.dts.v20180330.models.ModifySyncJobResponse;  public class ModifySyncJob {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""dts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySyncJobRequest req = ModifySyncJobRequest.fromJsonString(params, ModifySyncJobRequest.class);                          ModifySyncJobResponse resp = client.ModifySyncJob(req);                          System.out.println(ModifySyncJobRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
975,物联卡,发送短信接口,发送短信息接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.dts.v20180330.DtsClient;  import com.tencentcloudapi.dts.v20180330.models.SwitchDrToMasterRequest; import com.tencentcloudapi.dts.v20180330.models.SwitchDrToMasterResponse;  public class SwitchDrToMaster {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DtsClient client = new DtsClient(cred, """", clientProfile);                          String params = ""{}"";             SwitchDrToMasterRequest req = SwitchDrToMasterRequest.fromJsonString(params, SwitchDrToMasterRequest.class);                          SwitchDrToMasterResponse resp = client.SwitchDrToMaster(req);                          System.out.println(SwitchDrToMasterRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
976,物联卡,查询卡片信息接口,查询卡片详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.SendSmsRequest; import com.tencentcloudapi.ic.v20190307.models.SendSmsResponse;  public class SendSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             SendSmsRequest req = SendSmsRequest.fromJsonString(params, SendSmsRequest.class);                          SendSmsResponse resp = client.SendSms(req);                          System.out.println(SendSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
977,物联卡,查询卡片信息接口,查询卡片列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.SendSmsRequest; import com.tencentcloudapi.ic.v20190307.models.SendSmsResponse;  public class SendSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             SendSmsRequest req = SendSmsRequest.fromJsonString(params, SendSmsRequest.class);                          SendSmsResponse resp = client.SendSms(req);                          System.out.println(SendSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
978,物联卡,查询应用信息接口,查询应用详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.DescribeCardsRequest; import com.tencentcloudapi.ic.v20190307.models.DescribeCardsResponse;  public class DescribeCards {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCardsRequest req = DescribeCardsRequest.fromJsonString(params, DescribeCardsRequest.class);                          DescribeCardsResponse resp = client.DescribeCards(req);                          System.out.println(DescribeCardsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
979,物联卡,群发短信接口,群发短信接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.DescribeCardsRequest; import com.tencentcloudapi.ic.v20190307.models.DescribeCardsResponse;  public class DescribeCards {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCardsRequest req = DescribeCardsRequest.fromJsonString(params, DescribeCardsRequest.class);                          DescribeCardsResponse resp = client.DescribeCards(req);                          System.out.println(DescribeCardsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
980,TBaaS,FISCO BCOS相关接口,按块高查询区块信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsRequest; import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsResponse;  public class SendMultiSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             SendMultiSmsRequest req = SendMultiSmsRequest.fromJsonString(params, SendMultiSmsRequest.class);                          SendMultiSmsResponse resp = client.SendMultiSms(req);                          System.out.println(SendMultiSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
981,TBaaS,FISCO BCOS相关接口,查询区块列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsRequest; import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsResponse;  public class SendMultiSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             SendMultiSmsRequest req = SendMultiSmsRequest.fromJsonString(params, SendMultiSmsRequest.class);                          SendMultiSmsResponse resp = client.SendMultiSms(req);                          System.out.println(SendMultiSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
982,TBaaS,FISCO BCOS相关接口,根据交易哈希查询交易信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ic.v20190307.IcClient;  import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsRequest; import com.tencentcloudapi.ic.v20190307.models.SendMultiSmsResponse;  public class SendMultiSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ic.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IcClient client = new IcClient(cred, """", clientProfile);                          String params = ""{}"";             SendMultiSmsRequest req = SendMultiSmsRequest.fromJsonString(params, SendMultiSmsRequest.class);                          SendMultiSmsResponse resp = client.SendMultiSms(req);                          System.out.println(SendMultiSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
983,TBaaS,FISCO BCOS相关接口,查询交易列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.BlockByNumberHandlerRequest; import com.tencentcloudapi.tbaas.v20180416.models.BlockByNumberHandlerResponse;  public class BlockByNumberHandler {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             BlockByNumberHandlerRequest req = BlockByNumberHandlerRequest.fromJsonString(params, BlockByNumberHandlerRequest.class);                          BlockByNumberHandlerResponse resp = client.BlockByNumberHandler(req);                          System.out.println(BlockByNumberHandlerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
984,TBaaS,FISCO BCOS相关接口,发送交易,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.GetTransListHandlerRequest; import com.tencentcloudapi.tbaas.v20180416.models.GetTransListHandlerResponse;  public class GetTransListHandler {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             GetTransListHandlerRequest req = GetTransListHandlerRequest.fromJsonString(params, GetTransListHandlerRequest.class);                          GetTransListHandlerResponse resp = client.GetTransListHandler(req);                          System.out.println(GetTransListHandlerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
985,TBaaS,Hyperledger Fabric交易相关接口,Invoke异步调用结果查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.SendTransactionHandlerRequest; import com.tencentcloudapi.tbaas.v20180416.models.SendTransactionHandlerResponse;  public class SendTransactionHandler {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             SendTransactionHandlerRequest req = SendTransactionHandlerRequest.fromJsonString(params, SendTransactionHandlerRequest.class);                          SendTransactionHandlerResponse resp = client.SendTransactionHandler(req);                          System.out.println(SendTransactionHandlerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
986,TBaaS,Hyperledger Fabric交易相关接口,新增交易,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.SendTransactionHandlerRequest; import com.tencentcloudapi.tbaas.v20180416.models.SendTransactionHandlerResponse;  public class SendTransactionHandler {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             SendTransactionHandlerRequest req = SendTransactionHandlerRequest.fromJsonString(params, SendTransactionHandlerRequest.class);                          SendTransactionHandlerResponse resp = client.SendTransactionHandler(req);                          System.out.println(SendTransactionHandlerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
987,TBaaS,Hyperledger Fabric交易相关接口,查询交易,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.GetInvokeTxRequest; import com.tencentcloudapi.tbaas.v20180416.models.GetInvokeTxResponse;  public class GetInvokeTx {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             GetInvokeTxRequest req = GetInvokeTxRequest.fromJsonString(params, GetInvokeTxRequest.class);                          GetInvokeTxResponse resp = client.GetInvokeTx(req);                          System.out.println(GetInvokeTxRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
988,TBaaS,Hyperledger Fabric链状态相关接口,查询区块列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.QueryRequest; import com.tencentcloudapi.tbaas.v20180416.models.QueryResponse;  public class Query {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             QueryRequest req = QueryRequest.fromJsonString(params, QueryRequest.class);                          QueryResponse resp = client.Query(req);                          System.out.println(QueryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
989,TBaaS,Hyperledger Fabric链状态相关接口,获取区块链网络概要,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.QueryRequest; import com.tencentcloudapi.tbaas.v20180416.models.QueryResponse;  public class Query {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             QueryRequest req = QueryRequest.fromJsonString(params, QueryRequest.class);                          QueryResponse resp = client.Query(req);                          System.out.println(QueryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
990,TBaaS,Hyperledger Fabric链状态相关接口,获取最新交易列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.GetBlockListRequest; import com.tencentcloudapi.tbaas.v20180416.models.GetBlockListResponse;  public class GetBlockList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             GetBlockListRequest req = GetBlockListRequest.fromJsonString(params, GetBlockListRequest.class);                          GetBlockListResponse resp = client.GetBlockList(req);                          System.out.println(GetBlockListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
991,TBaaS,TrustSQL业务场景相关接口,trustsql服务统一接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.GetClusterSummaryRequest; import com.tencentcloudapi.tbaas.v20180416.models.GetClusterSummaryResponse;  public class GetClusterSummary {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             GetClusterSummaryRequest req = GetClusterSummaryRequest.fromJsonString(params, GetClusterSummaryRequest.class);                          GetClusterSummaryResponse resp = client.GetClusterSummary(req);                          System.out.println(GetClusterSummaryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
992,TBaaS,证书相关接口,申请用户证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.SrvInvokeRequest; import com.tencentcloudapi.tbaas.v20180416.models.SrvInvokeResponse;  public class SrvInvoke {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             SrvInvokeRequest req = SrvInvokeRequest.fromJsonString(params, SrvInvokeRequest.class);                          SrvInvokeResponse resp = client.SrvInvoke(req);                          System.out.println(SrvInvokeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
993,TBaaS,证书相关接口,下载用户证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.SrvInvokeRequest; import com.tencentcloudapi.tbaas.v20180416.models.SrvInvokeResponse;  public class SrvInvoke {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             SrvInvokeRequest req = SrvInvokeRequest.fromJsonString(params, SrvInvokeRequest.class);                          SrvInvokeResponse resp = client.SrvInvoke(req);                          System.out.println(SrvInvokeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
994,云监控,云监控相关接口,获取基础指标详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.ApplyUserCertRequest; import com.tencentcloudapi.tbaas.v20180416.models.ApplyUserCertResponse;  public class ApplyUserCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbaas.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             ApplyUserCertRequest req = ApplyUserCertRequest.fromJsonString(params, ApplyUserCertRequest.class);                          ApplyUserCertResponse resp = client.ApplyUserCert(req);                          System.out.println(ApplyUserCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
995,云监控,云监控相关接口,拉取指标监控数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbaas.v20180416.TbaasClient;  import com.tencentcloudapi.tbaas.v20180416.models.DownloadUserCertRequest; import com.tencentcloudapi.tbaas.v20180416.models.DownloadUserCertResponse;  public class DownloadUserCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""monitor.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbaasClient client = new TbaasClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadUserCertRequest req = DownloadUserCertRequest.fromJsonString(params, DownloadUserCertRequest.class);                          DownloadUserCertResponse resp = client.DownloadUserCert(req);                          System.out.println(DownloadUserCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
996,访问管理,用户相关接口,添加子用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.monitor.v20180724.MonitorClient;  import com.tencentcloudapi.monitor.v20180724.models.DescribeBaseMetricsRequest; import com.tencentcloudapi.monitor.v20180724.models.DescribeBaseMetricsResponse;  public class DescribeBaseMetrics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""monitor.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MonitorClient client = new MonitorClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBaseMetricsRequest req = DescribeBaseMetricsRequest.fromJsonString(params, DescribeBaseMetricsRequest.class);                          DescribeBaseMetricsResponse resp = client.DescribeBaseMetrics(req);                          System.out.println(DescribeBaseMetricsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
997,访问管理,用户相关接口,用户加入到用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.monitor.v20180724.MonitorClient;  import com.tencentcloudapi.monitor.v20180724.models.GetMonitorDataRequest; import com.tencentcloudapi.monitor.v20180724.models.GetMonitorDataResponse;  public class GetMonitorData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MonitorClient client = new MonitorClient(cred, """", clientProfile);                          String params = ""{}"";             GetMonitorDataRequest req = GetMonitorDataRequest.fromJsonString(params, GetMonitorDataRequest.class);                          GetMonitorDataResponse resp = client.GetMonitorData(req);                          System.out.println(GetMonitorDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
998,访问管理,用户相关接口,验证自定义多因子Token,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AddUserRequest; import com.tencentcloudapi.cam.v20190116.models.AddUserResponse;  public class AddUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AddUserRequest req = AddUserRequest.fromJsonString(params, AddUserRequest.class);                          AddUserResponse resp = client.AddUser(req);                          System.out.println(AddUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
999,访问管理,用户相关接口,创建用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AddUserToGroupRequest; import com.tencentcloudapi.cam.v20190116.models.AddUserToGroupResponse;  public class AddUserToGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AddUserToGroupRequest req = AddUserToGroupRequest.fromJsonString(params, AddUserToGroupRequest.class);                          AddUserToGroupResponse resp = client.AddUserToGroup(req);                          System.out.println(AddUserToGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1000,访问管理,用户相关接口,删除用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ConsumeCustomMFATokenRequest; import com.tencentcloudapi.cam.v20190116.models.ConsumeCustomMFATokenResponse;  public class ConsumeCustomMFAToken {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ConsumeCustomMFATokenRequest req = ConsumeCustomMFATokenRequest.fromJsonString(params, ConsumeCustomMFATokenRequest.class);                          ConsumeCustomMFATokenResponse resp = client.ConsumeCustomMFAToken(req);                          System.out.println(ConsumeCustomMFATokenRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1001,访问管理,用户相关接口,删除子用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.CreateGroupRequest; import com.tencentcloudapi.cam.v20190116.models.CreateGroupResponse;  public class CreateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             CreateGroupRequest req = CreateGroupRequest.fromJsonString(params, CreateGroupRequest.class);                          CreateGroupResponse resp = client.CreateGroup(req);                          System.out.println(CreateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1002,访问管理,用户相关接口,获取自定义多因子Token关联信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeleteGroupRequest; import com.tencentcloudapi.cam.v20190116.models.DeleteGroupResponse;  public class DeleteGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteGroupRequest req = DeleteGroupRequest.fromJsonString(params, DeleteGroupRequest.class);                          DeleteGroupResponse resp = client.DeleteGroup(req);                          System.out.println(DeleteGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1003,访问管理,用户相关接口,查询用户组详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeleteUserRequest; import com.tencentcloudapi.cam.v20190116.models.DeleteUserResponse;  public class DeleteUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteUserRequest req = DeleteUserRequest.fromJsonString(params, DeleteUserRequest.class);                          DeleteUserResponse resp = client.DeleteUser(req);                          System.out.println(DeleteUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1004,访问管理,用户相关接口,查询子用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.GetCustomMFATokenInfoRequest; import com.tencentcloudapi.cam.v20190116.models.GetCustomMFATokenInfoResponse;  public class GetCustomMFATokenInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             GetCustomMFATokenInfoRequest req = GetCustomMFATokenInfoRequest.fromJsonString(params, GetCustomMFATokenInfoRequest.class);                          GetCustomMFATokenInfoResponse resp = client.GetCustomMFATokenInfo(req);                          System.out.println(GetCustomMFATokenInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1005,访问管理,用户相关接口,查询用户组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.GetGroupRequest; import com.tencentcloudapi.cam.v20190116.models.GetGroupResponse;  public class GetGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             GetGroupRequest req = GetGroupRequest.fromJsonString(params, GetGroupRequest.class);                          GetGroupResponse resp = client.GetGroup(req);                          System.out.println(GetGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1006,访问管理,用户相关接口,列出用户关联的用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.GetUserRequest; import com.tencentcloudapi.cam.v20190116.models.GetUserResponse;  public class GetUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             GetUserRequest req = GetUserRequest.fromJsonString(params, GetUserRequest.class);                          GetUserResponse resp = client.GetUser(req);                          System.out.println(GetUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1007,访问管理,用户相关接口,拉取子用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListGroupsRequest; import com.tencentcloudapi.cam.v20190116.models.ListGroupsResponse;  public class ListGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListGroupsRequest req = ListGroupsRequest.fromJsonString(params, ListGroupsRequest.class);                          ListGroupsResponse resp = client.ListGroups(req);                          System.out.println(ListGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1008,访问管理,用户相关接口,查询用户组关联的用户列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListGroupsForUserRequest; import com.tencentcloudapi.cam.v20190116.models.ListGroupsForUserResponse;  public class ListGroupsForUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListGroupsForUserRequest req = ListGroupsForUserRequest.fromJsonString(params, ListGroupsForUserRequest.class);                          ListGroupsForUserResponse resp = client.ListGroupsForUser(req);                          System.out.println(ListGroupsForUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1009,访问管理,用户相关接口,从用户组删除用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListUsersRequest; import com.tencentcloudapi.cam.v20190116.models.ListUsersResponse;  public class ListUsers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListUsersRequest req = ListUsersRequest.fromJsonString(params, ListUsersRequest.class);                          ListUsersResponse resp = client.ListUsers(req);                          System.out.println(ListUsersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1010,访问管理,用户相关接口,设置用户的登录，敏感操作，异步登录设置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListUsersForGroupRequest; import com.tencentcloudapi.cam.v20190116.models.ListUsersForGroupResponse;  public class ListUsersForGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListUsersForGroupRequest req = ListUsersForGroupRequest.fromJsonString(params, ListUsersForGroupRequest.class);                          ListUsersForGroupResponse resp = client.ListUsersForGroup(req);                          System.out.println(ListUsersForGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1011,访问管理,用户相关接口,更新用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.RemoveUserFromGroupRequest; import com.tencentcloudapi.cam.v20190116.models.RemoveUserFromGroupResponse;  public class RemoveUserFromGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveUserFromGroupRequest req = RemoveUserFromGroupRequest.fromJsonString(params, RemoveUserFromGroupRequest.class);                          RemoveUserFromGroupResponse resp = client.RemoveUserFromGroup(req);                          System.out.println(RemoveUserFromGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1012,访问管理,用户相关接口,更新子用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.SetFlagRequest; import com.tencentcloudapi.cam.v20190116.models.SetFlagResponse;  public class SetFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             SetFlagRequest req = SetFlagRequest.fromJsonString(params, SetFlagRequest.class);                          SetFlagResponse resp = client.SetFlag(req);                          System.out.println(SetFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1013,访问管理,策略相关接口,绑定策略到用户组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdateUserRequest; import com.tencentcloudapi.cam.v20190116.models.UpdateUserResponse;  public class UpdateUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateUserRequest req = UpdateUserRequest.fromJsonString(params, UpdateUserRequest.class);                          UpdateUserResponse resp = client.UpdateUser(req);                          System.out.println(UpdateUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1014,访问管理,策略相关接口,绑定策略到用户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AttachGroupPolicyRequest; import com.tencentcloudapi.cam.v20190116.models.AttachGroupPolicyResponse;  public class AttachGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AttachGroupPolicyRequest req = AttachGroupPolicyRequest.fromJsonString(params, AttachGroupPolicyRequest.class);                          AttachGroupPolicyResponse resp = client.AttachGroupPolicy(req);                          System.out.println(AttachGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1015,访问管理,策略相关接口,创建策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AttachGroupPolicyRequest; import com.tencentcloudapi.cam.v20190116.models.AttachGroupPolicyResponse;  public class AttachGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AttachGroupPolicyRequest req = AttachGroupPolicyRequest.fromJsonString(params, AttachGroupPolicyRequest.class);                          AttachGroupPolicyResponse resp = client.AttachGroupPolicy(req);                          System.out.println(AttachGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1016,访问管理,策略相关接口,删除策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AttachUserPolicyRequest; import com.tencentcloudapi.cam.v20190116.models.AttachUserPolicyResponse;  public class AttachUserPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AttachUserPolicyRequest req = AttachUserPolicyRequest.fromJsonString(params, AttachUserPolicyRequest.class);                          AttachUserPolicyResponse resp = client.AttachUserPolicy(req);                          System.out.println(AttachUserPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1017,访问管理,策略相关接口,解除绑定到用户组的策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.CreatePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.CreatePolicyResponse;  public class CreatePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePolicyRequest req = CreatePolicyRequest.fromJsonString(params, CreatePolicyRequest.class);                          CreatePolicyResponse resp = client.CreatePolicy(req);                          System.out.println(CreatePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1018,访问管理,策略相关接口,解除绑定到用户的策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeletePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.DeletePolicyResponse;  public class DeletePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePolicyRequest req = DeletePolicyRequest.fromJsonString(params, DeletePolicyRequest.class);                          DeletePolicyResponse resp = client.DeletePolicy(req);                          System.out.println(DeletePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1019,访问管理,策略相关接口,查看策略详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DetachGroupPolicyRequest; import com.tencentcloudapi.cam.v20190116.models.DetachGroupPolicyResponse;  public class DetachGroupPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DetachGroupPolicyRequest req = DetachGroupPolicyRequest.fromJsonString(params, DetachGroupPolicyRequest.class);                          DetachGroupPolicyResponse resp = client.DetachGroupPolicy(req);                          System.out.println(DetachGroupPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1020,访问管理,策略相关接口,查询用户组关联的策略列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DetachUserPolicyRequest; import com.tencentcloudapi.cam.v20190116.models.DetachUserPolicyResponse;  public class DetachUserPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DetachUserPolicyRequest req = DetachUserPolicyRequest.fromJsonString(params, DetachUserPolicyRequest.class);                          DetachUserPolicyResponse resp = client.DetachUserPolicy(req);                          System.out.println(DetachUserPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1021,访问管理,策略相关接口,查询子账号关联的策略列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListAttachedGroupPoliciesRequest; import com.tencentcloudapi.cam.v20190116.models.ListAttachedGroupPoliciesResponse;  public class ListAttachedGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListAttachedGroupPoliciesRequest req = ListAttachedGroupPoliciesRequest.fromJsonString(params, ListAttachedGroupPoliciesRequest.class);                          ListAttachedGroupPoliciesResponse resp = client.ListAttachedGroupPolicies(req);                          System.out.println(ListAttachedGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1022,访问管理,策略相关接口,查询策略关联的实体列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListAttachedGroupPoliciesRequest; import com.tencentcloudapi.cam.v20190116.models.ListAttachedGroupPoliciesResponse;  public class ListAttachedGroupPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListAttachedGroupPoliciesRequest req = ListAttachedGroupPoliciesRequest.fromJsonString(params, ListAttachedGroupPoliciesRequest.class);                          ListAttachedGroupPoliciesResponse resp = client.ListAttachedGroupPolicies(req);                          System.out.println(ListAttachedGroupPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1023,访问管理,策略相关接口,查询策略列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListAttachedUserPoliciesRequest; import com.tencentcloudapi.cam.v20190116.models.ListAttachedUserPoliciesResponse;  public class ListAttachedUserPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListAttachedUserPoliciesRequest req = ListAttachedUserPoliciesRequest.fromJsonString(params, ListAttachedUserPoliciesRequest.class);                          ListAttachedUserPoliciesResponse resp = client.ListAttachedUserPolicies(req);                          System.out.println(ListAttachedUserPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1024,访问管理,策略相关接口,更新策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListPoliciesRequest; import com.tencentcloudapi.cam.v20190116.models.ListPoliciesResponse;  public class ListPolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListPoliciesRequest req = ListPoliciesRequest.fromJsonString(params, ListPoliciesRequest.class);                          ListPoliciesResponse resp = client.ListPolicies(req);                          System.out.println(ListPoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1025,访问管理,角色相关接口,绑定权限策略到角色,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdatePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.UpdatePolicyResponse;  public class UpdatePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdatePolicyRequest req = UpdatePolicyRequest.fromJsonString(params, UpdatePolicyRequest.class);                          UpdatePolicyResponse resp = client.UpdatePolicy(req);                          System.out.println(UpdatePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1026,访问管理,角色相关接口,创建角色,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdatePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.UpdatePolicyResponse;  public class UpdatePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdatePolicyRequest req = UpdatePolicyRequest.fromJsonString(params, UpdatePolicyRequest.class);                          UpdatePolicyResponse resp = client.UpdatePolicy(req);                          System.out.println(UpdatePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1027,访问管理,角色相关接口,删除角色,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.AttachRolePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.AttachRolePolicyResponse;  public class AttachRolePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             AttachRolePolicyRequest req = AttachRolePolicyRequest.fromJsonString(params, AttachRolePolicyRequest.class);                          AttachRolePolicyResponse resp = client.AttachRolePolicy(req);                          System.out.println(AttachRolePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1028,访问管理,角色相关接口,获取角色列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.CreateRoleRequest; import com.tencentcloudapi.cam.v20190116.models.CreateRoleResponse;  public class CreateRole {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRoleRequest req = CreateRoleRequest.fromJsonString(params, CreateRoleRequest.class);                          CreateRoleResponse resp = client.CreateRole(req);                          System.out.println(CreateRoleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1029,访问管理,角色相关接口,解绑角色的策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeleteRoleRequest; import com.tencentcloudapi.cam.v20190116.models.DeleteRoleResponse;  public class DeleteRole {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRoleRequest req = DeleteRoleRequest.fromJsonString(params, DeleteRoleRequest.class);                          DeleteRoleResponse resp = client.DeleteRole(req);                          System.out.println(DeleteRoleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1030,访问管理,角色相关接口,获取角色详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DescribeRoleListRequest; import com.tencentcloudapi.cam.v20190116.models.DescribeRoleListResponse;  public class DescribeRoleList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRoleListRequest req = DescribeRoleListRequest.fromJsonString(params, DescribeRoleListRequest.class);                          DescribeRoleListResponse resp = client.DescribeRoleList(req);                          System.out.println(DescribeRoleListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1031,访问管理,角色相关接口,获取角色绑定的策略列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DetachRolePolicyRequest; import com.tencentcloudapi.cam.v20190116.models.DetachRolePolicyResponse;  public class DetachRolePolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DetachRolePolicyRequest req = DetachRolePolicyRequest.fromJsonString(params, DetachRolePolicyRequest.class);                          DetachRolePolicyResponse resp = client.DetachRolePolicy(req);                          System.out.println(DetachRolePolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1032,访问管理,角色相关接口,修改角色信任策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.GetRoleRequest; import com.tencentcloudapi.cam.v20190116.models.GetRoleResponse;  public class GetRole {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             GetRoleRequest req = GetRoleRequest.fromJsonString(params, GetRoleRequest.class);                          GetRoleResponse resp = client.GetRole(req);                          System.out.println(GetRoleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1033,访问管理,角色相关接口,修改角色描述信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.ListAttachedRolePoliciesRequest; import com.tencentcloudapi.cam.v20190116.models.ListAttachedRolePoliciesResponse;  public class ListAttachedRolePolicies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             ListAttachedRolePoliciesRequest req = ListAttachedRolePoliciesRequest.fromJsonString(params, ListAttachedRolePoliciesRequest.class);                          ListAttachedRolePoliciesResponse resp = client.ListAttachedRolePolicies(req);                          System.out.println(ListAttachedRolePoliciesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1034,访问管理,身份提供商相关接口,创建SAML身份提供商,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdateRoleDescriptionRequest; import com.tencentcloudapi.cam.v20190116.models.UpdateRoleDescriptionResponse;  public class UpdateRoleDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateRoleDescriptionRequest req = UpdateRoleDescriptionRequest.fromJsonString(params, UpdateRoleDescriptionRequest.class);                          UpdateRoleDescriptionResponse resp = client.UpdateRoleDescription(req);                          System.out.println(UpdateRoleDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1035,访问管理,身份提供商相关接口,删除SAML身份提供商,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdateRoleDescriptionRequest; import com.tencentcloudapi.cam.v20190116.models.UpdateRoleDescriptionResponse;  public class UpdateRoleDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateRoleDescriptionRequest req = UpdateRoleDescriptionRequest.fromJsonString(params, UpdateRoleDescriptionRequest.class);                          UpdateRoleDescriptionResponse resp = client.UpdateRoleDescription(req);                          System.out.println(UpdateRoleDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1036,访问管理,身份提供商相关接口,查询SAML身份提供商详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeleteSAMLProviderRequest; import com.tencentcloudapi.cam.v20190116.models.DeleteSAMLProviderResponse;  public class DeleteSAMLProvider {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSAMLProviderRequest req = DeleteSAMLProviderRequest.fromJsonString(params, DeleteSAMLProviderRequest.class);                          DeleteSAMLProviderResponse resp = client.DeleteSAMLProvider(req);                          System.out.println(DeleteSAMLProviderRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1037,访问管理,身份提供商相关接口,查询SAML身份提供商列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.DeleteSAMLProviderRequest; import com.tencentcloudapi.cam.v20190116.models.DeleteSAMLProviderResponse;  public class DeleteSAMLProvider {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSAMLProviderRequest req = DeleteSAMLProviderRequest.fromJsonString(params, DeleteSAMLProviderRequest.class);                          DeleteSAMLProviderResponse resp = client.DeleteSAMLProvider(req);                          System.out.println(DeleteSAMLProviderRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1038,访问管理,身份提供商相关接口,更新SAML身份提供商信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.GetSAMLProviderRequest; import com.tencentcloudapi.cam.v20190116.models.GetSAMLProviderResponse;  public class GetSAMLProvider {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             GetSAMLProviderRequest req = GetSAMLProviderRequest.fromJsonString(params, GetSAMLProviderRequest.class);                          GetSAMLProviderResponse resp = client.GetSAMLProvider(req);                          System.out.println(GetSAMLProviderRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1039,安全凭证服务,STS相关接口,申请扮演角色,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cam.v20190116.CamClient;  import com.tencentcloudapi.cam.v20190116.models.UpdateSAMLProviderRequest; import com.tencentcloudapi.cam.v20190116.models.UpdateSAMLProviderResponse;  public class UpdateSAMLProvider {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cam.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CamClient client = new CamClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateSAMLProviderRequest req = UpdateSAMLProviderRequest.fromJsonString(params, UpdateSAMLProviderRequest.class);                          UpdateSAMLProviderResponse resp = client.UpdateSAMLProvider(req);                          System.out.println(UpdateSAMLProviderRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1040,安全凭证服务,STS相关接口,根据 SAML 断言申请角色临时凭证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sts.v20180813.StsClient;  import com.tencentcloudapi.sts.v20180813.models.AssumeRoleRequest; import com.tencentcloudapi.sts.v20180813.models.AssumeRoleResponse;  public class AssumeRole {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      StsClient client = new StsClient(cred, """", clientProfile);                          String params = ""{}"";             AssumeRoleRequest req = AssumeRoleRequest.fromJsonString(params, AssumeRoleRequest.class);                          AssumeRoleResponse resp = client.AssumeRole(req);                          System.out.println(AssumeRoleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1041,安全凭证服务,STS相关接口,获取联合身份临时访问凭证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sts.v20180813.StsClient;  import com.tencentcloudapi.sts.v20180813.models.AssumeRoleRequest; import com.tencentcloudapi.sts.v20180813.models.AssumeRoleResponse;  public class AssumeRole {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      StsClient client = new StsClient(cred, """", clientProfile);                          String params = ""{}"";             AssumeRoleRequest req = AssumeRoleRequest.fromJsonString(params, AssumeRoleRequest.class);                          AssumeRoleResponse resp = client.AssumeRole(req);                          System.out.println(AssumeRoleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1042,主机安全,入侵检测相关接口,删除恶意请求记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sts.v20180813.StsClient;  import com.tencentcloudapi.sts.v20180813.models.GetFederationTokenRequest; import com.tencentcloudapi.sts.v20180813.models.GetFederationTokenResponse;  public class GetFederationToken {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      StsClient client = new StsClient(cred, """", clientProfile);                          String params = ""{}"";             GetFederationTokenRequest req = GetFederationTokenRequest.fromJsonString(params, GetFederationTokenRequest.class);                          GetFederationTokenResponse resp = client.GetFederationToken(req);                          System.out.println(GetFederationTokenRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1043,主机安全,入侵检测相关接口,删除木马记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sts.v20180813.StsClient;  import com.tencentcloudapi.sts.v20180813.models.GetFederationTokenRequest; import com.tencentcloudapi.sts.v20180813.models.GetFederationTokenResponse;  public class GetFederationToken {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sts.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      StsClient client = new StsClient(cred, """", clientProfile);                          String params = ""{}"";             GetFederationTokenRequest req = GetFederationTokenRequest.fromJsonString(params, GetFederationTokenRequest.class);                          GetFederationTokenResponse resp = client.GetFederationToken(req);                          System.out.println(GetFederationTokenRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1044,主机安全,入侵检测相关接口,获取云镜破解事件列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteMaliciousRequestsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteMaliciousRequestsResponse;  public class DeleteMaliciousRequests {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMaliciousRequestsRequest req = DeleteMaliciousRequestsRequest.fromJsonString(params, DeleteMaliciousRequestsRequest.class);                          DeleteMaliciousRequestsResponse resp = client.DeleteMaliciousRequests(req);                          System.out.println(DeleteMaliciousRequestsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1045,主机安全,入侵检测相关接口,获取恶意请求数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteMalwaresResponse;  public class DeleteMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMalwaresRequest req = DeleteMalwaresRequest.fromJsonString(params, DeleteMalwaresRequest.class);                          DeleteMalwaresResponse resp = client.DeleteMalwares(req);                          System.out.println(DeleteMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1046,主机安全,入侵检测相关接口,获取木马信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeBruteAttacksRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeBruteAttacksResponse;  public class DescribeBruteAttacks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBruteAttacksRequest req = DescribeBruteAttacksRequest.fromJsonString(params, DescribeBruteAttacksRequest.class);                          DescribeBruteAttacksResponse resp = client.DescribeBruteAttacks(req);                          System.out.println(DescribeBruteAttacksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1047,主机安全,入侵检测相关接口,获取异地登录事件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeMaliciousRequestsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeMaliciousRequestsResponse;  public class DescribeMaliciousRequests {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMaliciousRequestsRequest req = DescribeMaliciousRequestsRequest.fromJsonString(params, DescribeMaliciousRequestsRequest.class);                          DescribeMaliciousRequestsResponse resp = client.DescribeMaliciousRequests(req);                          System.out.println(DescribeMaliciousRequestsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1048,主机安全,入侵检测相关接口,导出下载恶意请求文件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeMalwaresResponse;  public class DescribeMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMalwaresRequest req = DescribeMalwaresRequest.fromJsonString(params, DescribeMalwaresRequest.class);                          DescribeMalwaresResponse resp = client.DescribeMalwares(req);                          System.out.println(DescribeMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1049,主机安全,入侵检测相关接口,误报异地登录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeNonlocalLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeNonlocalLoginPlacesResponse;  public class DescribeNonlocalLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeNonlocalLoginPlacesRequest req = DescribeNonlocalLoginPlacesRequest.fromJsonString(params, DescribeNonlocalLoginPlacesRequest.class);                          DescribeNonlocalLoginPlacesResponse resp = client.DescribeNonlocalLoginPlaces(req);                          System.out.println(DescribeNonlocalLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1050,主机安全,入侵检测相关接口,恢复木马文件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.ExportMaliciousRequestsRequest; import com.tencentcloudapi.yunjing.v20180228.models.ExportMaliciousRequestsResponse;  public class ExportMaliciousRequests {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             ExportMaliciousRequestsRequest req = ExportMaliciousRequestsRequest.fromJsonString(params, ExportMaliciousRequestsRequest.class);                          ExportMaliciousRequestsResponse resp = client.ExportMaliciousRequests(req);                          System.out.println(ExportMaliciousRequestsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1051,主机安全,入侵检测相关接口,隔离木马,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.MisAlarmNonlocalLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.MisAlarmNonlocalLoginPlacesResponse;  public class MisAlarmNonlocalLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             MisAlarmNonlocalLoginPlacesRequest req = MisAlarmNonlocalLoginPlacesRequest.fromJsonString(params, MisAlarmNonlocalLoginPlacesRequest.class);                          MisAlarmNonlocalLoginPlacesResponse resp = client.MisAlarmNonlocalLoginPlaces(req);                          System.out.println(MisAlarmNonlocalLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1052,主机安全,入侵检测相关接口,恶意请求添加信任,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.RecoverMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.RecoverMalwaresResponse;  public class RecoverMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             RecoverMalwaresRequest req = RecoverMalwaresRequest.fromJsonString(params, RecoverMalwaresRequest.class);                          RecoverMalwaresResponse resp = client.RecoverMalwares(req);                          System.out.println(RecoverMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1053,主机安全,入侵检测相关接口,信任木马文件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.SeparateMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.SeparateMalwaresResponse;  public class SeparateMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             SeparateMalwaresRequest req = SeparateMalwaresRequest.fromJsonString(params, SeparateMalwaresRequest.class);                          SeparateMalwaresResponse resp = client.SeparateMalwares(req);                          System.out.println(SeparateMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1054,主机安全,入侵检测相关接口,取消信任恶意请求,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.TrustMaliciousRequestRequest; import com.tencentcloudapi.yunjing.v20180228.models.TrustMaliciousRequestResponse;  public class TrustMaliciousRequest {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             TrustMaliciousRequestRequest req = TrustMaliciousRequestRequest.fromJsonString(params, TrustMaliciousRequestRequest.class);                          TrustMaliciousRequestResponse resp = client.TrustMaliciousRequest(req);                          System.out.println(TrustMaliciousRequestRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1055,主机安全,入侵检测相关接口,取消信任木马,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.TrustMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.TrustMalwaresResponse;  public class TrustMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             TrustMalwaresRequest req = TrustMalwaresRequest.fromJsonString(params, TrustMalwaresRequest.class);                          TrustMalwaresResponse resp = client.TrustMalwares(req);                          System.out.println(TrustMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1056,主机安全,其他接口,关闭专业版,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.UntrustMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.UntrustMalwaresResponse;  public class UntrustMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             UntrustMalwaresRequest req = UntrustMalwaresRequest.fromJsonString(params, UntrustMalwaresRequest.class);                          UntrustMalwaresResponse resp = client.UntrustMalwares(req);                          System.out.println(UntrustMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1057,主机安全,其他接口,添加常用登录地,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.UntrustMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.UntrustMalwaresResponse;  public class UntrustMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             UntrustMalwaresRequest req = UntrustMalwaresRequest.fromJsonString(params, UntrustMalwaresRequest.class);                          UntrustMalwaresResponse resp = client.UntrustMalwares(req);                          System.out.println(UntrustMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1058,主机安全,其他接口,删除暴力破解记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.CloseProVersionRequest; import com.tencentcloudapi.yunjing.v20180228.models.CloseProVersionResponse;  public class CloseProVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             CloseProVersionRequest req = CloseProVersionRequest.fromJsonString(params, CloseProVersionRequest.class);                          CloseProVersionResponse resp = client.CloseProVersion(req);                          System.out.println(CloseProVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1059,主机安全,其他接口,卸载云镜客户端,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.CreateUsualLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.CreateUsualLoginPlacesResponse;  public class CreateUsualLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateUsualLoginPlacesRequest req = CreateUsualLoginPlacesRequest.fromJsonString(params, CreateUsualLoginPlacesRequest.class);                          CreateUsualLoginPlacesResponse resp = client.CreateUsualLoginPlaces(req);                          System.out.println(CreateUsualLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1060,主机安全,其他接口,删除异地登录记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteBruteAttacksRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteBruteAttacksResponse;  public class DeleteBruteAttacks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteBruteAttacksRequest req = DeleteBruteAttacksRequest.fromJsonString(params, DeleteBruteAttacksRequest.class);                          DeleteBruteAttacksResponse resp = client.DeleteBruteAttacks(req);                          System.out.println(DeleteBruteAttacksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1061,主机安全,其他接口,删除常用登录地,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteMachineRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteMachineResponse;  public class DeleteMachine {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMachineRequest req = DeleteMachineRequest.fromJsonString(params, DeleteMachineRequest.class);                          DeleteMachineResponse resp = client.DeleteMachine(req);                          System.out.println(DeleteMachineRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1062,主机安全,其他接口,获取端口列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteNonlocalLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteNonlocalLoginPlacesResponse;  public class DeleteNonlocalLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNonlocalLoginPlacesRequest req = DeleteNonlocalLoginPlacesRequest.fromJsonString(params, DeleteNonlocalLoginPlacesRequest.class);                          DeleteNonlocalLoginPlacesResponse resp = client.DeleteNonlocalLoginPlaces(req);                          System.out.println(DeleteNonlocalLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1063,主机安全,其他接口,获取端口统计列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DeleteUsualLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DeleteUsualLoginPlacesResponse;  public class DeleteUsualLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteUsualLoginPlacesRequest req = DeleteUsualLoginPlacesRequest.fromJsonString(params, DeleteUsualLoginPlacesRequest.class);                          DeleteUsualLoginPlacesResponse resp = client.DeleteUsualLoginPlaces(req);                          System.out.println(DeleteUsualLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1064,主机安全,其他接口,查询常用登录地,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeOpenPortsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeOpenPortsResponse;  public class DescribeOpenPorts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOpenPortsRequest req = DescribeOpenPortsRequest.fromJsonString(params, DescribeOpenPortsRequest.class);                          DescribeOpenPortsResponse resp = client.DescribeOpenPorts(req);                          System.out.println(DescribeOpenPortsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1065,主机安全,其他接口,获取专业周报密码破解数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeOpenPortStatisticsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeOpenPortStatisticsResponse;  public class DescribeOpenPortStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOpenPortStatisticsRequest req = DescribeOpenPortStatisticsRequest.fromJsonString(params, DescribeOpenPortStatisticsRequest.class);                          DescribeOpenPortStatisticsResponse resp = client.DescribeOpenPortStatistics(req);                          System.out.println(DescribeOpenPortStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1066,主机安全,其他接口,获取专业周报详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeUsualLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeUsualLoginPlacesResponse;  public class DescribeUsualLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUsualLoginPlacesRequest req = DescribeUsualLoginPlacesRequest.fromJsonString(params, DescribeUsualLoginPlacesRequest.class);                          DescribeUsualLoginPlacesResponse resp = client.DescribeUsualLoginPlaces(req);                          System.out.println(DescribeUsualLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1067,主机安全,其他接口,获取专业周报木马数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportBruteAttacksRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportBruteAttacksResponse;  public class DescribeWeeklyReportBruteAttacks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportBruteAttacksRequest req = DescribeWeeklyReportBruteAttacksRequest.fromJsonString(params, DescribeWeeklyReportBruteAttacksRequest.class);                          DescribeWeeklyReportBruteAttacksResponse resp = client.DescribeWeeklyReportBruteAttacks(req);                          System.out.println(DescribeWeeklyReportBruteAttacksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1068,主机安全,其他接口,获取专业周报异地登录数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportMalwaresResponse;  public class DescribeWeeklyReportMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportMalwaresRequest req = DescribeWeeklyReportMalwaresRequest.fromJsonString(params, DescribeWeeklyReportMalwaresRequest.class);                          DescribeWeeklyReportMalwaresResponse resp = client.DescribeWeeklyReportMalwares(req);                          System.out.println(DescribeWeeklyReportMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1069,主机安全,其他接口,获取周报列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportMalwaresRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportMalwaresResponse;  public class DescribeWeeklyReportMalwares {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportMalwaresRequest req = DescribeWeeklyReportMalwaresRequest.fromJsonString(params, DescribeWeeklyReportMalwaresRequest.class);                          DescribeWeeklyReportMalwaresResponse resp = client.DescribeWeeklyReportMalwares(req);                          System.out.println(DescribeWeeklyReportMalwaresRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1070,主机安全,其他接口,获取专业版周报漏洞数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportNonlocalLoginPlacesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportNonlocalLoginPlacesResponse;  public class DescribeWeeklyReportNonlocalLoginPlaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportNonlocalLoginPlacesRequest req = DescribeWeeklyReportNonlocalLoginPlacesRequest.fromJsonString(params, DescribeWeeklyReportNonlocalLoginPlacesRequest.class);                          DescribeWeeklyReportNonlocalLoginPlacesResponse resp = client.DescribeWeeklyReportNonlocalLoginPlaces(req);                          System.out.println(DescribeWeeklyReportNonlocalLoginPlacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1071,主机安全,其他接口,开通专业版询价(预付费),"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportsResponse;  public class DescribeWeeklyReports {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportsRequest req = DescribeWeeklyReportsRequest.fromJsonString(params, DescribeWeeklyReportsRequest.class);                          DescribeWeeklyReportsResponse resp = client.DescribeWeeklyReports(req);                          System.out.println(DescribeWeeklyReportsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1072,主机安全,其他接口,修改专业版续费标识,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportVulsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeWeeklyReportVulsResponse;  public class DescribeWeeklyReportVuls {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWeeklyReportVulsRequest req = DescribeWeeklyReportVulsRequest.fromJsonString(params, DescribeWeeklyReportVulsRequest.class);                          DescribeWeeklyReportVulsResponse resp = client.DescribeWeeklyReportVuls(req);                          System.out.println(DescribeWeeklyReportVulsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1073,主机安全,其他接口,开通专业版(包年包月),"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.InquiryPriceOpenProVersionPrepaidRequest; import com.tencentcloudapi.yunjing.v20180228.models.InquiryPriceOpenProVersionPrepaidResponse;  public class InquiryPriceOpenProVersionPrepaid {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceOpenProVersionPrepaidRequest req = InquiryPriceOpenProVersionPrepaidRequest.fromJsonString(params, InquiryPriceOpenProVersionPrepaidRequest.class);                          InquiryPriceOpenProVersionPrepaidResponse resp = client.InquiryPriceOpenProVersionPrepaid(req);                          System.out.println(InquiryPriceOpenProVersionPrepaidRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1074,主机安全,其他接口,续费专业版,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.ModifyProVersionRenewFlagRequest; import com.tencentcloudapi.yunjing.v20180228.models.ModifyProVersionRenewFlagResponse;  public class ModifyProVersionRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProVersionRenewFlagRequest req = ModifyProVersionRenewFlagRequest.fromJsonString(params, ModifyProVersionRenewFlagRequest.class);                          ModifyProVersionRenewFlagResponse resp = client.ModifyProVersionRenewFlag(req);                          System.out.println(ModifyProVersionRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1075,主机安全,概览统计相关接口,获取机器详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.RenewProVersionRequest; import com.tencentcloudapi.yunjing.v20180228.models.RenewProVersionResponse;  public class RenewProVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             RenewProVersionRequest req = RenewProVersionRequest.fromJsonString(params, RenewProVersionRequest.class);                          RenewProVersionResponse resp = client.RenewProVersion(req);                          System.out.println(RenewProVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1076,主机安全,概览统计相关接口,获取区域主机列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.RenewProVersionRequest; import com.tencentcloudapi.yunjing.v20180228.models.RenewProVersionResponse;  public class RenewProVersion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             RenewProVersionRequest req = RenewProVersionRequest.fromJsonString(params, RenewProVersionRequest.class);                          RenewProVersionResponse resp = client.RenewProVersion(req);                          System.out.println(RenewProVersionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1077,主机安全,概览统计相关接口,获取概览统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeMachinesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeMachinesResponse;  public class DescribeMachines {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMachinesRequest req = DescribeMachinesRequest.fromJsonString(params, DescribeMachinesRequest.class);                          DescribeMachinesResponse resp = client.DescribeMachines(req);                          System.out.println(DescribeMachinesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1078,主机安全,概览统计相关接口,获取安全事件消息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeMachinesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeMachinesResponse;  public class DescribeMachines {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMachinesRequest req = DescribeMachinesRequest.fromJsonString(params, DescribeMachinesRequest.class);                          DescribeMachinesResponse resp = client.DescribeMachines(req);                          System.out.println(DescribeMachinesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1079,主机安全,概览统计相关接口,获取安全事件统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeOverviewStatisticsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeOverviewStatisticsResponse;  public class DescribeOverviewStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeOverviewStatisticsRequest req = DescribeOverviewStatisticsRequest.fromJsonString(params, DescribeOverviewStatisticsRequest.class);                          DescribeOverviewStatisticsResponse resp = client.DescribeOverviewStatistics(req);                          System.out.println(DescribeOverviewStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1080,主机安全,漏洞管理相关接口,获取单台主机的漏洞列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeSecurityTrendsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeSecurityTrendsResponse;  public class DescribeSecurityTrends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityTrendsRequest req = DescribeSecurityTrendsRequest.fromJsonString(params, DescribeSecurityTrendsRequest.class);                          DescribeSecurityTrendsResponse resp = client.DescribeSecurityTrends(req);                          System.out.println(DescribeSecurityTrendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1081,主机安全,漏洞管理相关接口,获取漏洞受影响机器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeSecurityTrendsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeSecurityTrendsResponse;  public class DescribeSecurityTrends {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityTrendsRequest req = DescribeSecurityTrendsRequest.fromJsonString(params, DescribeSecurityTrendsRequest.class);                          DescribeSecurityTrendsResponse resp = client.DescribeSecurityTrends(req);                          System.out.println(DescribeSecurityTrendsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1082,主机安全,漏洞管理相关接口,获取漏洞详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeAgentVulsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeAgentVulsResponse;  public class DescribeAgentVuls {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAgentVulsRequest req = DescribeAgentVulsRequest.fromJsonString(params, DescribeAgentVulsRequest.class);                          DescribeAgentVulsResponse resp = client.DescribeAgentVuls(req);                          System.out.println(DescribeAgentVulsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1083,主机安全,漏洞管理相关接口,获取漏洞列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeImpactedHostsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeImpactedHostsResponse;  public class DescribeImpactedHosts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImpactedHostsRequest req = DescribeImpactedHostsRequest.fromJsonString(params, DescribeImpactedHostsRequest.class);                          DescribeImpactedHostsResponse resp = client.DescribeImpactedHosts(req);                          System.out.println(DescribeImpactedHostsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1084,主机安全,漏洞管理相关接口,获取漏洞检测结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulInfoRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulInfoResponse;  public class DescribeVulInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulInfoRequest req = DescribeVulInfoRequest.fromJsonString(params, DescribeVulInfoRequest.class);                          DescribeVulInfoResponse resp = client.DescribeVulInfo(req);                          System.out.println(DescribeVulInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1085,主机安全,漏洞管理相关接口,忽略漏洞,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulsResponse;  public class DescribeVuls {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulsRequest req = DescribeVulsRequest.fromJsonString(params, DescribeVulsRequest.class);                          DescribeVulsResponse resp = client.DescribeVuls(req);                          System.out.println(DescribeVulsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1086,主机安全,漏洞管理相关接口,漏洞重新检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulScanResultRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeVulScanResultResponse;  public class DescribeVulScanResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulScanResultRequest req = DescribeVulScanResultRequest.fromJsonString(params, DescribeVulScanResultRequest.class);                          DescribeVulScanResultResponse resp = client.DescribeVulScanResult(req);                          System.out.println(DescribeVulScanResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1087,主机安全,设置中心相关接口,获取告警设置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.RescanImpactedHostRequest; import com.tencentcloudapi.yunjing.v20180228.models.RescanImpactedHostResponse;  public class RescanImpactedHost {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             RescanImpactedHostRequest req = RescanImpactedHostRequest.fromJsonString(params, RescanImpactedHostRequest.class);                          RescanImpactedHostResponse resp = client.RescanImpactedHost(req);                          System.out.println(RescanImpactedHostRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1088,主机安全,设置中心相关接口,获取专业版信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoResponse;  public class DescribeProVersionInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProVersionInfoRequest req = DescribeProVersionInfoRequest.fromJsonString(params, DescribeProVersionInfoRequest.class);                          DescribeProVersionInfoResponse resp = client.DescribeProVersionInfo(req);                          System.out.println(DescribeProVersionInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1089,主机安全,设置中心相关接口,修改告警设置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoResponse;  public class DescribeProVersionInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProVersionInfoRequest req = DescribeProVersionInfoRequest.fromJsonString(params, DescribeProVersionInfoRequest.class);                          DescribeProVersionInfoResponse resp = client.DescribeProVersionInfo(req);                          System.out.println(DescribeProVersionInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1090,主机安全,设置中心相关接口,设置新增主机自动开通专业版配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProVersionInfoResponse;  public class DescribeProVersionInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProVersionInfoRequest req = DescribeProVersionInfoRequest.fromJsonString(params, DescribeProVersionInfoRequest.class);                          DescribeProVersionInfoResponse resp = client.DescribeProVersionInfo(req);                          System.out.println(DescribeProVersionInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1091,主机安全,资产管理相关接口,创建实时拉取进程任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.ModifyAutoOpenProVersionConfigRequest; import com.tencentcloudapi.yunjing.v20180228.models.ModifyAutoOpenProVersionConfigResponse;  public class ModifyAutoOpenProVersionConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoOpenProVersionConfigRequest req = ModifyAutoOpenProVersionConfigRequest.fromJsonString(params, ModifyAutoOpenProVersionConfigRequest.class);                          ModifyAutoOpenProVersionConfigResponse resp = client.ModifyAutoOpenProVersionConfig(req);                          System.out.println(ModifyAutoOpenProVersionConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1092,主机安全,资产管理相关接口,获取帐号列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.ModifyAutoOpenProVersionConfigRequest; import com.tencentcloudapi.yunjing.v20180228.models.ModifyAutoOpenProVersionConfigResponse;  public class ModifyAutoOpenProVersionConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAutoOpenProVersionConfigRequest req = ModifyAutoOpenProVersionConfigRequest.fromJsonString(params, ModifyAutoOpenProVersionConfigRequest.class);                          ModifyAutoOpenProVersionConfigResponse resp = client.ModifyAutoOpenProVersionConfig(req);                          System.out.println(ModifyAutoOpenProVersionConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1093,主机安全,资产管理相关接口,获取帐号统计列表数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.CreateProcessTaskRequest; import com.tencentcloudapi.yunjing.v20180228.models.CreateProcessTaskResponse;  public class CreateProcessTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProcessTaskRequest req = CreateProcessTaskRequest.fromJsonString(params, CreateProcessTaskRequest.class);                          CreateProcessTaskResponse resp = client.CreateProcessTask(req);                          System.out.println(CreateProcessTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1094,主机安全,资产管理相关接口,获取组件信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeAccountsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeAccountsResponse;  public class DescribeAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountsRequest req = DescribeAccountsRequest.fromJsonString(params, DescribeAccountsRequest.class);                          DescribeAccountsResponse resp = client.DescribeAccounts(req);                          System.out.println(DescribeAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1095,主机安全,资产管理相关接口,获取组件列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeAccountStatisticsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeAccountStatisticsResponse;  public class DescribeAccountStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountStatisticsRequest req = DescribeAccountStatisticsRequest.fromJsonString(params, DescribeAccountStatisticsRequest.class);                          DescribeAccountStatisticsResponse resp = client.DescribeAccountStatistics(req);                          System.out.println(DescribeAccountStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1096,主机安全,资产管理相关接口,获取组件统计列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentInfoRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentInfoResponse;  public class DescribeComponentInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComponentInfoRequest req = DescribeComponentInfoRequest.fromJsonString(params, DescribeComponentInfoRequest.class);                          DescribeComponentInfoResponse resp = client.DescribeComponentInfo(req);                          System.out.println(DescribeComponentInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1097,主机安全,资产管理相关接口,获取帐号变更历史列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentsResponse;  public class DescribeComponents {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComponentsRequest req = DescribeComponentsRequest.fromJsonString(params, DescribeComponentsRequest.class);                          DescribeComponentsResponse resp = client.DescribeComponents(req);                          System.out.println(DescribeComponentsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1098,主机安全,资产管理相关接口,获取进程列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentStatisticsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeComponentStatisticsResponse;  public class DescribeComponentStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeComponentStatisticsRequest req = DescribeComponentStatisticsRequest.fromJsonString(params, DescribeComponentStatisticsRequest.class);                          DescribeComponentStatisticsResponse resp = client.DescribeComponentStatistics(req);                          System.out.println(DescribeComponentStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1099,主机安全,资产管理相关接口,获取进程统计列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeHistoryAccountsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeHistoryAccountsResponse;  public class DescribeHistoryAccounts {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHistoryAccountsRequest req = DescribeHistoryAccountsRequest.fromJsonString(params, DescribeHistoryAccountsRequest.class);                          DescribeHistoryAccountsResponse resp = client.DescribeHistoryAccounts(req);                          System.out.println(DescribeHistoryAccountsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1100,主机安全,资产管理相关接口,获取实时拉取进程任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessesRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessesResponse;  public class DescribeProcesses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProcessesRequest req = DescribeProcessesRequest.fromJsonString(params, DescribeProcessesRequest.class);                          DescribeProcessesResponse resp = client.DescribeProcesses(req);                          System.out.println(DescribeProcessesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1101,迁移服务平台,通用迁移信息接口,取消注册迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessStatisticsRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessStatisticsResponse;  public class DescribeProcessStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunjing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProcessStatisticsRequest req = DescribeProcessStatisticsRequest.fromJsonString(params, DescribeProcessStatisticsRequest.class);                          DescribeProcessStatisticsResponse resp = client.DescribeProcessStatistics(req);                          System.out.println(DescribeProcessStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1102,迁移服务平台,通用迁移信息接口,获取指定迁移任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunjing.v20180228.YunjingClient;  import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessTaskStatusRequest; import com.tencentcloudapi.yunjing.v20180228.models.DescribeProcessTaskStatusResponse;  public class DescribeProcessTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunjingClient client = new YunjingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProcessTaskStatusRequest req = DescribeProcessTaskStatusRequest.fromJsonString(params, DescribeProcessTaskStatusRequest.class);                          DescribeProcessTaskStatusResponse resp = client.DescribeProcessTaskStatus(req);                          System.out.println(DescribeProcessTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1103,迁移服务平台,通用迁移信息接口,获取迁移项目名称列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.DeregisterMigrationTaskRequest; import com.tencentcloudapi.msp.v20180319.models.DeregisterMigrationTaskResponse;  public class DeregisterMigrationTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             DeregisterMigrationTaskRequest req = DeregisterMigrationTaskRequest.fromJsonString(params, DeregisterMigrationTaskRequest.class);                          DeregisterMigrationTaskResponse resp = client.DeregisterMigrationTask(req);                          System.out.println(DeregisterMigrationTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1104,迁移服务平台,通用迁移信息接口,获取迁移任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.DescribeMigrationTaskRequest; import com.tencentcloudapi.msp.v20180319.models.DescribeMigrationTaskResponse;  public class DescribeMigrationTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMigrationTaskRequest req = DescribeMigrationTaskRequest.fromJsonString(params, DescribeMigrationTaskRequest.class);                          DescribeMigrationTaskResponse resp = client.DescribeMigrationTask(req);                          System.out.println(DescribeMigrationTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1105,迁移服务平台,通用迁移信息接口,更改迁移任务所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.ListMigrationProjectRequest; import com.tencentcloudapi.msp.v20180319.models.ListMigrationProjectResponse;  public class ListMigrationProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             ListMigrationProjectRequest req = ListMigrationProjectRequest.fromJsonString(params, ListMigrationProjectRequest.class);                          ListMigrationProjectResponse resp = client.ListMigrationProject(req);                          System.out.println(ListMigrationProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1106,迁移服务平台,通用迁移信息接口,更新迁移任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.ListMigrationTaskRequest; import com.tencentcloudapi.msp.v20180319.models.ListMigrationTaskResponse;  public class ListMigrationTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             ListMigrationTaskRequest req = ListMigrationTaskRequest.fromJsonString(params, ListMigrationTaskRequest.class);                          ListMigrationTaskResponse resp = client.ListMigrationTask(req);                          System.out.println(ListMigrationTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1107,迁移服务平台,通用迁移信息接口,注册迁移任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.ModifyMigrationTaskBelongToProjectRequest; import com.tencentcloudapi.msp.v20180319.models.ModifyMigrationTaskBelongToProjectResponse;  public class ModifyMigrationTaskBelongToProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""msp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMigrationTaskBelongToProjectRequest req = ModifyMigrationTaskBelongToProjectRequest.fromJsonString(params, ModifyMigrationTaskBelongToProjectRequest.class);                          ModifyMigrationTaskBelongToProjectResponse resp = client.ModifyMigrationTaskBelongToProject(req);                          System.out.println(ModifyMigrationTaskBelongToProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1108,漏洞扫描服务,漏洞相关接口,新增漏洞误报信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.RegisterMigrationTaskRequest; import com.tencentcloudapi.msp.v20180319.models.RegisterMigrationTaskResponse;  public class RegisterMigrationTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterMigrationTaskRequest req = RegisterMigrationTaskRequest.fromJsonString(params, RegisterMigrationTaskRequest.class);                          RegisterMigrationTaskResponse resp = client.RegisterMigrationTask(req);                          System.out.println(RegisterMigrationTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1109,漏洞扫描服务,漏洞相关接口,生成漏洞报告,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.msp.v20180319.MspClient;  import com.tencentcloudapi.msp.v20180319.models.RegisterMigrationTaskRequest; import com.tencentcloudapi.msp.v20180319.models.RegisterMigrationTaskResponse;  public class RegisterMigrationTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MspClient client = new MspClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterMigrationTaskRequest req = RegisterMigrationTaskRequest.fromJsonString(params, RegisterMigrationTaskRequest.class);                          RegisterMigrationTaskResponse resp = client.RegisterMigrationTask(req);                          System.out.println(RegisterMigrationTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1110,漏洞扫描服务,漏洞相关接口,查看漏洞列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.CreateVulsMisinformationRequest; import com.tencentcloudapi.cws.v20180312.models.CreateVulsMisinformationResponse;  public class CreateVulsMisinformation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVulsMisinformationRequest req = CreateVulsMisinformationRequest.fromJsonString(params, CreateVulsMisinformationRequest.class);                          CreateVulsMisinformationResponse resp = client.CreateVulsMisinformation(req);                          System.out.println(CreateVulsMisinformationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1111,漏洞扫描服务,漏洞相关接口,查看当前漏洞总计数量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.CreateVulsReportRequest; import com.tencentcloudapi.cws.v20180312.models.CreateVulsReportResponse;  public class CreateVulsReport {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateVulsReportRequest req = CreateVulsReportRequest.fromJsonString(params, CreateVulsReportRequest.class);                          CreateVulsReportResponse resp = client.CreateVulsReport(req);                          System.out.println(CreateVulsReportRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1112,漏洞扫描服务,漏洞相关接口,查看漏洞数随时间变化统计信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeVulsRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeVulsResponse;  public class DescribeVuls {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulsRequest req = DescribeVulsRequest.fromJsonString(params, DescribeVulsRequest.class);                          DescribeVulsResponse resp = client.DescribeVuls(req);                          System.out.println(DescribeVulsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1113,漏洞扫描服务,监测相关接口,新增监测任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeVulsNumberTimelineRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeVulsNumberTimelineResponse;  public class DescribeVulsNumberTimeline {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulsNumberTimelineRequest req = DescribeVulsNumberTimelineRequest.fromJsonString(params, DescribeVulsNumberTimelineRequest.class);                          DescribeVulsNumberTimelineResponse resp = client.DescribeVulsNumberTimeline(req);                          System.out.println(DescribeVulsNumberTimelineRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1114,漏洞扫描服务,监测相关接口,删除监控任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeVulsNumberTimelineRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeVulsNumberTimelineResponse;  public class DescribeVulsNumberTimeline {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVulsNumberTimelineRequest req = DescribeVulsNumberTimelineRequest.fromJsonString(params, DescribeVulsNumberTimelineRequest.class);                          DescribeVulsNumberTimelineResponse resp = client.DescribeVulsNumberTimeline(req);                          System.out.println(DescribeVulsNumberTimelineRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1115,漏洞扫描服务,监测相关接口,查看监控任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DeleteMonitorsRequest; import com.tencentcloudapi.cws.v20180312.models.DeleteMonitorsResponse;  public class DeleteMonitors {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMonitorsRequest req = DeleteMonitorsRequest.fromJsonString(params, DeleteMonitorsRequest.class);                          DeleteMonitorsResponse resp = client.DeleteMonitors(req);                          System.out.println(DeleteMonitorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1116,漏洞扫描服务,监测相关接口,修改监测任务的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DeleteMonitorsRequest; import com.tencentcloudapi.cws.v20180312.models.DeleteMonitorsResponse;  public class DeleteMonitors {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMonitorsRequest req = DeleteMonitorsRequest.fromJsonString(params, DeleteMonitorsRequest.class);                          DeleteMonitorsResponse resp = client.DeleteMonitors(req);                          System.out.println(DeleteMonitorsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1117,漏洞扫描服务,网站相关接口,新增站点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.ModifyMonitorAttributeRequest; import com.tencentcloudapi.cws.v20180312.models.ModifyMonitorAttributeResponse;  public class ModifyMonitorAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMonitorAttributeRequest req = ModifyMonitorAttributeRequest.fromJsonString(params, ModifyMonitorAttributeRequest.class);                          ModifyMonitorAttributeResponse resp = client.ModifyMonitorAttribute(req);                          System.out.println(ModifyMonitorAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1118,漏洞扫描服务,网站相关接口,新增站点扫描任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.ModifyMonitorAttributeRequest; import com.tencentcloudapi.cws.v20180312.models.ModifyMonitorAttributeResponse;  public class ModifyMonitorAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMonitorAttributeRequest req = ModifyMonitorAttributeRequest.fromJsonString(params, ModifyMonitorAttributeRequest.class);                          ModifyMonitorAttributeResponse resp = client.ModifyMonitorAttribute(req);                          System.out.println(ModifyMonitorAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1119,漏洞扫描服务,网站相关接口,删除站点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.CreateSitesScansRequest; import com.tencentcloudapi.cws.v20180312.models.CreateSitesScansResponse;  public class CreateSitesScans {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSitesScansRequest req = CreateSitesScansRequest.fromJsonString(params, CreateSitesScansRequest.class);                          CreateSitesScansResponse resp = client.CreateSitesScans(req);                          System.out.println(CreateSitesScansRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1120,漏洞扫描服务,网站相关接口,查看站点购买配额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.CreateSitesScansRequest; import com.tencentcloudapi.cws.v20180312.models.CreateSitesScansResponse;  public class CreateSitesScans {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSitesScansRequest req = CreateSitesScansRequest.fromJsonString(params, CreateSitesScansRequest.class);                          CreateSitesScansResponse resp = client.CreateSitesScans(req);                          System.out.println(CreateSitesScansRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1121,漏洞扫描服务,网站相关接口,查看站点列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DeleteSitesRequest; import com.tencentcloudapi.cws.v20180312.models.DeleteSitesResponse;  public class DeleteSites {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSitesRequest req = DeleteSitesRequest.fromJsonString(params, DeleteSitesRequest.class);                          DeleteSitesResponse resp = client.DeleteSites(req);                          System.out.println(DeleteSitesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1122,漏洞扫描服务,网站相关接口,查看站点列表的验证信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeSiteQuotaRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeSiteQuotaResponse;  public class DescribeSiteQuota {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSiteQuotaRequest req = DescribeSiteQuotaRequest.fromJsonString(params, DescribeSiteQuotaRequest.class);                          DescribeSiteQuotaResponse resp = client.DescribeSiteQuota(req);                          System.out.println(DescribeSiteQuotaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1123,漏洞扫描服务,网站相关接口,修改站点的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeSitesVerificationRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeSitesVerificationResponse;  public class DescribeSitesVerification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSitesVerificationRequest req = DescribeSitesVerificationRequest.fromJsonString(params, DescribeSitesVerificationRequest.class);                          DescribeSitesVerificationResponse resp = client.DescribeSitesVerification(req);                          System.out.println(DescribeSitesVerificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1124,漏洞扫描服务,网站相关接口,验证站点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.DescribeSitesVerificationRequest; import com.tencentcloudapi.cws.v20180312.models.DescribeSitesVerificationResponse;  public class DescribeSitesVerification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSitesVerificationRequest req = DescribeSitesVerificationRequest.fromJsonString(params, DescribeSitesVerificationRequest.class);                          DescribeSitesVerificationResponse resp = client.DescribeSitesVerification(req);                          System.out.println(DescribeSitesVerificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1125,漏洞扫描服务,设置相关接口,查看用户配置列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.VerifySitesRequest; import com.tencentcloudapi.cws.v20180312.models.VerifySitesResponse;  public class VerifySites {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             VerifySitesRequest req = VerifySitesRequest.fromJsonString(params, VerifySitesRequest.class);                          VerifySitesResponse resp = client.VerifySites(req);                          System.out.println(VerifySitesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1126,漏洞扫描服务,设置相关接口,修改用户配置的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.VerifySitesRequest; import com.tencentcloudapi.cws.v20180312.models.VerifySitesResponse;  public class VerifySites {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cws.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             VerifySitesRequest req = VerifySitesRequest.fromJsonString(params, VerifySitesRequest.class);                          VerifySitesResponse resp = client.VerifySites(req);                          System.out.println(VerifySitesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1127,应用安全,其他接口,获取云COS临时密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.ModifyConfigAttributeRequest; import com.tencentcloudapi.cws.v20180312.models.ModifyConfigAttributeResponse;  public class ModifyConfigAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyConfigAttributeRequest req = ModifyConfigAttributeRequest.fromJsonString(params, ModifyConfigAttributeRequest.class);                          ModifyConfigAttributeResponse resp = client.ModifyConfigAttribute(req);                          System.out.println(ModifyConfigAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1128,应用安全,其他接口,获取用户基础信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cws.v20180312.CwsClient;  import com.tencentcloudapi.cws.v20180312.models.ModifyConfigAttributeRequest; import com.tencentcloudapi.cws.v20180312.models.ModifyConfigAttributeResponse;  public class ModifyConfigAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CwsClient client = new CwsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyConfigAttributeRequest req = ModifyConfigAttributeRequest.fromJsonString(params, ModifyConfigAttributeRequest.class);                          ModifyConfigAttributeResponse resp = client.ModifyConfigAttribute(req);                          System.out.println(ModifyConfigAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1129,应用安全,应用加固相关接口,创建资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.CreateCosSecKeyInstanceRequest; import com.tencentcloudapi.ms.v20180408.models.CreateCosSecKeyInstanceResponse;  public class CreateCosSecKeyInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCosSecKeyInstanceRequest req = CreateCosSecKeyInstanceRequest.fromJsonString(params, CreateCosSecKeyInstanceRequest.class);                          CreateCosSecKeyInstanceResponse resp = client.CreateCosSecKeyInstance(req);                          System.out.println(CreateCosSecKeyInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1130,应用安全,应用加固相关接口,提交加固基础数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeUserBaseInfoInstanceRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeUserBaseInfoInstanceResponse;  public class DescribeUserBaseInfoInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUserBaseInfoInstanceRequest req = DescribeUserBaseInfoInstanceRequest.fromJsonString(params, DescribeUserBaseInfoInstanceRequest.class);                          DescribeUserBaseInfoInstanceResponse resp = client.DescribeUserBaseInfoInstance(req);                          System.out.println(DescribeUserBaseInfoInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1131,应用安全,应用加固相关接口,新增加固策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeUserBaseInfoInstanceRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeUserBaseInfoInstanceResponse;  public class DescribeUserBaseInfoInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUserBaseInfoInstanceRequest req = DescribeUserBaseInfoInstanceRequest.fromJsonString(params, DescribeUserBaseInfoInstanceRequest.class);                          DescribeUserBaseInfoInstanceResponse resp = client.DescribeUserBaseInfoInstance(req);                          System.out.println(DescribeUserBaseInfoInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1132,应用安全,应用加固相关接口,批量删除提交过的app信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.CreateShieldPlanInstanceRequest; import com.tencentcloudapi.ms.v20180408.models.CreateShieldPlanInstanceResponse;  public class CreateShieldPlanInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateShieldPlanInstanceRequest req = CreateShieldPlanInstanceRequest.fromJsonString(params, CreateShieldPlanInstanceRequest.class);                          CreateShieldPlanInstanceResponse resp = client.CreateShieldPlanInstance(req);                          System.out.println(CreateShieldPlanInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1133,应用安全,应用加固相关接口,用户查询提交过的app列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DeleteShieldInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.DeleteShieldInstancesResponse;  public class DeleteShieldInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteShieldInstancesRequest req = DeleteShieldInstancesRequest.fromJsonString(params, DeleteShieldInstancesRequest.class);                          DeleteShieldInstancesResponse resp = client.DeleteShieldInstances(req);                          System.out.println(DeleteShieldInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1134,应用安全,应用加固相关接口,查询加固策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DeleteShieldInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.DeleteShieldInstancesResponse;  public class DeleteShieldInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteShieldInstancesRequest req = DeleteShieldInstancesRequest.fromJsonString(params, DeleteShieldInstancesRequest.class);                          DeleteShieldInstancesResponse resp = client.DeleteShieldInstances(req);                          System.out.println(DeleteShieldInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1135,应用安全,应用加固相关接口,查询加固结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeShieldPlanInstanceRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeShieldPlanInstanceResponse;  public class DescribeShieldPlanInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeShieldPlanInstanceRequest req = DescribeShieldPlanInstanceRequest.fromJsonString(params, DescribeShieldPlanInstanceRequest.class);                          DescribeShieldPlanInstanceResponse resp = client.DescribeShieldPlanInstance(req);                          System.out.println(DescribeShieldPlanInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1136,应用安全,应用安全扫描相关接口,批量提交安全扫描,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeShieldResultRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeShieldResultResponse;  public class DescribeShieldResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeShieldResultRequest req = DescribeShieldResultRequest.fromJsonString(params, DescribeShieldResultRequest.class);                          DescribeShieldResultResponse resp = client.DescribeShieldResult(req);                          System.out.println(DescribeShieldResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1137,应用安全,应用安全扫描相关接口,批量删除提交过的app扫描信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeShieldResultRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeShieldResultResponse;  public class DescribeShieldResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeShieldResultRequest req = DescribeShieldResultRequest.fromJsonString(params, DescribeShieldResultRequest.class);                          DescribeShieldResultResponse resp = client.DescribeShieldResult(req);                          System.out.println(DescribeShieldResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1138,应用安全,应用安全扫描相关接口,查询扫描列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.CreateScanInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.CreateScanInstancesResponse;  public class CreateScanInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateScanInstancesRequest req = CreateScanInstancesRequest.fromJsonString(params, CreateScanInstancesRequest.class);                          CreateScanInstancesResponse resp = client.CreateScanInstances(req);                          System.out.println(CreateScanInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1139,应用安全,应用安全扫描相关接口,批量查询扫描结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DeleteScanInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.DeleteScanInstancesResponse;  public class DeleteScanInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteScanInstancesRequest req = DeleteScanInstancesRequest.fromJsonString(params, DeleteScanInstancesRequest.class);                          DeleteScanInstancesResponse resp = client.DeleteScanInstances(req);                          System.out.println(DeleteScanInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1140,应用安全,用户服务信息相关接口,将应用绑定到资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeScanResultsRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeScanResultsResponse;  public class DescribeScanResults {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeScanResultsRequest req = DescribeScanResultsRequest.fromJsonString(params, DescribeScanResultsRequest.class);                          DescribeScanResultsResponse resp = client.DescribeScanResults(req);                          System.out.println(DescribeScanResultsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1141,应用安全,用户服务信息相关接口,获取用户的所有资源信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeScanResultsRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeScanResultsResponse;  public class DescribeScanResults {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeScanResultsRequest req = DescribeScanResultsRequest.fromJsonString(params, DescribeScanResultsRequest.class);                          DescribeScanResultsResponse resp = client.DescribeScanResults(req);                          System.out.println(DescribeScanResultsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1142,智聆口语评测,功能接口,发音评估初始化,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeResourceInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeResourceInstancesResponse;  public class DescribeResourceInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeResourceInstancesRequest req = DescribeResourceInstancesRequest.fromJsonString(params, DescribeResourceInstancesRequest.class);                          DescribeResourceInstancesResponse resp = client.DescribeResourceInstances(req);                          System.out.println(DescribeResourceInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1143,智聆口语评测,功能接口,关键词评测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ms.v20180408.MsClient;  import com.tencentcloudapi.ms.v20180408.models.DescribeResourceInstancesRequest; import com.tencentcloudapi.ms.v20180408.models.DescribeResourceInstancesResponse;  public class DescribeResourceInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MsClient client = new MsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeResourceInstancesRequest req = DescribeResourceInstancesRequest.fromJsonString(params, DescribeResourceInstancesRequest.class);                          DescribeResourceInstancesResponse resp = client.DescribeResourceInstances(req);                          System.out.println(DescribeResourceInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1144,智聆口语评测,功能接口,发音数据传输接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.KeywordEvaluateRequest; import com.tencentcloudapi.soe.v20180724.models.KeywordEvaluateResponse;  public class KeywordEvaluate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             KeywordEvaluateRequest req = KeywordEvaluateRequest.fromJsonString(params, KeywordEvaluateRequest.class);                          KeywordEvaluateResponse resp = client.KeywordEvaluate(req);                          System.out.println(KeywordEvaluateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1145,智聆口语评测,功能接口,发音数据传输接口附带初始化过程,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.KeywordEvaluateRequest; import com.tencentcloudapi.soe.v20180724.models.KeywordEvaluateResponse;  public class KeywordEvaluate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             KeywordEvaluateRequest req = KeywordEvaluateRequest.fromJsonString(params, KeywordEvaluateRequest.class);                          KeywordEvaluateResponse resp = client.KeywordEvaluate(req);                          System.out.println(KeywordEvaluateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1146,点播,AI 样本管理相关接口,创建人物样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitRequest; import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitResponse;  public class TransmitOralProcessWithInit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             TransmitOralProcessWithInitRequest req = TransmitOralProcessWithInitRequest.fromJsonString(params, TransmitOralProcessWithInitRequest.class);                          TransmitOralProcessWithInitResponse resp = client.TransmitOralProcessWithInit(req);                          System.out.println(TransmitOralProcessWithInitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1147,点播,AI 样本管理相关接口,创建关键词样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitRequest; import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitResponse;  public class TransmitOralProcessWithInit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             TransmitOralProcessWithInitRequest req = TransmitOralProcessWithInitRequest.fromJsonString(params, TransmitOralProcessWithInitRequest.class);                          TransmitOralProcessWithInitResponse resp = client.TransmitOralProcessWithInit(req);                          System.out.println(TransmitOralProcessWithInitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1148,点播,AI 样本管理相关接口,删除人物样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitRequest; import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitResponse;  public class TransmitOralProcessWithInit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             TransmitOralProcessWithInitRequest req = TransmitOralProcessWithInitRequest.fromJsonString(params, TransmitOralProcessWithInitRequest.class);                          TransmitOralProcessWithInitResponse resp = client.TransmitOralProcessWithInit(req);                          System.out.println(TransmitOralProcessWithInitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1149,点播,AI 样本管理相关接口,删除关键词样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.soe.v20180724.SoeClient;  import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitRequest; import com.tencentcloudapi.soe.v20180724.models.TransmitOralProcessWithInitResponse;  public class TransmitOralProcessWithInit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""soe.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SoeClient client = new SoeClient(cred, """", clientProfile);                          String params = ""{}"";             TransmitOralProcessWithInitRequest req = TransmitOralProcessWithInitRequest.fromJsonString(params, TransmitOralProcessWithInitRequest.class);                          TransmitOralProcessWithInitResponse resp = client.TransmitOralProcessWithInit(req);                          System.out.println(TransmitOralProcessWithInitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1150,点播,AI 样本管理相关接口,获取人物样本列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreatePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.CreatePersonSampleResponse;  public class CreatePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePersonSampleRequest req = CreatePersonSampleRequest.fromJsonString(params, CreatePersonSampleRequest.class);                          CreatePersonSampleResponse resp = client.CreatePersonSample(req);                          System.out.println(CreatePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1151,点播,AI 样本管理相关接口,获取关键词样本列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1152,点播,AI 样本管理相关接口,修改人物样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1153,点播,AI 样本管理相关接口,修改关键词样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1154,点播,事件通知相关接口,确认事件通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1155,点播,事件通知相关接口,拉取事件通知,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1156,点播,任务管理相关接口,查询任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleRequest; import com.tencentcloudapi.vod.v20180717.models.DeletePersonSampleResponse;  public class DeletePersonSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonSampleRequest req = DeletePersonSampleRequest.fromJsonString(params, DeletePersonSampleRequest.class);                          DeletePersonSampleResponse resp = client.DeletePersonSample(req);                          System.out.println(DeletePersonSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1157,点播,任务管理相关接口,获取任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.PullEventsRequest; import com.tencentcloudapi.vod.v20180717.models.PullEventsResponse;  public class PullEvents {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             PullEventsRequest req = PullEventsRequest.fromJsonString(params, PullEventsRequest.class);                          PullEventsResponse resp = client.PullEvents(req);                          System.out.println(PullEventsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1158,点播,其他接口,查询子应用列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.PullEventsRequest; import com.tencentcloudapi.vod.v20180717.models.PullEventsResponse;  public class PullEvents {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             PullEventsRequest req = PullEventsRequest.fromJsonString(params, PullEventsRequest.class);                          PullEventsResponse resp = client.PullEvents(req);                          System.out.println(PullEventsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1159,点播,其他接口,执行定制 API,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.PullEventsRequest; import com.tencentcloudapi.vod.v20180717.models.PullEventsResponse;  public class PullEvents {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             PullEventsRequest req = PullEventsRequest.fromJsonString(params, PullEventsRequest.class);                          PullEventsResponse resp = client.PullEvents(req);                          System.out.println(PullEventsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1160,点播,其他接口,直播即时剪辑,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeTasksRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1161,点播,其他接口,修改子应用信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeTasksRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1162,点播,其他接口,修改子应用状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeTasksRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1163,点播,其他接口,简单 HLS 剪辑,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.LiveRealTimeClipRequest; import com.tencentcloudapi.vod.v20180717.models.LiveRealTimeClipResponse;  public class LiveRealTimeClip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             LiveRealTimeClipRequest req = LiveRealTimeClipRequest.fromJsonString(params, LiveRealTimeClipRequest.class);                          LiveRealTimeClipResponse resp = client.LiveRealTimeClip(req);                          System.out.println(LiveRealTimeClipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1164,点播,分发相关接口,预热URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.LiveRealTimeClipRequest; import com.tencentcloudapi.vod.v20180717.models.LiveRealTimeClipResponse;  public class LiveRealTimeClip {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             LiveRealTimeClipRequest req = LiveRealTimeClipRequest.fromJsonString(params, LiveRealTimeClipRequest.class);                          LiveRealTimeClipResponse resp = client.LiveRealTimeClip(req);                          System.out.println(LiveRealTimeClipRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1165,点播,参数模板相关接口,创建视频内容分析模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesResponse;  public class CreateWordSamples {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWordSamplesRequest req = CreateWordSamplesRequest.fromJsonString(params, CreateWordSamplesRequest.class);                          CreateWordSamplesResponse resp = client.CreateWordSamples(req);                          System.out.println(CreateWordSamplesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1166,点播,参数模板相关接口,创建视频内容识别模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesResponse;  public class CreateWordSamples {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWordSamplesRequest req = CreateWordSamplesRequest.fromJsonString(params, CreateWordSamplesRequest.class);                          CreateWordSamplesResponse resp = client.CreateWordSamples(req);                          System.out.println(CreateWordSamplesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1167,点播,参数模板相关接口,创建转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesResponse;  public class CreateWordSamples {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWordSamplesRequest req = CreateWordSamplesRequest.fromJsonString(params, CreateWordSamplesRequest.class);                          CreateWordSamplesResponse resp = client.CreateWordSamples(req);                          System.out.println(CreateWordSamplesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1168,点播,参数模板相关接口,创建视频内容审核模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesResponse;  public class CreateWordSamples {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWordSamplesRequest req = CreateWordSamplesRequest.fromJsonString(params, CreateWordSamplesRequest.class);                          CreateWordSamplesResponse resp = client.CreateWordSamples(req);                          System.out.println(CreateWordSamplesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1169,点播,参数模板相关接口,创建雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWordSamplesResponse;  public class CreateWordSamples {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWordSamplesRequest req = CreateWordSamplesRequest.fromJsonString(params, CreateWordSamplesRequest.class);                          CreateWordSamplesResponse resp = client.CreateWordSamples(req);                          System.out.println(CreateWordSamplesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1170,点播,参数模板相关接口,创建任务流模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifySubAppIdInfoRequest; import com.tencentcloudapi.vod.v20180717.models.ModifySubAppIdInfoResponse;  public class ModifySubAppIdInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySubAppIdInfoRequest req = ModifySubAppIdInfoRequest.fromJsonString(params, ModifySubAppIdInfoRequest.class);                          ModifySubAppIdInfoResponse resp = client.ModifySubAppIdInfo(req);                          System.out.println(ModifySubAppIdInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1171,点播,参数模板相关接口,创建采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateAIRecognitionTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateAIRecognitionTemplateResponse;  public class CreateAIRecognitionTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAIRecognitionTemplateRequest req = CreateAIRecognitionTemplateRequest.fromJsonString(params, CreateAIRecognitionTemplateRequest.class);                          CreateAIRecognitionTemplateResponse resp = client.CreateAIRecognitionTemplate(req);                          System.out.println(CreateAIRecognitionTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1172,点播,参数模板相关接口,创建指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateProcedureTemplateResponse;  public class CreateProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProcedureTemplateRequest req = CreateProcedureTemplateRequest.fromJsonString(params, CreateProcedureTemplateRequest.class);                          CreateProcedureTemplateResponse resp = client.CreateProcedureTemplate(req);                          System.out.println(CreateProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1173,点播,参数模板相关接口,创建转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateSampleSnapshotTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateSampleSnapshotTemplateResponse;  public class CreateSampleSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSampleSnapshotTemplateRequest req = CreateSampleSnapshotTemplateRequest.fromJsonString(params, CreateSampleSnapshotTemplateRequest.class);                          CreateSampleSnapshotTemplateResponse resp = client.CreateSampleSnapshotTemplate(req);                          System.out.println(CreateSampleSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1174,点播,参数模板相关接口,创建水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateSampleSnapshotTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateSampleSnapshotTemplateResponse;  public class CreateSampleSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSampleSnapshotTemplateRequest req = CreateSampleSnapshotTemplateRequest.fromJsonString(params, CreateSampleSnapshotTemplateRequest.class);                          CreateSampleSnapshotTemplateResponse resp = client.CreateSampleSnapshotTemplate(req);                          System.out.println(CreateSampleSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1175,点播,参数模板相关接口,删除视频内容分析模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateSnapshotByTimeOffsetTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateSnapshotByTimeOffsetTemplateResponse;  public class CreateSnapshotByTimeOffsetTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSnapshotByTimeOffsetTemplateRequest req = CreateSnapshotByTimeOffsetTemplateRequest.fromJsonString(params, CreateSnapshotByTimeOffsetTemplateRequest.class);                          CreateSnapshotByTimeOffsetTemplateResponse resp = client.CreateSnapshotByTimeOffsetTemplate(req);                          System.out.println(CreateSnapshotByTimeOffsetTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1176,点播,参数模板相关接口,删除视频内容识别模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.CreateWatermarkTemplateResponse;  public class CreateWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWatermarkTemplateRequest req = CreateWatermarkTemplateRequest.fromJsonString(params, CreateWatermarkTemplateRequest.class);                          CreateWatermarkTemplateResponse resp = client.CreateWatermarkTemplate(req);                          System.out.println(CreateWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1177,点播,参数模板相关接口,删除转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteAIAnalysisTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteAIAnalysisTemplateResponse;  public class DeleteAIAnalysisTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAIAnalysisTemplateRequest req = DeleteAIAnalysisTemplateRequest.fromJsonString(params, DeleteAIAnalysisTemplateRequest.class);                          DeleteAIAnalysisTemplateResponse resp = client.DeleteAIAnalysisTemplate(req);                          System.out.println(DeleteAIAnalysisTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1178,点播,参数模板相关接口,删除视频内容审核模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteAIAnalysisTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteAIAnalysisTemplateResponse;  public class DeleteAIAnalysisTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAIAnalysisTemplateRequest req = DeleteAIAnalysisTemplateRequest.fromJsonString(params, DeleteAIAnalysisTemplateRequest.class);                          DeleteAIAnalysisTemplateResponse resp = client.DeleteAIAnalysisTemplate(req);                          System.out.println(DeleteAIAnalysisTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1179,点播,参数模板相关接口,删除雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteAnimatedGraphicsTemplateResponse;  public class DeleteAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAnimatedGraphicsTemplateRequest req = DeleteAnimatedGraphicsTemplateRequest.fromJsonString(params, DeleteAnimatedGraphicsTemplateRequest.class);                          DeleteAnimatedGraphicsTemplateResponse resp = client.DeleteAnimatedGraphicsTemplate(req);                          System.out.println(DeleteAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1180,点播,参数模板相关接口,删除任务流模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteAnimatedGraphicsTemplateResponse;  public class DeleteAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAnimatedGraphicsTemplateRequest req = DeleteAnimatedGraphicsTemplateRequest.fromJsonString(params, DeleteAnimatedGraphicsTemplateRequest.class);                          DeleteAnimatedGraphicsTemplateResponse resp = client.DeleteAnimatedGraphicsTemplate(req);                          System.out.println(DeleteAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1181,点播,参数模板相关接口,删除采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteContentReviewTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteContentReviewTemplateResponse;  public class DeleteContentReviewTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteContentReviewTemplateRequest req = DeleteContentReviewTemplateRequest.fromJsonString(params, DeleteContentReviewTemplateRequest.class);                          DeleteContentReviewTemplateResponse resp = client.DeleteContentReviewTemplate(req);                          System.out.println(DeleteContentReviewTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1182,点播,参数模板相关接口,删除指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteImageSpriteTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteImageSpriteTemplateResponse;  public class DeleteImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteImageSpriteTemplateRequest req = DeleteImageSpriteTemplateRequest.fromJsonString(params, DeleteImageSpriteTemplateRequest.class);                          DeleteImageSpriteTemplateResponse resp = client.DeleteImageSpriteTemplate(req);                          System.out.println(DeleteImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1183,点播,参数模板相关接口,删除转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteProcedureTemplateResponse;  public class DeleteProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProcedureTemplateRequest req = DeleteProcedureTemplateRequest.fromJsonString(params, DeleteProcedureTemplateRequest.class);                          DeleteProcedureTemplateResponse resp = client.DeleteProcedureTemplate(req);                          System.out.println(DeleteProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1184,点播,参数模板相关接口,删除水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteProcedureTemplateResponse;  public class DeleteProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProcedureTemplateRequest req = DeleteProcedureTemplateRequest.fromJsonString(params, DeleteProcedureTemplateRequest.class);                          DeleteProcedureTemplateResponse resp = client.DeleteProcedureTemplate(req);                          System.out.println(DeleteProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1185,点播,参数模板相关接口,获取转自适应码流模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteSnapshotByTimeOffsetTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteSnapshotByTimeOffsetTemplateResponse;  public class DeleteSnapshotByTimeOffsetTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSnapshotByTimeOffsetTemplateRequest req = DeleteSnapshotByTimeOffsetTemplateRequest.fromJsonString(params, DeleteSnapshotByTimeOffsetTemplateRequest.class);                          DeleteSnapshotByTimeOffsetTemplateResponse resp = client.DeleteSnapshotByTimeOffsetTemplate(req);                          System.out.println(DeleteSnapshotByTimeOffsetTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1186,点播,参数模板相关接口,获取视频内容分析模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteTranscodeTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteTranscodeTemplateResponse;  public class DeleteTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTranscodeTemplateRequest req = DeleteTranscodeTemplateRequest.fromJsonString(params, DeleteTranscodeTemplateRequest.class);                          DeleteTranscodeTemplateResponse resp = client.DeleteTranscodeTemplate(req);                          System.out.println(DeleteTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1187,点播,参数模板相关接口,获取视频内容识别模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteWatermarkTemplateResponse;  public class DeleteWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteWatermarkTemplateRequest req = DeleteWatermarkTemplateRequest.fromJsonString(params, DeleteWatermarkTemplateRequest.class);                          DeleteWatermarkTemplateResponse resp = client.DeleteWatermarkTemplate(req);                          System.out.println(DeleteWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1188,点播,参数模板相关接口,获取转动图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeAdaptiveDynamicStreamingTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeAdaptiveDynamicStreamingTemplatesResponse;  public class DescribeAdaptiveDynamicStreamingTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAdaptiveDynamicStreamingTemplatesRequest req = DescribeAdaptiveDynamicStreamingTemplatesRequest.fromJsonString(params, DescribeAdaptiveDynamicStreamingTemplatesRequest.class);                          DescribeAdaptiveDynamicStreamingTemplatesResponse resp = client.DescribeAdaptiveDynamicStreamingTemplates(req);                          System.out.println(DescribeAdaptiveDynamicStreamingTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1189,点播,参数模板相关接口,获取音频轨模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeAIAnalysisTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeAIAnalysisTemplatesResponse;  public class DescribeAIAnalysisTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAIAnalysisTemplatesRequest req = DescribeAIAnalysisTemplatesRequest.fromJsonString(params, DescribeAIAnalysisTemplatesRequest.class);                          DescribeAIAnalysisTemplatesResponse resp = client.DescribeAIAnalysisTemplates(req);                          System.out.println(DescribeAIAnalysisTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1190,点播,参数模板相关接口,获取视频内容审核模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeAIRecognitionTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeAIRecognitionTemplatesResponse;  public class DescribeAIRecognitionTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAIRecognitionTemplatesRequest req = DescribeAIRecognitionTemplatesRequest.fromJsonString(params, DescribeAIRecognitionTemplatesRequest.class);                          DescribeAIRecognitionTemplatesResponse resp = client.DescribeAIRecognitionTemplates(req);                          System.out.println(DescribeAIRecognitionTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1191,点播,参数模板相关接口,获取雪碧图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeAnimatedGraphicsTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeAnimatedGraphicsTemplatesResponse;  public class DescribeAnimatedGraphicsTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAnimatedGraphicsTemplatesRequest req = DescribeAnimatedGraphicsTemplatesRequest.fromJsonString(params, DescribeAnimatedGraphicsTemplatesRequest.class);                          DescribeAnimatedGraphicsTemplatesResponse resp = client.DescribeAnimatedGraphicsTemplates(req);                          System.out.println(DescribeAnimatedGraphicsTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1192,点播,参数模板相关接口,获取任务流模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeAudioTrackTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeAudioTrackTemplatesResponse;  public class DescribeAudioTrackTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAudioTrackTemplatesRequest req = DescribeAudioTrackTemplatesRequest.fromJsonString(params, DescribeAudioTrackTemplatesRequest.class);                          DescribeAudioTrackTemplatesResponse resp = client.DescribeAudioTrackTemplates(req);                          System.out.println(DescribeAudioTrackTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1193,点播,参数模板相关接口,获取采样截图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeImageSpriteTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeImageSpriteTemplatesResponse;  public class DescribeImageSpriteTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageSpriteTemplatesRequest req = DescribeImageSpriteTemplatesRequest.fromJsonString(params, DescribeImageSpriteTemplatesRequest.class);                          DescribeImageSpriteTemplatesResponse resp = client.DescribeImageSpriteTemplates(req);                          System.out.println(DescribeImageSpriteTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1194,点播,参数模板相关接口,获取指定时间点截图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeImageSpriteTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeImageSpriteTemplatesResponse;  public class DescribeImageSpriteTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageSpriteTemplatesRequest req = DescribeImageSpriteTemplatesRequest.fromJsonString(params, DescribeImageSpriteTemplatesRequest.class);                          DescribeImageSpriteTemplatesResponse resp = client.DescribeImageSpriteTemplates(req);                          System.out.println(DescribeImageSpriteTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1195,点播,参数模板相关接口,获取转码模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeProcedureTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeProcedureTemplatesResponse;  public class DescribeProcedureTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProcedureTemplatesRequest req = DescribeProcedureTemplatesRequest.fromJsonString(params, DescribeProcedureTemplatesRequest.class);                          DescribeProcedureTemplatesResponse resp = client.DescribeProcedureTemplates(req);                          System.out.println(DescribeProcedureTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1196,点播,参数模板相关接口,获取视频轨模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesResponse;  public class DescribeSnapshotByTimeOffsetTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotByTimeOffsetTemplatesRequest req = DescribeSnapshotByTimeOffsetTemplatesRequest.fromJsonString(params, DescribeSnapshotByTimeOffsetTemplatesRequest.class);                          DescribeSnapshotByTimeOffsetTemplatesResponse resp = client.DescribeSnapshotByTimeOffsetTemplates(req);                          System.out.println(DescribeSnapshotByTimeOffsetTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1197,点播,参数模板相关接口,获取水印模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesResponse;  public class DescribeSnapshotByTimeOffsetTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotByTimeOffsetTemplatesRequest req = DescribeSnapshotByTimeOffsetTemplatesRequest.fromJsonString(params, DescribeSnapshotByTimeOffsetTemplatesRequest.class);                          DescribeSnapshotByTimeOffsetTemplatesResponse resp = client.DescribeSnapshotByTimeOffsetTemplates(req);                          System.out.println(DescribeSnapshotByTimeOffsetTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1198,点播,参数模板相关接口,修改视频内容分析模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeSnapshotByTimeOffsetTemplatesResponse;  public class DescribeSnapshotByTimeOffsetTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotByTimeOffsetTemplatesRequest req = DescribeSnapshotByTimeOffsetTemplatesRequest.fromJsonString(params, DescribeSnapshotByTimeOffsetTemplatesRequest.class);                          DescribeSnapshotByTimeOffsetTemplatesResponse resp = client.DescribeSnapshotByTimeOffsetTemplates(req);                          System.out.println(DescribeSnapshotByTimeOffsetTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1199,点播,参数模板相关接口,修改视频内容识别模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeVideoTrackTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeVideoTrackTemplatesResponse;  public class DescribeVideoTrackTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeVideoTrackTemplatesRequest req = DescribeVideoTrackTemplatesRequest.fromJsonString(params, DescribeVideoTrackTemplatesRequest.class);                          DescribeVideoTrackTemplatesResponse resp = client.DescribeVideoTrackTemplates(req);                          System.out.println(DescribeVideoTrackTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1200,点播,参数模板相关接口,修改转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeWatermarkTemplatesRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeWatermarkTemplatesResponse;  public class DescribeWatermarkTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWatermarkTemplatesRequest req = DescribeWatermarkTemplatesRequest.fromJsonString(params, DescribeWatermarkTemplatesRequest.class);                          DescribeWatermarkTemplatesResponse resp = client.DescribeWatermarkTemplates(req);                          System.out.println(DescribeWatermarkTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1201,点播,参数模板相关接口,修改视频内容审核模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyAIAnalysisTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyAIAnalysisTemplateResponse;  public class ModifyAIAnalysisTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAIAnalysisTemplateRequest req = ModifyAIAnalysisTemplateRequest.fromJsonString(params, ModifyAIAnalysisTemplateRequest.class);                          ModifyAIAnalysisTemplateResponse resp = client.ModifyAIAnalysisTemplate(req);                          System.out.println(ModifyAIAnalysisTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1202,点播,参数模板相关接口,修改雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyAIAnalysisTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyAIAnalysisTemplateResponse;  public class ModifyAIAnalysisTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAIAnalysisTemplateRequest req = ModifyAIAnalysisTemplateRequest.fromJsonString(params, ModifyAIAnalysisTemplateRequest.class);                          ModifyAIAnalysisTemplateResponse resp = client.ModifyAIAnalysisTemplate(req);                          System.out.println(ModifyAIAnalysisTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1203,点播,参数模板相关接口,修改采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyAnimatedGraphicsTemplateResponse;  public class ModifyAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAnimatedGraphicsTemplateRequest req = ModifyAnimatedGraphicsTemplateRequest.fromJsonString(params, ModifyAnimatedGraphicsTemplateRequest.class);                          ModifyAnimatedGraphicsTemplateResponse resp = client.ModifyAnimatedGraphicsTemplate(req);                          System.out.println(ModifyAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1204,点播,参数模板相关接口,修改指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyContentReviewTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyContentReviewTemplateResponse;  public class ModifyContentReviewTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyContentReviewTemplateRequest req = ModifyContentReviewTemplateRequest.fromJsonString(params, ModifyContentReviewTemplateRequest.class);                          ModifyContentReviewTemplateResponse resp = client.ModifyContentReviewTemplate(req);                          System.out.println(ModifyContentReviewTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1205,点播,参数模板相关接口,修改转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyImageSpriteTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyImageSpriteTemplateResponse;  public class ModifyImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyImageSpriteTemplateRequest req = ModifyImageSpriteTemplateRequest.fromJsonString(params, ModifyImageSpriteTemplateRequest.class);                          ModifyImageSpriteTemplateResponse resp = client.ModifyImageSpriteTemplate(req);                          System.out.println(ModifyImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1206,点播,参数模板相关接口,修改水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateResponse;  public class ModifyTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTranscodeTemplateRequest req = ModifyTranscodeTemplateRequest.fromJsonString(params, ModifyTranscodeTemplateRequest.class);                          ModifyTranscodeTemplateResponse resp = client.ModifyTranscodeTemplate(req);                          System.out.println(ModifyTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1207,点播,参数模板相关接口,重设任务流模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateResponse;  public class ModifyTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTranscodeTemplateRequest req = ModifyTranscodeTemplateRequest.fromJsonString(params, ModifyTranscodeTemplateRequest.class);                          ModifyTranscodeTemplateResponse resp = client.ModifyTranscodeTemplate(req);                          System.out.println(ModifyTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1208,点播,媒资管理相关接口,删除媒体,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyTranscodeTemplateResponse;  public class ModifyTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTranscodeTemplateRequest req = ModifyTranscodeTemplateRequest.fromJsonString(params, ModifyTranscodeTemplateRequest.class);                          ModifyTranscodeTemplateResponse resp = client.ModifyTranscodeTemplate(req);                          System.out.println(ModifyTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1209,点播,媒资管理相关接口,获取媒体详细信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateResponse;  public class ResetProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ResetProcedureTemplateRequest req = ResetProcedureTemplateRequest.fromJsonString(params, ResetProcedureTemplateRequest.class);                          ResetProcedureTemplateResponse resp = client.ResetProcedureTemplate(req);                          System.out.println(ResetProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1210,点播,媒资管理相关接口,修改媒体文件属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateResponse;  public class ResetProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ResetProcedureTemplateRequest req = ResetProcedureTemplateRequest.fromJsonString(params, ResetProcedureTemplateRequest.class);                          ResetProcedureTemplateResponse resp = client.ResetProcedureTemplate(req);                          System.out.println(ResetProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1211,点播,媒资管理相关接口,搜索媒体信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ResetProcedureTemplateResponse;  public class ResetProcedureTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ResetProcedureTemplateRequest req = ResetProcedureTemplateRequest.fromJsonString(params, ResetProcedureTemplateRequest.class);                          ResetProcedureTemplateResponse resp = client.ResetProcedureTemplate(req);                          System.out.println(ResetProcedureTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1212,点播,数据统计相关接口,查询点播 CDN 用量数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoResponse;  public class ModifyMediaInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMediaInfoRequest req = ModifyMediaInfoRequest.fromJsonString(params, ModifyMediaInfoRequest.class);                          ModifyMediaInfoResponse resp = client.ModifyMediaInfo(req);                          System.out.println(ModifyMediaInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1213,点播,数据统计相关接口,查询内容审核详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoResponse;  public class ModifyMediaInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMediaInfoRequest req = ModifyMediaInfoRequest.fromJsonString(params, ModifyMediaInfoRequest.class);                          ModifyMediaInfoResponse resp = client.ModifyMediaInfo(req);                          System.out.println(ModifyMediaInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1214,点播,视频上传相关接口,申请上传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoResponse;  public class ModifyMediaInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMediaInfoRequest req = ModifyMediaInfoRequest.fromJsonString(params, ModifyMediaInfoRequest.class);                          ModifyMediaInfoResponse resp = client.ModifyMediaInfo(req);                          System.out.println(ModifyMediaInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1215,点播,视频上传相关接口,确认上传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyMediaInfoResponse;  public class ModifyMediaInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMediaInfoRequest req = ModifyMediaInfoRequest.fromJsonString(params, ModifyMediaInfoRequest.class);                          ModifyMediaInfoResponse resp = client.ModifyMediaInfo(req);                          System.out.println(ModifyMediaInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1216,点播,视频上传相关接口,拉取上传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DescribeReviewDetailsRequest; import com.tencentcloudapi.vod.v20180717.models.DescribeReviewDetailsResponse;  public class DescribeReviewDetails {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeReviewDetailsRequest req = DescribeReviewDetailsRequest.fromJsonString(params, DescribeReviewDetailsRequest.class);                          DescribeReviewDetailsResponse resp = client.DescribeReviewDetails(req);                          System.out.println(DescribeReviewDetailsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1217,点播,视频分类相关接口,创建分类,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CommitUploadRequest; import com.tencentcloudapi.vod.v20180717.models.CommitUploadResponse;  public class CommitUpload {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CommitUploadRequest req = CommitUploadRequest.fromJsonString(params, CommitUploadRequest.class);                          CommitUploadResponse resp = client.CommitUpload(req);                          System.out.println(CommitUploadRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1218,点播,视频分类相关接口,删除分类,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.PullUploadRequest; import com.tencentcloudapi.vod.v20180717.models.PullUploadResponse;  public class PullUpload {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             PullUploadRequest req = PullUploadRequest.fromJsonString(params, PullUploadRequest.class);                          PullUploadResponse resp = client.PullUpload(req);                          System.out.println(PullUploadRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1219,点播,视频分类相关接口,获取所有分类,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.PullUploadRequest; import com.tencentcloudapi.vod.v20180717.models.PullUploadResponse;  public class PullUpload {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             PullUploadRequest req = PullUploadRequest.fromJsonString(params, PullUploadRequest.class);                          PullUploadResponse resp = client.PullUpload(req);                          System.out.println(PullUploadRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1220,点播,视频分类相关接口,修改分类,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.CreateClassRequest; import com.tencentcloudapi.vod.v20180717.models.CreateClassResponse;  public class CreateClass {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClassRequest req = CreateClassRequest.fromJsonString(params, CreateClassRequest.class);                          CreateClassResponse resp = client.CreateClass(req);                          System.out.println(CreateClassRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1221,点播,视频处理相关接口,视频合成,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteClassRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteClassResponse;  public class DeleteClass {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteClassRequest req = DeleteClassRequest.fromJsonString(params, DeleteClassRequest.class);                          DeleteClassResponse resp = client.DeleteClass(req);                          System.out.println(DeleteClassRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1222,点播,视频处理相关接口,编辑视频,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.DeleteClassRequest; import com.tencentcloudapi.vod.v20180717.models.DeleteClassResponse;  public class DeleteClass {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteClassRequest req = DeleteClassRequest.fromJsonString(params, DeleteClassRequest.class);                          DeleteClassResponse resp = client.DeleteClass(req);                          System.out.println(DeleteClassRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1223,点播,视频处理相关接口,视频处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ComposeMediaRequest; import com.tencentcloudapi.vod.v20180717.models.ComposeMediaResponse;  public class ComposeMedia {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ComposeMediaRequest req = ComposeMediaRequest.fromJsonString(params, ComposeMediaRequest.class);                          ComposeMediaResponse resp = client.ComposeMedia(req);                          System.out.println(ComposeMediaRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1224,点播,视频处理相关接口,使用任务流模板进行视频处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1225,点播,视频处理相关接口,对指定 URL 的视频发起视频处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1226,点播,视频处理相关接口,微信小程序视频发布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1227,直播,域名管理相关接口,添加域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.vod.v20180717.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""vod.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1228,直播,域名管理相关接口,删除域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureRequest; import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureResponse;  public class ProcessMediaByProcedure {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ProcessMediaByProcedureRequest req = ProcessMediaByProcedureRequest.fromJsonString(params, ProcessMediaByProcedureRequest.class);                          ProcessMediaByProcedureResponse resp = client.ProcessMediaByProcedure(req);                          System.out.println(ProcessMediaByProcedureRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1229,直播,域名管理相关接口,查询域名信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureRequest; import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureResponse;  public class ProcessMediaByProcedure {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ProcessMediaByProcedureRequest req = ProcessMediaByProcedureRequest.fromJsonString(params, ProcessMediaByProcedureRequest.class);                          ProcessMediaByProcedureResponse resp = client.ProcessMediaByProcedure(req);                          System.out.println(ProcessMediaByProcedureRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1230,直播,域名管理相关接口,查询域名列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureRequest; import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureResponse;  public class ProcessMediaByProcedure {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ProcessMediaByProcedureRequest req = ProcessMediaByProcedureRequest.fromJsonString(params, ProcessMediaByProcedureRequest.class);                          ProcessMediaByProcedureResponse resp = client.ProcessMediaByProcedure(req);                          System.out.println(ProcessMediaByProcedureRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1231,直播,域名管理相关接口,启用域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.vod.v20180717.VodClient;  import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureRequest; import com.tencentcloudapi.vod.v20180717.models.ProcessMediaByProcedureResponse;  public class ProcessMediaByProcedure {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      VodClient client = new VodClient(cred, """", clientProfile);                          String params = ""{}"";             ProcessMediaByProcedureRequest req = ProcessMediaByProcedureRequest.fromJsonString(params, ProcessMediaByProcedureRequest.class);                          ProcessMediaByProcedureResponse resp = client.ProcessMediaByProcedure(req);                          System.out.println(ProcessMediaByProcedureRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1232,直播,域名管理相关接口,禁用域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.EnableLiveDomainRequest; import com.tencentcloudapi.live.v20180801.models.EnableLiveDomainResponse;  public class EnableLiveDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             EnableLiveDomainRequest req = EnableLiveDomainRequest.fromJsonString(params, EnableLiveDomainRequest.class);                          EnableLiveDomainResponse resp = client.EnableLiveDomain(req);                          System.out.println(EnableLiveDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1233,直播,域名管理相关接口,修改播放域名信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.EnableLiveDomainRequest; import com.tencentcloudapi.live.v20180801.models.EnableLiveDomainResponse;  public class EnableLiveDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             EnableLiveDomainRequest req = EnableLiveDomainRequest.fromJsonString(params, EnableLiveDomainRequest.class);                          EnableLiveDomainResponse resp = client.EnableLiveDomain(req);                          System.out.println(EnableLiveDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1234,直播,实时日志相关接口,批量获取日志URL,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLivePlayDomainRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLivePlayDomainResponse;  public class ModifyLivePlayDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLivePlayDomainRequest req = ModifyLivePlayDomainRequest.fromJsonString(params, ModifyLivePlayDomainRequest.class);                          ModifyLivePlayDomainResponse resp = client.ModifyLivePlayDomain(req);                          System.out.println(ModifyLivePlayDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1235,直播,延播管理相关接口,延迟播放,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLivePlayDomainRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLivePlayDomainResponse;  public class ModifyLivePlayDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLivePlayDomainRequest req = ModifyLivePlayDomainRequest.fromJsonString(params, ModifyLivePlayDomainRequest.class);                          ModifyLivePlayDomainResponse resp = client.ModifyLivePlayDomain(req);                          System.out.println(ModifyLivePlayDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1236,直播,延播管理相关接口,获取直播延播列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLogDownloadListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLogDownloadListResponse;  public class DescribeLogDownloadList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLogDownloadListRequest req = DescribeLogDownloadListRequest.fromJsonString(params, DescribeLogDownloadListRequest.class);                          DescribeLogDownloadListResponse resp = client.DescribeLogDownloadList(req);                          System.out.println(DescribeLogDownloadListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1237,直播,延播管理相关接口,恢复延播,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.AddDelayLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.AddDelayLiveStreamResponse;  public class AddDelayLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             AddDelayLiveStreamRequest req = AddDelayLiveStreamRequest.fromJsonString(params, AddDelayLiveStreamRequest.class);                          AddDelayLiveStreamResponse resp = client.AddDelayLiveStream(req);                          System.out.println(AddDelayLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1238,直播,录制管理相关接口,创建录制任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveDelayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveDelayInfoListResponse;  public class DescribeLiveDelayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveDelayInfoListRequest req = DescribeLiveDelayInfoListRequest.fromJsonString(params, DescribeLiveDelayInfoListRequest.class);                          DescribeLiveDelayInfoListResponse resp = client.DescribeLiveDelayInfoList(req);                          System.out.println(DescribeLiveDelayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1239,直播,录制管理相关接口,创建录制规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ResumeDelayLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.ResumeDelayLiveStreamResponse;  public class ResumeDelayLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ResumeDelayLiveStreamRequest req = ResumeDelayLiveStreamRequest.fromJsonString(params, ResumeDelayLiveStreamRequest.class);                          ResumeDelayLiveStreamResponse resp = client.ResumeDelayLiveStream(req);                          System.out.println(ResumeDelayLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1240,直播,录制管理相关接口,创建录制模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordResponse;  public class CreateLiveRecord {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveRecordRequest req = CreateLiveRecordRequest.fromJsonString(params, CreateLiveRecordRequest.class);                          CreateLiveRecordResponse resp = client.CreateLiveRecord(req);                          System.out.println(CreateLiveRecordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1241,直播,录制管理相关接口,删除录制任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordRuleRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordRuleResponse;  public class CreateLiveRecordRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveRecordRuleRequest req = CreateLiveRecordRuleRequest.fromJsonString(params, CreateLiveRecordRuleRequest.class);                          CreateLiveRecordRuleResponse resp = client.CreateLiveRecordRule(req);                          System.out.println(CreateLiveRecordRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1242,直播,录制管理相关接口,删除录制规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordRuleRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveRecordRuleResponse;  public class CreateLiveRecordRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveRecordRuleRequest req = CreateLiveRecordRuleRequest.fromJsonString(params, CreateLiveRecordRuleRequest.class);                          CreateLiveRecordRuleResponse resp = client.CreateLiveRecordRule(req);                          System.out.println(CreateLiveRecordRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1243,直播,录制管理相关接口,删除录制模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordResponse;  public class DeleteLiveRecord {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveRecordRequest req = DeleteLiveRecordRequest.fromJsonString(params, DeleteLiveRecordRequest.class);                          DeleteLiveRecordResponse resp = client.DeleteLiveRecord(req);                          System.out.println(DeleteLiveRecordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1244,直播,录制管理相关接口,获取录制规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordRuleRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordRuleResponse;  public class DeleteLiveRecordRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveRecordRuleRequest req = DeleteLiveRecordRuleRequest.fromJsonString(params, DeleteLiveRecordRuleRequest.class);                          DeleteLiveRecordRuleResponse resp = client.DeleteLiveRecordRule(req);                          System.out.println(DeleteLiveRecordRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1245,直播,录制管理相关接口,获取单个录制模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveRecordTemplateResponse;  public class DeleteLiveRecordTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveRecordTemplateRequest req = DeleteLiveRecordTemplateRequest.fromJsonString(params, DeleteLiveRecordTemplateRequest.class);                          DeleteLiveRecordTemplateResponse resp = client.DeleteLiveRecordTemplate(req);                          System.out.println(DeleteLiveRecordTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1246,直播,录制管理相关接口,获取录制模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordRulesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordRulesResponse;  public class DescribeLiveRecordRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveRecordRulesRequest req = DescribeLiveRecordRulesRequest.fromJsonString(params, DescribeLiveRecordRulesRequest.class);                          DescribeLiveRecordRulesResponse resp = client.DescribeLiveRecordRules(req);                          System.out.println(DescribeLiveRecordRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1247,直播,录制管理相关接口,修改录制模板配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordTemplateResponse;  public class DescribeLiveRecordTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveRecordTemplateRequest req = DescribeLiveRecordTemplateRequest.fromJsonString(params, DescribeLiveRecordTemplateRequest.class);                          DescribeLiveRecordTemplateResponse resp = client.DescribeLiveRecordTemplate(req);                          System.out.println(DescribeLiveRecordTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1248,直播,录制管理相关接口,终止录制任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordTemplatesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveRecordTemplatesResponse;  public class DescribeLiveRecordTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveRecordTemplatesRequest req = DescribeLiveRecordTemplatesRequest.fromJsonString(params, DescribeLiveRecordTemplatesRequest.class);                          DescribeLiveRecordTemplatesResponse resp = client.DescribeLiveRecordTemplates(req);                          System.out.println(DescribeLiveRecordTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1249,直播,截图鉴黄相关接口,创建截图规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.StopLiveRecordRequest; import com.tencentcloudapi.live.v20180801.models.StopLiveRecordResponse;  public class StopLiveRecord {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             StopLiveRecordRequest req = StopLiveRecordRequest.fromJsonString(params, StopLiveRecordRequest.class);                          StopLiveRecordResponse resp = client.StopLiveRecord(req);                          System.out.println(StopLiveRecordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1250,直播,截图鉴黄相关接口,创建截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.StopLiveRecordRequest; import com.tencentcloudapi.live.v20180801.models.StopLiveRecordResponse;  public class StopLiveRecord {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             StopLiveRecordRequest req = StopLiveRecordRequest.fromJsonString(params, StopLiveRecordRequest.class);                          StopLiveRecordResponse resp = client.StopLiveRecord(req);                          System.out.println(StopLiveRecordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1251,直播,截图鉴黄相关接口,删除截图规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveSnapshotRuleRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveSnapshotRuleResponse;  public class CreateLiveSnapshotRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveSnapshotRuleRequest req = CreateLiveSnapshotRuleRequest.fromJsonString(params, CreateLiveSnapshotRuleRequest.class);                          CreateLiveSnapshotRuleResponse resp = client.CreateLiveSnapshotRule(req);                          System.out.println(CreateLiveSnapshotRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1252,直播,截图鉴黄相关接口,删除截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveSnapshotTemplateRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveSnapshotTemplateResponse;  public class CreateLiveSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveSnapshotTemplateRequest req = CreateLiveSnapshotTemplateRequest.fromJsonString(params, CreateLiveSnapshotTemplateRequest.class);                          CreateLiveSnapshotTemplateResponse resp = client.CreateLiveSnapshotTemplate(req);                          System.out.println(CreateLiveSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1253,直播,截图鉴黄相关接口,获取截图规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveSnapshotRuleRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveSnapshotRuleResponse;  public class DeleteLiveSnapshotRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveSnapshotRuleRequest req = DeleteLiveSnapshotRuleRequest.fromJsonString(params, DeleteLiveSnapshotRuleRequest.class);                          DeleteLiveSnapshotRuleResponse resp = client.DeleteLiveSnapshotRule(req);                          System.out.println(DeleteLiveSnapshotRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1254,直播,截图鉴黄相关接口,获取单个截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveSnapshotTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveSnapshotTemplateResponse;  public class DeleteLiveSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveSnapshotTemplateRequest req = DeleteLiveSnapshotTemplateRequest.fromJsonString(params, DeleteLiveSnapshotTemplateRequest.class);                          DeleteLiveSnapshotTemplateResponse resp = client.DeleteLiveSnapshotTemplate(req);                          System.out.println(DeleteLiveSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1255,直播,截图鉴黄相关接口,获取截图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveSnapshotRulesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveSnapshotRulesResponse;  public class DescribeLiveSnapshotRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveSnapshotRulesRequest req = DescribeLiveSnapshotRulesRequest.fromJsonString(params, DescribeLiveSnapshotRulesRequest.class);                          DescribeLiveSnapshotRulesResponse resp = client.DescribeLiveSnapshotRules(req);                          System.out.println(DescribeLiveSnapshotRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1256,直播,截图鉴黄相关接口,修改截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveSnapshotTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveSnapshotTemplateResponse;  public class DescribeLiveSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveSnapshotTemplateRequest req = DescribeLiveSnapshotTemplateRequest.fromJsonString(params, DescribeLiveSnapshotTemplateRequest.class);                          DescribeLiveSnapshotTemplateResponse resp = client.DescribeLiveSnapshotTemplate(req);                          System.out.println(DescribeLiveSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1257,直播,水印管理相关接口,添加水印,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveSnapshotTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveSnapshotTemplateResponse;  public class ModifyLiveSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveSnapshotTemplateRequest req = ModifyLiveSnapshotTemplateRequest.fromJsonString(params, ModifyLiveSnapshotTemplateRequest.class);                          ModifyLiveSnapshotTemplateResponse resp = client.ModifyLiveSnapshotTemplate(req);                          System.out.println(ModifyLiveSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1258,直播,水印管理相关接口,创建水印规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveSnapshotTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveSnapshotTemplateResponse;  public class ModifyLiveSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveSnapshotTemplateRequest req = ModifyLiveSnapshotTemplateRequest.fromJsonString(params, ModifyLiveSnapshotTemplateRequest.class);                          ModifyLiveSnapshotTemplateResponse resp = client.ModifyLiveSnapshotTemplate(req);                          System.out.println(ModifyLiveSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1259,直播,水印管理相关接口,删除水印,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.AddLiveWatermarkRequest; import com.tencentcloudapi.live.v20180801.models.AddLiveWatermarkResponse;  public class AddLiveWatermark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             AddLiveWatermarkRequest req = AddLiveWatermarkRequest.fromJsonString(params, AddLiveWatermarkRequest.class);                          AddLiveWatermarkResponse resp = client.AddLiveWatermark(req);                          System.out.println(AddLiveWatermarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1260,直播,水印管理相关接口,删除水印规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveWatermarkRuleRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveWatermarkRuleResponse;  public class CreateLiveWatermarkRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveWatermarkRuleRequest req = CreateLiveWatermarkRuleRequest.fromJsonString(params, CreateLiveWatermarkRuleRequest.class);                          CreateLiveWatermarkRuleResponse resp = client.CreateLiveWatermarkRule(req);                          System.out.println(CreateLiveWatermarkRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1261,直播,水印管理相关接口,获取单个水印,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkResponse;  public class DeleteLiveWatermark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveWatermarkRequest req = DeleteLiveWatermarkRequest.fromJsonString(params, DeleteLiveWatermarkRequest.class);                          DeleteLiveWatermarkResponse resp = client.DeleteLiveWatermark(req);                          System.out.println(DeleteLiveWatermarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1262,直播,水印管理相关接口,获取水印规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkResponse;  public class DeleteLiveWatermark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveWatermarkRequest req = DeleteLiveWatermarkRequest.fromJsonString(params, DeleteLiveWatermarkRequest.class);                          DeleteLiveWatermarkResponse resp = client.DeleteLiveWatermark(req);                          System.out.println(DeleteLiveWatermarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1263,直播,水印管理相关接口,查询水印列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkRuleRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveWatermarkRuleResponse;  public class DeleteLiveWatermarkRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveWatermarkRuleRequest req = DeleteLiveWatermarkRuleRequest.fromJsonString(params, DeleteLiveWatermarkRuleRequest.class);                          DeleteLiveWatermarkRuleResponse resp = client.DeleteLiveWatermarkRule(req);                          System.out.println(DeleteLiveWatermarkRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1264,直播,水印管理相关接口,更新水印,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveWatermarkRulesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveWatermarkRulesResponse;  public class DescribeLiveWatermarkRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveWatermarkRulesRequest req = DescribeLiveWatermarkRulesRequest.fromJsonString(params, DescribeLiveWatermarkRulesRequest.class);                          DescribeLiveWatermarkRulesResponse resp = client.DescribeLiveWatermarkRules(req);                          System.out.println(DescribeLiveWatermarkRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1265,直播,直播回调相关接口,创建回调规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveWatermarksRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveWatermarksResponse;  public class DescribeLiveWatermarks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveWatermarksRequest req = DescribeLiveWatermarksRequest.fromJsonString(params, DescribeLiveWatermarksRequest.class);                          DescribeLiveWatermarksResponse resp = client.DescribeLiveWatermarks(req);                          System.out.println(DescribeLiveWatermarksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1266,直播,直播回调相关接口,创建回调模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.UpdateLiveWatermarkRequest; import com.tencentcloudapi.live.v20180801.models.UpdateLiveWatermarkResponse;  public class UpdateLiveWatermark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateLiveWatermarkRequest req = UpdateLiveWatermarkRequest.fromJsonString(params, UpdateLiveWatermarkRequest.class);                          UpdateLiveWatermarkResponse resp = client.UpdateLiveWatermark(req);                          System.out.println(UpdateLiveWatermarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1267,直播,直播回调相关接口,删除回调规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveCallbackRuleRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveCallbackRuleResponse;  public class CreateLiveCallbackRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveCallbackRuleRequest req = CreateLiveCallbackRuleRequest.fromJsonString(params, CreateLiveCallbackRuleRequest.class);                          CreateLiveCallbackRuleResponse resp = client.CreateLiveCallbackRule(req);                          System.out.println(CreateLiveCallbackRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1268,直播,直播回调相关接口,删除回调模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveCallbackTemplateRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveCallbackTemplateResponse;  public class CreateLiveCallbackTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveCallbackTemplateRequest req = CreateLiveCallbackTemplateRequest.fromJsonString(params, CreateLiveCallbackTemplateRequest.class);                          CreateLiveCallbackTemplateResponse resp = client.CreateLiveCallbackTemplate(req);                          System.out.println(CreateLiveCallbackTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1269,直播,直播回调相关接口,获取回调规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveCallbackRuleRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveCallbackRuleResponse;  public class DeleteLiveCallbackRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveCallbackRuleRequest req = DeleteLiveCallbackRuleRequest.fromJsonString(params, DeleteLiveCallbackRuleRequest.class);                          DeleteLiveCallbackRuleResponse resp = client.DeleteLiveCallbackRule(req);                          System.out.println(DeleteLiveCallbackRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1270,直播,直播回调相关接口,获取单个回调模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveCallbackTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveCallbackTemplateResponse;  public class DeleteLiveCallbackTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveCallbackTemplateRequest req = DeleteLiveCallbackTemplateRequest.fromJsonString(params, DeleteLiveCallbackTemplateRequest.class);                          DeleteLiveCallbackTemplateResponse resp = client.DeleteLiveCallbackTemplate(req);                          System.out.println(DeleteLiveCallbackTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1271,直播,直播回调相关接口,获取回调模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackRulesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackRulesResponse;  public class DescribeLiveCallbackRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveCallbackRulesRequest req = DescribeLiveCallbackRulesRequest.fromJsonString(params, DescribeLiveCallbackRulesRequest.class);                          DescribeLiveCallbackRulesResponse resp = client.DescribeLiveCallbackRules(req);                          System.out.println(DescribeLiveCallbackRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1272,直播,直播回调相关接口,修改回调模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackTemplateResponse;  public class DescribeLiveCallbackTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveCallbackTemplateRequest req = DescribeLiveCallbackTemplateRequest.fromJsonString(params, DescribeLiveCallbackTemplateRequest.class);                          DescribeLiveCallbackTemplateResponse resp = client.DescribeLiveCallbackTemplate(req);                          System.out.println(DescribeLiveCallbackTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1273,直播,直播拉流相关接口,添加拉流配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackTemplatesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveCallbackTemplatesResponse;  public class DescribeLiveCallbackTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveCallbackTemplatesRequest req = DescribeLiveCallbackTemplatesRequest.fromJsonString(params, DescribeLiveCallbackTemplatesRequest.class);                          DescribeLiveCallbackTemplatesResponse resp = client.DescribeLiveCallbackTemplates(req);                          System.out.println(DescribeLiveCallbackTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1274,直播,直播拉流相关接口,删除拉流配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveCallbackTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveCallbackTemplateResponse;  public class ModifyLiveCallbackTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveCallbackTemplateRequest req = ModifyLiveCallbackTemplateRequest.fromJsonString(params, ModifyLiveCallbackTemplateRequest.class);                          ModifyLiveCallbackTemplateResponse resp = client.ModifyLiveCallbackTemplate(req);                          System.out.println(ModifyLiveCallbackTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1275,直播,直播拉流相关接口,查询拉流配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveCallbackTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveCallbackTemplateResponse;  public class ModifyLiveCallbackTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveCallbackTemplateRequest req = ModifyLiveCallbackTemplateRequest.fromJsonString(params, ModifyLiveCallbackTemplateRequest.class);                          ModifyLiveCallbackTemplateResponse resp = client.ModifyLiveCallbackTemplate(req);                          System.out.println(ModifyLiveCallbackTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1276,直播,直播拉流相关接口,更新拉流配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreatePullStreamConfigRequest; import com.tencentcloudapi.live.v20180801.models.CreatePullStreamConfigResponse;  public class CreatePullStreamConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePullStreamConfigRequest req = CreatePullStreamConfigRequest.fromJsonString(params, CreatePullStreamConfigRequest.class);                          CreatePullStreamConfigResponse resp = client.CreatePullStreamConfig(req);                          System.out.println(CreatePullStreamConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1277,直播,直播拉流相关接口,修改拉流配置状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribePullStreamConfigsRequest; import com.tencentcloudapi.live.v20180801.models.DescribePullStreamConfigsResponse;  public class DescribePullStreamConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePullStreamConfigsRequest req = DescribePullStreamConfigsRequest.fromJsonString(params, DescribePullStreamConfigsRequest.class);                          DescribePullStreamConfigsResponse resp = client.DescribePullStreamConfigs(req);                          System.out.println(DescribePullStreamConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1278,直播,直播流管理相关接口,获取禁推流列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamConfigRequest; import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamConfigResponse;  public class ModifyPullStreamConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPullStreamConfigRequest req = ModifyPullStreamConfigRequest.fromJsonString(params, ModifyPullStreamConfigRequest.class);                          ModifyPullStreamConfigResponse resp = client.ModifyPullStreamConfig(req);                          System.out.println(ModifyPullStreamConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1279,直播,直播流管理相关接口,查询推断流事件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamConfigRequest; import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamConfigResponse;  public class ModifyPullStreamConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPullStreamConfigRequest req = ModifyPullStreamConfigRequest.fromJsonString(params, ModifyPullStreamConfigRequest.class);                          ModifyPullStreamConfigResponse resp = client.ModifyPullStreamConfig(req);                          System.out.println(ModifyPullStreamConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1280,直播,直播流管理相关接口,查询在线推流信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamStatusRequest; import com.tencentcloudapi.live.v20180801.models.ModifyPullStreamStatusResponse;  public class ModifyPullStreamStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPullStreamStatusRequest req = ModifyPullStreamStatusRequest.fromJsonString(params, ModifyPullStreamStatusRequest.class);                          ModifyPullStreamStatusResponse resp = client.ModifyPullStreamStatus(req);                          System.out.println(ModifyPullStreamStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1281,直播,直播流管理相关接口,查询直播中的流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamEventListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamEventListResponse;  public class DescribeLiveStreamEventList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveStreamEventListRequest req = DescribeLiveStreamEventListRequest.fromJsonString(params, DescribeLiveStreamEventListRequest.class);                          DescribeLiveStreamEventListResponse resp = client.DescribeLiveStreamEventList(req);                          System.out.println(DescribeLiveStreamEventListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1282,直播,直播流管理相关接口,查询历史流列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamOnlineInfoRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamOnlineInfoResponse;  public class DescribeLiveStreamOnlineInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveStreamOnlineInfoRequest req = DescribeLiveStreamOnlineInfoRequest.fromJsonString(params, DescribeLiveStreamOnlineInfoRequest.class);                          DescribeLiveStreamOnlineInfoResponse resp = client.DescribeLiveStreamOnlineInfo(req);                          System.out.println(DescribeLiveStreamOnlineInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1283,直播,直播流管理相关接口,查询流状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamOnlineListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamOnlineListResponse;  public class DescribeLiveStreamOnlineList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveStreamOnlineListRequest req = DescribeLiveStreamOnlineListRequest.fromJsonString(params, DescribeLiveStreamOnlineListRequest.class);                          DescribeLiveStreamOnlineListResponse resp = client.DescribeLiveStreamOnlineList(req);                          System.out.println(DescribeLiveStreamOnlineListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1284,直播,直播流管理相关接口,断开直播流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamPublishedListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamPublishedListResponse;  public class DescribeLiveStreamPublishedList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveStreamPublishedListRequest req = DescribeLiveStreamPublishedListRequest.fromJsonString(params, DescribeLiveStreamPublishedListRequest.class);                          DescribeLiveStreamPublishedListResponse resp = client.DescribeLiveStreamPublishedList(req);                          System.out.println(DescribeLiveStreamPublishedListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1285,直播,直播流管理相关接口,禁播直播流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamStateRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveStreamStateResponse;  public class DescribeLiveStreamState {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveStreamStateRequest req = DescribeLiveStreamStateRequest.fromJsonString(params, DescribeLiveStreamStateRequest.class);                          DescribeLiveStreamStateResponse resp = client.DescribeLiveStreamState(req);                          System.out.println(DescribeLiveStreamStateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1286,直播,直播流管理相关接口,恢复直播流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DropLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.DropLiveStreamResponse;  public class DropLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DropLiveStreamRequest req = DropLiveStreamRequest.fromJsonString(params, DropLiveStreamRequest.class);                          DropLiveStreamResponse resp = client.DropLiveStream(req);                          System.out.println(DropLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1287,直播,直播转码相关接口,创建转码规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ForbidLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.ForbidLiveStreamResponse;  public class ForbidLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ForbidLiveStreamRequest req = ForbidLiveStreamRequest.fromJsonString(params, ForbidLiveStreamRequest.class);                          ForbidLiveStreamResponse resp = client.ForbidLiveStream(req);                          System.out.println(ForbidLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1288,直播,直播转码相关接口,创建转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ResumeLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.ResumeLiveStreamResponse;  public class ResumeLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ResumeLiveStreamRequest req = ResumeLiveStreamRequest.fromJsonString(params, ResumeLiveStreamRequest.class);                          ResumeLiveStreamResponse resp = client.ResumeLiveStream(req);                          System.out.println(ResumeLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1289,直播,直播转码相关接口,删除转码规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ResumeLiveStreamRequest; import com.tencentcloudapi.live.v20180801.models.ResumeLiveStreamResponse;  public class ResumeLiveStream {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ResumeLiveStreamRequest req = ResumeLiveStreamRequest.fromJsonString(params, ResumeLiveStreamRequest.class);                          ResumeLiveStreamResponse resp = client.ResumeLiveStream(req);                          System.out.println(ResumeLiveStreamRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1290,直播,直播转码相关接口,删除转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveTranscodeTemplateResponse;  public class CreateLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveTranscodeTemplateRequest req = CreateLiveTranscodeTemplateRequest.fromJsonString(params, CreateLiveTranscodeTemplateRequest.class);                          CreateLiveTranscodeTemplateResponse resp = client.CreateLiveTranscodeTemplate(req);                          System.out.println(CreateLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1291,直播,直播转码相关接口,获取转码规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveTranscodeRuleRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveTranscodeRuleResponse;  public class DeleteLiveTranscodeRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveTranscodeRuleRequest req = DeleteLiveTranscodeRuleRequest.fromJsonString(params, DeleteLiveTranscodeRuleRequest.class);                          DeleteLiveTranscodeRuleResponse resp = client.DeleteLiveTranscodeRule(req);                          System.out.println(DeleteLiveTranscodeRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1292,直播,直播转码相关接口,获取单个转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DeleteLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DeleteLiveTranscodeTemplateResponse;  public class DeleteLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLiveTranscodeTemplateRequest req = DeleteLiveTranscodeTemplateRequest.fromJsonString(params, DeleteLiveTranscodeTemplateRequest.class);                          DeleteLiveTranscodeTemplateResponse resp = client.DeleteLiveTranscodeTemplate(req);                          System.out.println(DeleteLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1293,直播,直播转码相关接口,获取转码模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveTranscodeRulesRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveTranscodeRulesResponse;  public class DescribeLiveTranscodeRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveTranscodeRulesRequest req = DescribeLiveTranscodeRulesRequest.fromJsonString(params, DescribeLiveTranscodeRulesRequest.class);                          DescribeLiveTranscodeRulesResponse resp = client.DescribeLiveTranscodeRules(req);                          System.out.println(DescribeLiveTranscodeRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1294,直播,直播转码相关接口,修改转码模板配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveTranscodeTemplateResponse;  public class DescribeLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveTranscodeTemplateRequest req = DescribeLiveTranscodeTemplateRequest.fromJsonString(params, DescribeLiveTranscodeTemplateRequest.class);                          DescribeLiveTranscodeTemplateResponse resp = client.DescribeLiveTranscodeTemplate(req);                          System.out.println(DescribeLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1295,直播,统计查询相关接口,直播计费带宽和流量数据查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateResponse;  public class ModifyLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveTranscodeTemplateRequest req = ModifyLiveTranscodeTemplateRequest.fromJsonString(params, ModifyLiveTranscodeTemplateRequest.class);                          ModifyLiveTranscodeTemplateResponse resp = client.ModifyLiveTranscodeTemplate(req);                          System.out.println(ModifyLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1296,直播,统计查询相关接口,查询按省份和运营商分组的播放数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateResponse;  public class ModifyLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveTranscodeTemplateRequest req = ModifyLiveTranscodeTemplateRequest.fromJsonString(params, ModifyLiveTranscodeTemplateRequest.class);                          ModifyLiveTranscodeTemplateResponse resp = client.ModifyLiveTranscodeTemplate(req);                          System.out.println(ModifyLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1297,直播,统计查询相关接口,查询播放http状态码明细数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateResponse;  public class ModifyLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveTranscodeTemplateRequest req = ModifyLiveTranscodeTemplateRequest.fromJsonString(params, ModifyLiveTranscodeTemplateRequest.class);                          ModifyLiveTranscodeTemplateResponse resp = client.ModifyLiveTranscodeTemplate(req);                          System.out.println(ModifyLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1298,直播,统计查询相关接口,查询实时的域名维度下行播放数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLiveTranscodeTemplateResponse;  public class ModifyLiveTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLiveTranscodeTemplateRequest req = ModifyLiveTranscodeTemplateRequest.fromJsonString(params, ModifyLiveTranscodeTemplateRequest.class);                          ModifyLiveTranscodeTemplateResponse resp = client.ModifyLiveTranscodeTemplate(req);                          System.out.println(ModifyLiveTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1299,直播,统计查询相关接口,获取在线流的推流数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeGroupProIspPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeGroupProIspPlayInfoListResponse;  public class DescribeGroupProIspPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupProIspPlayInfoListRequest req = DescribeGroupProIspPlayInfoListRequest.fromJsonString(params, DescribeGroupProIspPlayInfoListRequest.class);                          DescribeGroupProIspPlayInfoListResponse resp = client.DescribeGroupProIspPlayInfoList(req);                          System.out.println(DescribeGroupProIspPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1300,直播,统计查询相关接口,查询直播转码统计信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeHttpStatusInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeHttpStatusInfoListResponse;  public class DescribeHttpStatusInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHttpStatusInfoListRequest req = DescribeHttpStatusInfoListRequest.fromJsonString(params, DescribeHttpStatusInfoListRequest.class);                          DescribeHttpStatusInfoListResponse resp = client.DescribeHttpStatusInfoList(req);                          System.out.println(DescribeHttpStatusInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1301,直播,统计查询相关接口,查询播放http错误码实时数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeHttpStatusInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeHttpStatusInfoListResponse;  public class DescribeHttpStatusInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHttpStatusInfoListRequest req = DescribeHttpStatusInfoListRequest.fromJsonString(params, DescribeHttpStatusInfoListRequest.class);                          DescribeHttpStatusInfoListResponse resp = client.DescribeHttpStatusInfoList(req);                          System.out.println(DescribeHttpStatusInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1302,直播,统计查询相关接口,查询播放http错误码汇总数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLiveDomainPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLiveDomainPlayInfoListResponse;  public class DescribeLiveDomainPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLiveDomainPlayInfoListRequest req = DescribeLiveDomainPlayInfoListRequest.fromJsonString(params, DescribeLiveDomainPlayInfoListRequest.class);                          DescribeLiveDomainPlayInfoListResponse resp = client.DescribeLiveDomainPlayInfoList(req);                          System.out.println(DescribeLiveDomainPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1303,直播,统计查询相关接口,查询分省份分运营商播放汇总数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribePlayErrorCodeDetailInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribePlayErrorCodeDetailInfoListResponse;  public class DescribePlayErrorCodeDetailInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePlayErrorCodeDetailInfoListRequest req = DescribePlayErrorCodeDetailInfoListRequest.fromJsonString(params, DescribePlayErrorCodeDetailInfoListRequest.class);                          DescribePlayErrorCodeDetailInfoListResponse resp = client.DescribePlayErrorCodeDetailInfoList(req);                          System.out.println(DescribePlayErrorCodeDetailInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1304,直播,统计查询相关接口,按省份运营商查询播放信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribePlayErrorCodeSumInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribePlayErrorCodeSumInfoListResponse;  public class DescribePlayErrorCodeSumInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePlayErrorCodeSumInfoListRequest req = DescribePlayErrorCodeSumInfoListRequest.fromJsonString(params, DescribePlayErrorCodeSumInfoListRequest.class);                          DescribePlayErrorCodeSumInfoListResponse resp = client.DescribePlayErrorCodeSumInfoList(req);                          System.out.println(DescribePlayErrorCodeSumInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1305,直播,统计查询相关接口,查询所有流的流量数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeProIspPlaySumInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeProIspPlaySumInfoListResponse;  public class DescribeProIspPlaySumInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProIspPlaySumInfoListRequest req = DescribeProIspPlaySumInfoListRequest.fromJsonString(params, DescribeProIspPlaySumInfoListRequest.class);                          DescribeProIspPlaySumInfoListResponse resp = client.DescribeProIspPlaySumInfoList(req);                          System.out.println(DescribeProIspPlaySumInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1306,直播,统计查询相关接口,查询流的播放信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeProvinceIspPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeProvinceIspPlayInfoListResponse;  public class DescribeProvinceIspPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProvinceIspPlayInfoListRequest req = DescribeProvinceIspPlayInfoListRequest.fromJsonString(params, DescribeProvinceIspPlayInfoListRequest.class);                          DescribeProvinceIspPlayInfoListResponse resp = client.DescribeProvinceIspPlayInfoList(req);                          System.out.println(DescribeProvinceIspPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1307,直播,统计查询相关接口,查询某条流上行推流质量数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamDayPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamDayPlayInfoListResponse;  public class DescribeStreamDayPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamDayPlayInfoListRequest req = DescribeStreamDayPlayInfoListRequest.fromJsonString(params, DescribeStreamDayPlayInfoListRequest.class);                          DescribeStreamDayPlayInfoListResponse resp = client.DescribeStreamDayPlayInfoList(req);                          System.out.println(DescribeStreamDayPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1308,直播,统计查询相关接口,查询某段时间top n客户端ip汇总信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1309,直播,统计查询相关接口,查询某时间段top n的域名或流id信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1310,直播,证书管理相关接口,域名绑定证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1311,直播,证书管理相关接口,添加证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1312,直播,证书管理相关接口,删除证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1313,直播,证书管理相关接口,获取证书信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1314,直播,证书管理相关接口,获取证书信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1315,直播,证书管理相关接口,获取域名证书信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1316,直播,证书管理相关接口,修改证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPlayInfoListResponse;  public class DescribeStreamPlayInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPlayInfoListRequest req = DescribeStreamPlayInfoListRequest.fromJsonString(params, DescribeStreamPlayInfoListRequest.class);                          DescribeStreamPlayInfoListResponse resp = client.DescribeStreamPlayInfoList(req);                          System.out.println(DescribeStreamPlayInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1317,直播,证书管理相关接口,修改域名和证书绑定信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeStreamPushInfoListRequest; import com.tencentcloudapi.live.v20180801.models.DescribeStreamPushInfoListResponse;  public class DescribeStreamPushInfoList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStreamPushInfoListRequest req = DescribeStreamPushInfoListRequest.fromJsonString(params, DescribeStreamPushInfoListRequest.class);                          DescribeStreamPushInfoListResponse resp = client.DescribeStreamPushInfoList(req);                          System.out.println(DescribeStreamPushInfoListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1318,直播,证书管理相关接口,解绑域名证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.CreateLiveCertRequest; import com.tencentcloudapi.live.v20180801.models.CreateLiveCertResponse;  public class CreateLiveCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLiveCertRequest req = CreateLiveCertRequest.fromJsonString(params, CreateLiveCertRequest.class);                          CreateLiveCertResponse resp = client.CreateLiveCert(req);                          System.out.println(CreateLiveCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1319,直播,鉴权管理相关接口,查询播放鉴权key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.UnBindLiveDomainCertRequest; import com.tencentcloudapi.live.v20180801.models.UnBindLiveDomainCertResponse;  public class UnBindLiveDomainCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             UnBindLiveDomainCertRequest req = UnBindLiveDomainCertRequest.fromJsonString(params, UnBindLiveDomainCertRequest.class);                          UnBindLiveDomainCertResponse resp = client.UnBindLiveDomainCert(req);                          System.out.println(UnBindLiveDomainCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1320,直播,鉴权管理相关接口,查询推流鉴权key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.UnBindLiveDomainCertRequest; import com.tencentcloudapi.live.v20180801.models.UnBindLiveDomainCertResponse;  public class UnBindLiveDomainCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             UnBindLiveDomainCertRequest req = UnBindLiveDomainCertRequest.fromJsonString(params, UnBindLiveDomainCertRequest.class);                          UnBindLiveDomainCertResponse resp = client.UnBindLiveDomainCert(req);                          System.out.println(UnBindLiveDomainCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1321,直播,鉴权管理相关接口,修改播放鉴权key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLivePlayAuthKeyRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLivePlayAuthKeyResponse;  public class DescribeLivePlayAuthKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLivePlayAuthKeyRequest req = DescribeLivePlayAuthKeyRequest.fromJsonString(params, DescribeLivePlayAuthKeyRequest.class);                          DescribeLivePlayAuthKeyResponse resp = client.DescribeLivePlayAuthKey(req);                          System.out.println(DescribeLivePlayAuthKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1322,直播,鉴权管理相关接口,修改推流鉴权key,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.DescribeLivePushAuthKeyRequest; import com.tencentcloudapi.live.v20180801.models.DescribeLivePushAuthKeyResponse;  public class DescribeLivePushAuthKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""live.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLivePushAuthKeyRequest req = DescribeLivePushAuthKeyRequest.fromJsonString(params, DescribeLivePushAuthKeyRequest.class);                          DescribeLivePushAuthKeyResponse resp = client.DescribeLivePushAuthKey(req);                          System.out.println(DescribeLivePushAuthKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1323,智能语音服务,其他接口,智能闲聊,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLivePushAuthKeyRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLivePushAuthKeyResponse;  public class ModifyLivePushAuthKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLivePushAuthKeyRequest req = ModifyLivePushAuthKeyRequest.fromJsonString(params, ModifyLivePushAuthKeyRequest.class);                          ModifyLivePushAuthKeyResponse resp = client.ModifyLivePushAuthKey(req);                          System.out.println(ModifyLivePushAuthKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1324,智能语音服务,其他接口,同传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.live.v20180801.LiveClient;  import com.tencentcloudapi.live.v20180801.models.ModifyLivePushAuthKeyRequest; import com.tencentcloudapi.live.v20180801.models.ModifyLivePushAuthKeyResponse;  public class ModifyLivePushAuthKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      LiveClient client = new LiveClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyLivePushAuthKeyRequest req = ModifyLivePushAuthKeyRequest.fromJsonString(params, ModifyLivePushAuthKeyRequest.class);                          ModifyLivePushAuthKeyResponse resp = client.ModifyLivePushAuthKey(req);                          System.out.println(ModifyLivePushAuthKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1325,智能语音服务,语音合成接口,语音合成,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.aai.v20180522.AaiClient;  import com.tencentcloudapi.aai.v20180522.models.SimultaneousInterpretingRequest; import com.tencentcloudapi.aai.v20180522.models.SimultaneousInterpretingResponse;  public class SimultaneousInterpreting {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AaiClient client = new AaiClient(cred, """", clientProfile);                          String params = ""{}"";             SimultaneousInterpretingRequest req = SimultaneousInterpretingRequest.fromJsonString(params, SimultaneousInterpretingRequest.class);                          SimultaneousInterpretingResponse resp = client.SimultaneousInterpreting(req);                          System.out.println(SimultaneousInterpretingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1326,智能语音服务,语音识别相关接口,一句话识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.aai.v20180522.AaiClient;  import com.tencentcloudapi.aai.v20180522.models.TextToVoiceRequest; import com.tencentcloudapi.aai.v20180522.models.TextToVoiceResponse;  public class TextToVoice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AaiClient client = new AaiClient(cred, """", clientProfile);                          String params = ""{}"";             TextToVoiceRequest req = TextToVoiceRequest.fromJsonString(params, TextToVoiceRequest.class);                          TextToVoiceResponse resp = client.TextToVoice(req);                          System.out.println(TextToVoiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1327,腾讯优评,品牌分析相关接口,获取品牌好差评数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.aai.v20180522.AaiClient;  import com.tencentcloudapi.aai.v20180522.models.SentenceRecognitionRequest; import com.tencentcloudapi.aai.v20180522.models.SentenceRecognitionResponse;  public class SentenceRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AaiClient client = new AaiClient(cred, """", clientProfile);                          String params = ""{}"";             SentenceRecognitionRequest req = SentenceRecognitionRequest.fromJsonString(params, SentenceRecognitionRequest.class);                          SentenceRecognitionResponse resp = client.SentenceRecognition(req);                          System.out.println(SentenceRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1328,腾讯优评,品牌分析相关接口,获取品牌总热度,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.aai.v20180522.AaiClient;  import com.tencentcloudapi.aai.v20180522.models.SentenceRecognitionRequest; import com.tencentcloudapi.aai.v20180522.models.SentenceRecognitionResponse;  public class SentenceRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""aai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AaiClient client = new AaiClient(cred, """", clientProfile);                          String params = ""{}"";             SentenceRecognitionRequest req = SentenceRecognitionRequest.fromJsonString(params, SentenceRecognitionRequest.class);                          SentenceRecognitionResponse resp = client.SentenceRecognition(req);                          System.out.println(SentenceRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1329,腾讯优评,品牌分析相关接口,获取品牌媒体报道数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandCommentCountRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandCommentCountResponse;  public class DescribeBrandCommentCount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandCommentCountRequest req = DescribeBrandCommentCountRequest.fromJsonString(params, DescribeBrandCommentCountRequest.class);                          DescribeBrandCommentCountResponse resp = client.DescribeBrandCommentCount(req);                          System.out.println(DescribeBrandCommentCountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1330,腾讯优评,品牌分析相关接口,获取品牌用户差评列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandExposureRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandExposureResponse;  public class DescribeBrandExposure {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandExposureRequest req = DescribeBrandExposureRequest.fromJsonString(params, DescribeBrandExposureRequest.class);                          DescribeBrandExposureResponse resp = client.DescribeBrandExposure(req);                          System.out.println(DescribeBrandExposureRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1331,腾讯优评,品牌分析相关接口,获取品牌用户好评列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandMediaReportRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandMediaReportResponse;  public class DescribeBrandMediaReport {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandMediaReportRequest req = DescribeBrandMediaReportRequest.fromJsonString(params, DescribeBrandMediaReportRequest.class);                          DescribeBrandMediaReportResponse resp = client.DescribeBrandMediaReport(req);                          System.out.println(DescribeBrandMediaReportRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1332,腾讯优评,品牌分析相关接口,获取品牌社交渠道观点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandNegCommentsRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandNegCommentsResponse;  public class DescribeBrandNegComments {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandNegCommentsRequest req = DescribeBrandNegCommentsRequest.fromJsonString(params, DescribeBrandNegCommentsRequest.class);                          DescribeBrandNegCommentsResponse resp = client.DescribeBrandNegComments(req);                          System.out.println(DescribeBrandNegCommentsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1333,腾讯优评,品牌分析相关接口,获取品牌社交渠道提及数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandPosCommentsRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandPosCommentsResponse;  public class DescribeBrandPosComments {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandPosCommentsRequest req = DescribeBrandPosCommentsRequest.fromJsonString(params, DescribeBrandPosCommentsRequest.class);                          DescribeBrandPosCommentsResponse resp = client.DescribeBrandPosComments(req);                          System.out.println(DescribeBrandPosCommentsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1334,腾讯优评,品牌分析相关接口,获取品牌画像结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandSocialOpinionRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeBrandSocialOpinionResponse;  public class DescribeBrandSocialOpinion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBrandSocialOpinionRequest req = DescribeBrandSocialOpinionRequest.fromJsonString(params, DescribeBrandSocialOpinionRequest.class);                          DescribeBrandSocialOpinionResponse resp = client.DescribeBrandSocialOpinion(req);                          System.out.println(DescribeBrandSocialOpinionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1335,腾讯优评,行业分析相关接口,获取定制任务媒体报道列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeUserPortraitRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeUserPortraitResponse;  public class DescribeUserPortrait {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUserPortraitRequest req = DescribeUserPortraitRequest.fromJsonString(params, DescribeUserPortraitRequest.class);                          DescribeUserPortraitResponse resp = client.DescribeUserPortrait(req);                          System.out.println(DescribeUserPortraitRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1336,机器翻译,API接口,图片翻译,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeIndustryNewsRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeIndustryNewsResponse;  public class DescribeIndustryNews {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tmt.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIndustryNewsRequest req = DescribeIndustryNewsRequest.fromJsonString(params, DescribeIndustryNewsRequest.class);                          DescribeIndustryNewsResponse resp = client.DescribeIndustryNews(req);                          System.out.println(DescribeIndustryNewsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1337,机器翻译,API接口,语种识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbm.v20180129.TbmClient;  import com.tencentcloudapi.tbm.v20180129.models.DescribeIndustryNewsRequest; import com.tencentcloudapi.tbm.v20180129.models.DescribeIndustryNewsResponse;  public class DescribeIndustryNews {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tmt.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbmClient client = new TbmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIndustryNewsRequest req = DescribeIndustryNewsRequest.fromJsonString(params, DescribeIndustryNewsRequest.class);                          DescribeIndustryNewsResponse resp = client.DescribeIndustryNews(req);                          System.out.println(DescribeIndustryNewsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1338,机器翻译,API接口,语音翻译,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tmt.v20180321.TmtClient;  import com.tencentcloudapi.tmt.v20180321.models.LanguageDetectRequest; import com.tencentcloudapi.tmt.v20180321.models.LanguageDetectResponse;  public class LanguageDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tmt.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TmtClient client = new TmtClient(cred, """", clientProfile);                          String params = ""{}"";             LanguageDetectRequest req = LanguageDetectRequest.fromJsonString(params, LanguageDetectRequest.class);                          LanguageDetectResponse resp = client.LanguageDetect(req);                          System.out.println(LanguageDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1339,机器翻译,API接口,文本翻译,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tmt.v20180321.TmtClient;  import com.tencentcloudapi.tmt.v20180321.models.LanguageDetectRequest; import com.tencentcloudapi.tmt.v20180321.models.LanguageDetectResponse;  public class LanguageDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tmt.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TmtClient client = new TmtClient(cred, """", clientProfile);                          String params = ""{}"";             LanguageDetectRequest req = LanguageDetectRequest.fromJsonString(params, LanguageDetectRequest.class);                          LanguageDetectResponse resp = client.LanguageDetect(req);                          System.out.println(LanguageDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1340,电子合同服务,电子合同相关接口,检测验证码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tmt.v20180321.TmtClient;  import com.tencentcloudapi.tmt.v20180321.models.TextTranslateRequest; import com.tencentcloudapi.tmt.v20180321.models.TextTranslateResponse;  public class TextTranslate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TmtClient client = new TmtClient(cred, """", clientProfile);                          String params = ""{}"";             TextTranslateRequest req = TextTranslateRequest.fromJsonString(params, TextTranslateRequest.class);                          TextTranslateResponse resp = client.TextTranslate(req);                          System.out.println(TextTranslateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1341,电子合同服务,电子合同相关接口,通过上传创建合同,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tmt.v20180321.TmtClient;  import com.tencentcloudapi.tmt.v20180321.models.TextTranslateRequest; import com.tencentcloudapi.tmt.v20180321.models.TextTranslateResponse;  public class TextTranslate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TmtClient client = new TmtClient(cred, """", clientProfile);                          String params = ""{}"";             TextTranslateRequest req = TextTranslateRequest.fromJsonString(params, TextTranslateRequest.class);                          TextTranslateResponse resp = client.TextTranslate(req);                          System.out.println(TextTranslateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1342,电子合同服务,电子合同相关接口,企业开户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.CheckVcodeRequest; import com.tencentcloudapi.ds.v20180523.models.CheckVcodeResponse;  public class CheckVcode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             CheckVcodeRequest req = CheckVcodeRequest.fromJsonString(params, CheckVcodeRequest.class);                          CheckVcodeResponse resp = client.CheckVcode(req);                          System.out.println(CheckVcodeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1343,电子合同服务,电子合同相关接口,个人开户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.CreateContractByUploadRequest; import com.tencentcloudapi.ds.v20180523.models.CreateContractByUploadResponse;  public class CreateContractByUpload {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateContractByUploadRequest req = CreateContractByUploadRequest.fromJsonString(params, CreateContractByUploadRequest.class);                          CreateContractByUploadResponse resp = client.CreateContractByUpload(req);                          System.out.println(CreateContractByUploadRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1344,电子合同服务,电子合同相关接口,新增签章,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.CreateEnterpriseAccountRequest; import com.tencentcloudapi.ds.v20180523.models.CreateEnterpriseAccountResponse;  public class CreateEnterpriseAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateEnterpriseAccountRequest req = CreateEnterpriseAccountRequest.fromJsonString(params, CreateEnterpriseAccountRequest.class);                          CreateEnterpriseAccountResponse resp = client.CreateEnterpriseAccount(req);                          System.out.println(CreateEnterpriseAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1345,电子合同服务,电子合同相关接口,删除帐号,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.CreatePersonalAccountRequest; import com.tencentcloudapi.ds.v20180523.models.CreatePersonalAccountResponse;  public class CreatePersonalAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePersonalAccountRequest req = CreatePersonalAccountRequest.fromJsonString(params, CreatePersonalAccountRequest.class);                          CreatePersonalAccountResponse resp = client.CreatePersonalAccount(req);                          System.out.println(CreatePersonalAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1346,电子合同服务,电子合同相关接口,删除签章,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.CreateSealRequest; import com.tencentcloudapi.ds.v20180523.models.CreateSealResponse;  public class CreateSeal {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSealRequest req = CreateSealRequest.fromJsonString(params, CreateSealRequest.class);                          CreateSealResponse resp = client.CreateSeal(req);                          System.out.println(CreateSealRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1347,电子合同服务,电子合同相关接口,获取任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.DeleteAccountRequest; import com.tencentcloudapi.ds.v20180523.models.DeleteAccountResponse;  public class DeleteAccount {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccountRequest req = DeleteAccountRequest.fromJsonString(params, DeleteAccountRequest.class);                          DeleteAccountResponse resp = client.DeleteAccount(req);                          System.out.println(DeleteAccountRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1348,电子合同服务,电子合同相关接口,下载合同,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.DescribeTaskStatusRequest; import com.tencentcloudapi.ds.v20180523.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1349,电子合同服务,电子合同相关接口,发送验证码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.DescribeTaskStatusRequest; import com.tencentcloudapi.ds.v20180523.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1350,电子合同服务,电子合同相关接口,按坐标签署合同,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.DownloadContractRequest; import com.tencentcloudapi.ds.v20180523.models.DownloadContractResponse;  public class DownloadContract {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadContractRequest req = DownloadContractRequest.fromJsonString(params, DownloadContractRequest.class);                          DownloadContractResponse resp = client.DownloadContract(req);                          System.out.println(DownloadContractRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1351,电子合同服务,电子合同相关接口,按关键字签署合同,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.SignContractByCoordinateRequest; import com.tencentcloudapi.ds.v20180523.models.SignContractByCoordinateResponse;  public class SignContractByCoordinate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             SignContractByCoordinateRequest req = SignContractByCoordinateRequest.fromJsonString(params, SignContractByCoordinateRequest.class);                          SignContractByCoordinateResponse resp = client.SignContractByCoordinate(req);                          System.out.println(SignContractByCoordinateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1352,物联网通信,产品相关接口,创建产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.SignContractByKeywordRequest; import com.tencentcloudapi.ds.v20180523.models.SignContractByKeywordResponse;  public class SignContractByKeyword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             SignContractByKeywordRequest req = SignContractByKeywordRequest.fromJsonString(params, SignContractByKeywordRequest.class);                          SignContractByKeywordResponse resp = client.SignContractByKeyword(req);                          System.out.println(SignContractByKeywordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1353,物联网通信,产品相关接口,创建Topic,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ds.v20180523.DsClient;  import com.tencentcloudapi.ds.v20180523.models.SignContractByKeywordRequest; import com.tencentcloudapi.ds.v20180523.models.SignContractByKeywordResponse;  public class SignContractByKeyword {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DsClient client = new DsClient(cred, """", clientProfile);                          String params = ""{}"";             SignContractByKeywordRequest req = SignContractByKeywordRequest.fromJsonString(params, SignContractByKeywordRequest.class);                          SignContractByKeywordResponse resp = client.SignContractByKeyword(req);                          System.out.println(SignContractByKeywordRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1354,物联网通信,产品相关接口,删除产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateProductRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateProductResponse;  public class CreateProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProductRequest req = CreateProductRequest.fromJsonString(params, CreateProductRequest.class);                          CreateProductResponse resp = client.CreateProduct(req);                          System.out.println(CreateProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1355,物联网通信,产品相关接口,获取产品列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateTopicPolicyRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateTopicPolicyResponse;  public class CreateTopicPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTopicPolicyRequest req = CreateTopicPolicyRequest.fromJsonString(params, CreateTopicPolicyRequest.class);                          CreateTopicPolicyResponse resp = client.CreateTopicPolicy(req);                          System.out.println(CreateTopicPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1356,物联网通信,产品相关接口,更新Topic,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DeleteProductRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DeleteProductResponse;  public class DeleteProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProductRequest req = DeleteProductRequest.fromJsonString(params, DeleteProductRequest.class);                          DeleteProductResponse resp = client.DeleteProduct(req);                          System.out.println(DeleteProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1357,物联网通信,任务相关接口,取消任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.UpdateTopicPolicyRequest; import com.tencentcloudapi.iotcloud.v20180614.models.UpdateTopicPolicyResponse;  public class UpdateTopicPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateTopicPolicyRequest req = UpdateTopicPolicyRequest.fromJsonString(params, UpdateTopicPolicyRequest.class);                          UpdateTopicPolicyResponse resp = client.UpdateTopicPolicy(req);                          System.out.println(UpdateTopicPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1358,物联网通信,任务相关接口,创建任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CancelTaskRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CancelTaskResponse;  public class CancelTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CancelTaskRequest req = CancelTaskRequest.fromJsonString(params, CancelTaskRequest.class);                          CancelTaskResponse resp = client.CancelTask(req);                          System.out.println(CancelTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1359,物联网通信,任务相关接口,获取任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CancelTaskRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CancelTaskResponse;  public class CancelTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CancelTaskRequest req = CancelTaskRequest.fromJsonString(params, CancelTaskRequest.class);                          CancelTaskResponse resp = client.CancelTask(req);                          System.out.println(CancelTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1360,物联网通信,任务相关接口,获取任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateTaskRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateTaskResponse;  public class CreateTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTaskRequest req = CreateTaskRequest.fromJsonString(params, CreateTaskRequest.class);                          CreateTaskResponse resp = client.CreateTask(req);                          System.out.println(CreateTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1361,物联网通信,消息相关接口,模拟设备发送消息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1362,物联网通信,消息相关接口,发布消息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1363,物联网通信,消息相关接口,服务下发消息到设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1364,物联网通信,规则引擎相关接口,创建规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.PublishToDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.PublishToDeviceResponse;  public class PublishToDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             PublishToDeviceRequest req = PublishToDeviceRequest.fromJsonString(params, PublishToDeviceRequest.class);                          PublishToDeviceResponse resp = client.PublishToDevice(req);                          System.out.println(PublishToDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1365,物联网通信,规则引擎相关接口,删除规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.PublishToDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.PublishToDeviceResponse;  public class PublishToDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             PublishToDeviceRequest req = PublishToDeviceRequest.fromJsonString(params, PublishToDeviceRequest.class);                          PublishToDeviceResponse resp = client.PublishToDevice(req);                          System.out.println(PublishToDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1366,物联网通信,规则引擎相关接口,禁用规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DeleteTopicRuleRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DeleteTopicRuleResponse;  public class DeleteTopicRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTopicRuleRequest req = DeleteTopicRuleRequest.fromJsonString(params, DeleteTopicRuleRequest.class);                          DeleteTopicRuleResponse resp = client.DeleteTopicRule(req);                          System.out.println(DeleteTopicRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1367,物联网通信,规则引擎相关接口,启用规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DeleteTopicRuleRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DeleteTopicRuleResponse;  public class DeleteTopicRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTopicRuleRequest req = DeleteTopicRuleRequest.fromJsonString(params, DeleteTopicRuleRequest.class);                          DeleteTopicRuleResponse resp = client.DeleteTopicRule(req);                          System.out.println(DeleteTopicRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1368,物联网通信,规则引擎相关接口,替换规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DisableTopicRuleRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DisableTopicRuleResponse;  public class DisableTopicRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DisableTopicRuleRequest req = DisableTopicRuleRequest.fromJsonString(params, DisableTopicRuleRequest.class);                          DisableTopicRuleResponse resp = client.DisableTopicRule(req);                          System.out.println(DisableTopicRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1369,物联网通信,设备影子相关接口,获取设备影子,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.ReplaceTopicRuleRequest; import com.tencentcloudapi.iotcloud.v20180614.models.ReplaceTopicRuleResponse;  public class ReplaceTopicRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceTopicRuleRequest req = ReplaceTopicRuleRequest.fromJsonString(params, ReplaceTopicRuleRequest.class);                          ReplaceTopicRuleResponse resp = client.ReplaceTopicRule(req);                          System.out.println(ReplaceTopicRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1370,物联网通信,设备影子相关接口,更新设备影子,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.ReplaceTopicRuleRequest; import com.tencentcloudapi.iotcloud.v20180614.models.ReplaceTopicRuleResponse;  public class ReplaceTopicRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             ReplaceTopicRuleRequest req = ReplaceTopicRuleRequest.fromJsonString(params, ReplaceTopicRuleRequest.class);                          ReplaceTopicRuleResponse resp = client.ReplaceTopicRule(req);                          System.out.println(ReplaceTopicRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1371,物联网通信,设备相关接口,批量绑定子设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceShadowRequest; import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceShadowResponse;  public class UpdateDeviceShadow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateDeviceShadowRequest req = UpdateDeviceShadowRequest.fromJsonString(params, UpdateDeviceShadowRequest.class);                          UpdateDeviceShadowResponse resp = client.UpdateDeviceShadow(req);                          System.out.println(UpdateDeviceShadowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1372,物联网通信,设备相关接口,创建设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceShadowRequest; import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceShadowResponse;  public class UpdateDeviceShadow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateDeviceShadowRequest req = UpdateDeviceShadowRequest.fromJsonString(params, UpdateDeviceShadowRequest.class);                          UpdateDeviceShadowResponse resp = client.UpdateDeviceShadow(req);                          System.out.println(UpdateDeviceShadowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1373,物联网通信,设备相关接口,创建lora设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceResponse;  public class CreateLoraDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLoraDeviceRequest req = CreateLoraDeviceRequest.fromJsonString(params, CreateLoraDeviceRequest.class);                          CreateLoraDeviceResponse resp = client.CreateLoraDevice(req);                          System.out.println(CreateLoraDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1374,物联网通信,设备相关接口,创建多个设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceResponse;  public class CreateLoraDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLoraDeviceRequest req = CreateLoraDeviceRequest.fromJsonString(params, CreateLoraDeviceRequest.class);                          CreateLoraDeviceResponse resp = client.CreateLoraDevice(req);                          System.out.println(CreateLoraDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1375,物联网通信,设备相关接口,删除设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateLoraDeviceResponse;  public class CreateLoraDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLoraDeviceRequest req = CreateLoraDeviceRequest.fromJsonString(params, CreateLoraDeviceRequest.class);                          CreateLoraDeviceResponse resp = client.CreateLoraDevice(req);                          System.out.println(CreateLoraDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1376,物联网通信,设备相关接口,删除lora设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.CreateMultiDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.CreateMultiDeviceResponse;  public class CreateMultiDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMultiDeviceRequest req = CreateMultiDeviceRequest.fromJsonString(params, CreateMultiDeviceRequest.class);                          CreateMultiDeviceResponse resp = client.CreateMultiDevice(req);                          System.out.println(CreateMultiDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1377,物联网通信,设备相关接口,查看设备详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DeleteDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DeleteDeviceResponse;  public class DeleteDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDeviceRequest req = DeleteDeviceRequest.fromJsonString(params, DeleteDeviceRequest.class);                          DeleteDeviceResponse resp = client.DeleteDevice(req);                          System.out.println(DeleteDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1378,物联网通信,设备相关接口,获取设备私钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DeleteLoraDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DeleteLoraDeviceResponse;  public class DeleteLoraDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteLoraDeviceRequest req = DeleteLoraDeviceRequest.fromJsonString(params, DeleteLoraDeviceRequest.class);                          DeleteLoraDeviceResponse resp = client.DeleteLoraDevice(req);                          System.out.println(DeleteLoraDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1379,物联网通信,设备相关接口,获取设备列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDeviceResponse;  public class DescribeDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceRequest req = DescribeDeviceRequest.fromJsonString(params, DescribeDeviceRequest.class);                          DescribeDeviceResponse resp = client.DescribeDevice(req);                          System.out.println(DescribeDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1380,物联网通信,设备相关接口,获取lora设备详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDeviceClientKeyRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDeviceClientKeyResponse;  public class DescribeDeviceClientKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceClientKeyRequest req = DescribeDeviceClientKeyRequest.fromJsonString(params, DescribeDeviceClientKeyRequest.class);                          DescribeDeviceClientKeyResponse resp = client.DescribeDeviceClientKey(req);                          System.out.println(DescribeDeviceClientKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1381,物联网通信,设备相关接口,获取创建多设备结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDevicesRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeDevicesResponse;  public class DescribeDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDevicesRequest req = DescribeDevicesRequest.fromJsonString(params, DescribeDevicesRequest.class);                          DescribeDevicesResponse resp = client.DescribeDevices(req);                          System.out.println(DescribeDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1382,物联网通信,设备相关接口,获取创建多设备任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeLoraDeviceRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeLoraDeviceResponse;  public class DescribeLoraDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeLoraDeviceRequest req = DescribeLoraDeviceRequest.fromJsonString(params, DescribeLoraDeviceRequest.class);                          DescribeLoraDeviceResponse resp = client.DescribeLoraDevice(req);                          System.out.println(DescribeLoraDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1383,物联网通信,设备相关接口,重置设备状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeMultiDevicesRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeMultiDevicesResponse;  public class DescribeMultiDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMultiDevicesRequest req = DescribeMultiDevicesRequest.fromJsonString(params, DescribeMultiDevicesRequest.class);                          DescribeMultiDevicesResponse resp = client.DescribeMultiDevices(req);                          System.out.println(DescribeMultiDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1384,物联网通信,设备相关接口,批量解绑子设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.DescribeMultiDevTaskRequest; import com.tencentcloudapi.iotcloud.v20180614.models.DescribeMultiDevTaskResponse;  public class DescribeMultiDevTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMultiDevTaskRequest req = DescribeMultiDevTaskRequest.fromJsonString(params, DescribeMultiDevTaskRequest.class);                          DescribeMultiDevTaskResponse resp = client.DescribeMultiDevTask(req);                          System.out.println(DescribeMultiDevTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1385,物联网通信,设备相关接口,切换设备可用状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.ResetDeviceStateRequest; import com.tencentcloudapi.iotcloud.v20180614.models.ResetDeviceStateResponse;  public class ResetDeviceState {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             ResetDeviceStateRequest req = ResetDeviceStateRequest.fromJsonString(params, ResetDeviceStateRequest.class);                          ResetDeviceStateResponse resp = client.ResetDeviceState(req);                          System.out.println(ResetDeviceStateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1386,密钥管理系统,密钥相关接口,取消CMK计划删除操作,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceAvailableStateRequest; import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceAvailableStateResponse;  public class UpdateDeviceAvailableState {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateDeviceAvailableStateRequest req = UpdateDeviceAvailableStateRequest.fromJsonString(params, UpdateDeviceAvailableStateRequest.class);                          UpdateDeviceAvailableStateResponse resp = client.UpdateDeviceAvailableState(req);                          System.out.println(UpdateDeviceAvailableStateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1387,密钥管理系统,密钥相关接口,创建主密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotcloud.v20180614.IotcloudClient;  import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceAvailableStateRequest; import com.tencentcloudapi.iotcloud.v20180614.models.UpdateDeviceAvailableStateResponse;  public class UpdateDeviceAvailableState {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotcloud.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotcloudClient client = new IotcloudClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateDeviceAvailableStateRequest req = UpdateDeviceAvailableStateRequest.fromJsonString(params, UpdateDeviceAvailableStateRequest.class);                          UpdateDeviceAvailableStateResponse resp = client.UpdateDeviceAvailableState(req);                          System.out.println(UpdateDeviceAvailableStateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1388,密钥管理系统,密钥相关接口,解密,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.CancelKeyDeletionRequest; import com.tencentcloudapi.kms.v20190118.models.CancelKeyDeletionResponse;  public class CancelKeyDeletion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             CancelKeyDeletionRequest req = CancelKeyDeletionRequest.fromJsonString(params, CancelKeyDeletionRequest.class);                          CancelKeyDeletionResponse resp = client.CancelKeyDeletion(req);                          System.out.println(CancelKeyDeletionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1389,密钥管理系统,密钥相关接口,删除导入的密钥材料,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.CreateKeyRequest; import com.tencentcloudapi.kms.v20190118.models.CreateKeyResponse;  public class CreateKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateKeyRequest req = CreateKeyRequest.fromJsonString(params, CreateKeyRequest.class);                          CreateKeyResponse resp = client.CreateKey(req);                          System.out.println(CreateKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1390,密钥管理系统,密钥相关接口,获取主密钥属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DecryptRequest; import com.tencentcloudapi.kms.v20190118.models.DecryptResponse;  public class Decrypt {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DecryptRequest req = DecryptRequest.fromJsonString(params, DecryptRequest.class);                          DecryptResponse resp = client.Decrypt(req);                          System.out.println(DecryptRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1391,密钥管理系统,密钥相关接口,获取多个主密钥属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DeleteImportedKeyMaterialRequest; import com.tencentcloudapi.kms.v20190118.models.DeleteImportedKeyMaterialResponse;  public class DeleteImportedKeyMaterial {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteImportedKeyMaterialRequest req = DeleteImportedKeyMaterialRequest.fromJsonString(params, DeleteImportedKeyMaterialRequest.class);                          DeleteImportedKeyMaterialResponse resp = client.DeleteImportedKeyMaterial(req);                          System.out.println(DeleteImportedKeyMaterialRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1392,密钥管理系统,密钥相关接口,禁用主密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DescribeKeysRequest; import com.tencentcloudapi.kms.v20190118.models.DescribeKeysResponse;  public class DescribeKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeKeysRequest req = DescribeKeysRequest.fromJsonString(params, DescribeKeysRequest.class);                          DescribeKeysResponse resp = client.DescribeKeys(req);                          System.out.println(DescribeKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1393,密钥管理系统,密钥相关接口,禁止密钥轮换,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DescribeKeysRequest; import com.tencentcloudapi.kms.v20190118.models.DescribeKeysResponse;  public class DescribeKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeKeysRequest req = DescribeKeysRequest.fromJsonString(params, DescribeKeysRequest.class);                          DescribeKeysResponse resp = client.DescribeKeys(req);                          System.out.println(DescribeKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1394,密钥管理系统,密钥相关接口,批量禁用主密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DisableKeyRequest; import com.tencentcloudapi.kms.v20190118.models.DisableKeyResponse;  public class DisableKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DisableKeyRequest req = DisableKeyRequest.fromJsonString(params, DisableKeyRequest.class);                          DisableKeyResponse resp = client.DisableKey(req);                          System.out.println(DisableKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1395,密钥管理系统,密钥相关接口,启用主密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DisableKeyRotationRequest; import com.tencentcloudapi.kms.v20190118.models.DisableKeyRotationResponse;  public class DisableKeyRotation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DisableKeyRotationRequest req = DisableKeyRotationRequest.fromJsonString(params, DisableKeyRotationRequest.class);                          DisableKeyRotationResponse resp = client.DisableKeyRotation(req);                          System.out.println(DisableKeyRotationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1396,密钥管理系统,密钥相关接口,开启密钥轮换,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.DisableKeysRequest; import com.tencentcloudapi.kms.v20190118.models.DisableKeysResponse;  public class DisableKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             DisableKeysRequest req = DisableKeysRequest.fromJsonString(params, DisableKeysRequest.class);                          DisableKeysResponse resp = client.DisableKeys(req);                          System.out.println(DisableKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1397,密钥管理系统,密钥相关接口,批量启动主密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.EnableKeyRequest; import com.tencentcloudapi.kms.v20190118.models.EnableKeyResponse;  public class EnableKey {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             EnableKeyRequest req = EnableKeyRequest.fromJsonString(params, EnableKeyRequest.class);                          EnableKeyResponse resp = client.EnableKey(req);                          System.out.println(EnableKeyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1398,密钥管理系统,密钥相关接口,加密,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.EnableKeyRotationRequest; import com.tencentcloudapi.kms.v20190118.models.EnableKeyRotationResponse;  public class EnableKeyRotation {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             EnableKeyRotationRequest req = EnableKeyRotationRequest.fromJsonString(params, EnableKeyRotationRequest.class);                          EnableKeyRotationResponse resp = client.EnableKeyRotation(req);                          System.out.println(EnableKeyRotationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1399,密钥管理系统,密钥相关接口,生成数据密钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.EnableKeysRequest; import com.tencentcloudapi.kms.v20190118.models.EnableKeysResponse;  public class EnableKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             EnableKeysRequest req = EnableKeysRequest.fromJsonString(params, EnableKeysRequest.class);                          EnableKeysResponse resp = client.EnableKeys(req);                          System.out.println(EnableKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1400,密钥管理系统,密钥相关接口,随机数生成接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.EncryptRequest; import com.tencentcloudapi.kms.v20190118.models.EncryptResponse;  public class Encrypt {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             EncryptRequest req = EncryptRequest.fromJsonString(params, EncryptRequest.class);                          EncryptResponse resp = client.Encrypt(req);                          System.out.println(EncryptRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1401,密钥管理系统,密钥相关接口,查询密钥轮换状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.GenerateRandomRequest; import com.tencentcloudapi.kms.v20190118.models.GenerateRandomResponse;  public class GenerateRandom {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             GenerateRandomRequest req = GenerateRandomRequest.fromJsonString(params, GenerateRandomRequest.class);                          GenerateRandomResponse resp = client.GenerateRandom(req);                          System.out.println(GenerateRandomRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1402,密钥管理系统,密钥相关接口,获取导入主密钥（CMK）材料的参数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.GetKeyRotationStatusRequest; import com.tencentcloudapi.kms.v20190118.models.GetKeyRotationStatusResponse;  public class GetKeyRotationStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             GetKeyRotationStatusRequest req = GetKeyRotationStatusRequest.fromJsonString(params, GetKeyRotationStatusRequest.class);                          GetKeyRotationStatusResponse resp = client.GetKeyRotationStatus(req);                          System.out.println(GetKeyRotationStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1403,密钥管理系统,密钥相关接口,查询服务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.GetParametersForImportRequest; import com.tencentcloudapi.kms.v20190118.models.GetParametersForImportResponse;  public class GetParametersForImport {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             GetParametersForImportRequest req = GetParametersForImportRequest.fromJsonString(params, GetParametersForImportRequest.class);                          GetParametersForImportResponse resp = client.GetParametersForImport(req);                          System.out.println(GetParametersForImportRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1404,密钥管理系统,密钥相关接口,导入密钥材料,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.GetServiceStatusRequest; import com.tencentcloudapi.kms.v20190118.models.GetServiceStatusResponse;  public class GetServiceStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             GetServiceStatusRequest req = GetServiceStatusRequest.fromJsonString(params, GetServiceStatusRequest.class);                          GetServiceStatusResponse resp = client.GetServiceStatus(req);                          System.out.println(GetServiceStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1405,密钥管理系统,密钥相关接口,获取主密钥列表详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.ImportKeyMaterialRequest; import com.tencentcloudapi.kms.v20190118.models.ImportKeyMaterialResponse;  public class ImportKeyMaterial {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             ImportKeyMaterialRequest req = ImportKeyMaterialRequest.fromJsonString(params, ImportKeyMaterialRequest.class);                          ImportKeyMaterialResponse resp = client.ImportKeyMaterial(req);                          System.out.println(ImportKeyMaterialRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1406,密钥管理系统,密钥相关接口,获取主密钥列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.ListKeyDetailRequest; import com.tencentcloudapi.kms.v20190118.models.ListKeyDetailResponse;  public class ListKeyDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             ListKeyDetailRequest req = ListKeyDetailRequest.fromJsonString(params, ListKeyDetailRequest.class);                          ListKeyDetailResponse resp = client.ListKeyDetail(req);                          System.out.println(ListKeyDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1407,密钥管理系统,密钥相关接口,密文刷新,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.ListKeysRequest; import com.tencentcloudapi.kms.v20190118.models.ListKeysResponse;  public class ListKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             ListKeysRequest req = ListKeysRequest.fromJsonString(params, ListKeysRequest.class);                          ListKeysResponse resp = client.ListKeys(req);                          System.out.println(ListKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1408,密钥管理系统,密钥相关接口,CMK计划删除接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.ReEncryptRequest; import com.tencentcloudapi.kms.v20190118.models.ReEncryptResponse;  public class ReEncrypt {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             ReEncryptRequest req = ReEncryptRequest.fromJsonString(params, ReEncryptRequest.class);                          ReEncryptResponse resp = client.ReEncrypt(req);                          System.out.println(ReEncryptRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1409,密钥管理系统,密钥相关接口,修改别名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.ScheduleKeyDeletionRequest; import com.tencentcloudapi.kms.v20190118.models.ScheduleKeyDeletionResponse;  public class ScheduleKeyDeletion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             ScheduleKeyDeletionRequest req = ScheduleKeyDeletionRequest.fromJsonString(params, ScheduleKeyDeletionRequest.class);                          ScheduleKeyDeletionResponse resp = client.ScheduleKeyDeletion(req);                          System.out.println(ScheduleKeyDeletionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1410,密钥管理系统,密钥相关接口,修改主密钥描述信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.UpdateAliasRequest; import com.tencentcloudapi.kms.v20190118.models.UpdateAliasResponse;  public class UpdateAlias {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""kms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateAliasRequest req = UpdateAliasRequest.fromJsonString(params, UpdateAliasRequest.class);                          UpdateAliasResponse resp = client.UpdateAlias(req);                          System.out.println(UpdateAliasRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1411,金融联络机器人,金融联络机器人相关接口,提交黑名单申请,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.UpdateKeyDescriptionRequest; import com.tencentcloudapi.kms.v20190118.models.UpdateKeyDescriptionResponse;  public class UpdateKeyDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateKeyDescriptionRequest req = UpdateKeyDescriptionRequest.fromJsonString(params, UpdateKeyDescriptionRequest.class);                          UpdateKeyDescriptionResponse resp = client.UpdateKeyDescription(req);                          System.out.println(UpdateKeyDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1412,金融联络机器人,金融联络机器人相关接口,提交信审申请,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.kms.v20190118.KmsClient;  import com.tencentcloudapi.kms.v20190118.models.UpdateKeyDescriptionRequest; import com.tencentcloudapi.kms.v20190118.models.UpdateKeyDescriptionResponse;  public class UpdateKeyDescription {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      KmsClient client = new KmsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateKeyDescriptionRequest req = UpdateKeyDescriptionRequest.fromJsonString(params, UpdateKeyDescriptionRequest.class);                          UpdateKeyDescriptionResponse resp = client.UpdateKeyDescription(req);                          System.out.println(UpdateKeyDescriptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1413,金融联络机器人,金融联络机器人相关接口,获取信审结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.ApplyBlackListRequest; import com.tencentcloudapi.cr.v20180321.models.ApplyBlackListResponse;  public class ApplyBlackList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             ApplyBlackListRequest req = ApplyBlackListRequest.fromJsonString(params, ApplyBlackListRequest.class);                          ApplyBlackListResponse resp = client.ApplyBlackList(req);                          System.out.println(ApplyBlackListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1414,金融联络机器人,金融联络机器人相关接口,录音查询（接口）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.ApplyCreditAuditRequest; import com.tencentcloudapi.cr.v20180321.models.ApplyCreditAuditResponse;  public class ApplyCreditAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             ApplyCreditAuditRequest req = ApplyCreditAuditRequest.fromJsonString(params, ApplyCreditAuditRequest.class);                          ApplyCreditAuditResponse resp = client.ApplyCreditAudit(req);                          System.out.println(ApplyCreditAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1415,金融联络机器人,金融联络机器人相关接口,获取任务状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DescribeRecordsRequest; import com.tencentcloudapi.cr.v20180321.models.DescribeRecordsResponse;  public class DescribeRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRecordsRequest req = DescribeRecordsRequest.fromJsonString(params, DescribeRecordsRequest.class);                          DescribeRecordsResponse resp = client.DescribeRecords(req);                          System.out.println(DescribeRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1416,金融联络机器人,金融联络机器人相关接口,对话文本下载,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DescribeRecordsRequest; import com.tencentcloudapi.cr.v20180321.models.DescribeRecordsResponse;  public class DescribeRecords {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRecordsRequest req = DescribeRecordsRequest.fromJsonString(params, DescribeRecordsRequest.class);                          DescribeRecordsResponse resp = client.DescribeRecords(req);                          System.out.println(DescribeRecordsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1417,金融联络机器人,金融联络机器人相关接口,录音查询（文件）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DescribeTaskStatusRequest; import com.tencentcloudapi.cr.v20180321.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1418,金融联络机器人,金融联络机器人相关接口,报告下载,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DownloadDialogueTextRequest; import com.tencentcloudapi.cr.v20180321.models.DownloadDialogueTextResponse;  public class DownloadDialogueText {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadDialogueTextRequest req = DownloadDialogueTextRequest.fromJsonString(params, DownloadDialogueTextRequest.class);                          DownloadDialogueTextResponse resp = client.DownloadDialogueText(req);                          System.out.println(DownloadDialogueTextRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1419,金融联络机器人,金融联络机器人相关接口,上传文件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DownloadRecordListRequest; import com.tencentcloudapi.cr.v20180321.models.DownloadRecordListResponse;  public class DownloadRecordList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadRecordListRequest req = DownloadRecordListRequest.fromJsonString(params, DownloadRecordListRequest.class);                          DownloadRecordListResponse resp = client.DownloadRecordList(req);                          System.out.println(DownloadRecordListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1420,金融联络机器人,金融联络机器人相关接口,上传数据文件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.DownloadReportRequest; import com.tencentcloudapi.cr.v20180321.models.DownloadReportResponse;  public class DownloadReport {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadReportRequest req = DownloadReportRequest.fromJsonString(params, DownloadReportRequest.class);                          DownloadReportResponse resp = client.DownloadReport(req);                          System.out.println(DownloadReportRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1421,渠道合作伙伴,业务信息相关接口,查询业务明细,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.UploadFileRequest; import com.tencentcloudapi.cr.v20180321.models.UploadFileResponse;  public class UploadFile {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             UploadFileRequest req = UploadFileRequest.fromJsonString(params, UploadFileRequest.class);                          UploadFileResponse resp = client.UploadFile(req);                          System.out.println(UploadFileRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1422,渠道合作伙伴,业务信息相关接口,查询代理商返佣信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cr.v20180321.CrClient;  import com.tencentcloudapi.cr.v20180321.models.UploadFileRequest; import com.tencentcloudapi.cr.v20180321.models.UploadFileResponse;  public class UploadFile {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CrClient client = new CrClient(cred, """", clientProfile);                          String params = ""{}"";             UploadFileRequest req = UploadFileRequest.fromJsonString(params, UploadFileRequest.class);                          UploadFileResponse resp = client.UploadFile(req);                          System.out.println(UploadFileRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1423,渠道合作伙伴,客户操作相关接口,给客户转账,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeRebateInfosRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeRebateInfosResponse;  public class DescribeRebateInfos {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRebateInfosRequest req = DescribeRebateInfosRequest.fromJsonString(params, DescribeRebateInfosRequest.class);                          DescribeRebateInfosResponse resp = client.DescribeRebateInfos(req);                          System.out.println(DescribeRebateInfosRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1424,渠道合作伙伴,客户操作相关接口,审核客户,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeRebateInfosRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeRebateInfosResponse;  public class DescribeRebateInfos {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRebateInfosRequest req = DescribeRebateInfosRequest.fromJsonString(params, DescribeRebateInfosRequest.class);                          DescribeRebateInfosResponse resp = client.DescribeRebateInfos(req);                          System.out.println(DescribeRebateInfosRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1425,渠道合作伙伴,客户操作相关接口,查询已审核客户列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.AgentTransferMoneyRequest; import com.tencentcloudapi.partners.v20180321.models.AgentTransferMoneyResponse;  public class AgentTransferMoney {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             AgentTransferMoneyRequest req = AgentTransferMoneyRequest.fromJsonString(params, AgentTransferMoneyRequest.class);                          AgentTransferMoneyResponse resp = client.AgentTransferMoney(req);                          System.out.println(AgentTransferMoneyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1426,渠道合作伙伴,客户操作相关接口,查询待审核客户列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.AuditApplyClientRequest; import com.tencentcloudapi.partners.v20180321.models.AuditApplyClientResponse;  public class AuditApplyClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             AuditApplyClientRequest req = AuditApplyClientRequest.fromJsonString(params, AuditApplyClientRequest.class);                          AuditApplyClientResponse resp = client.AuditApplyClient(req);                          System.out.println(AuditApplyClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1427,渠道合作伙伴,客户操作相关接口,查询客户余额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeAgentAuditedClientsRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeAgentAuditedClientsResponse;  public class DescribeAgentAuditedClients {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAgentAuditedClientsRequest req = DescribeAgentAuditedClientsRequest.fromJsonString(params, DescribeAgentAuditedClientsRequest.class);                          DescribeAgentAuditedClientsResponse resp = client.DescribeAgentAuditedClients(req);                          System.out.println(DescribeAgentAuditedClientsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1428,渠道合作伙伴,客户操作相关接口,代理商业务员查询接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeAgentClientsRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeAgentClientsResponse;  public class DescribeAgentClients {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAgentClientsRequest req = DescribeAgentClientsRequest.fromJsonString(params, DescribeAgentClientsRequest.class);                          DescribeAgentClientsResponse resp = client.DescribeAgentClients(req);                          System.out.println(DescribeAgentClientsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1429,渠道合作伙伴,客户操作相关接口,修改客户备注,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeClientBalanceRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeClientBalanceResponse;  public class DescribeClientBalance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeClientBalanceRequest req = DescribeClientBalanceRequest.fromJsonString(params, DescribeClientBalanceRequest.class);                          DescribeClientBalanceResponse resp = client.DescribeClientBalance(req);                          System.out.println(DescribeClientBalanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1430,渠道合作伙伴,订单操作相关接口,支付订单（合作伙伴使用）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.ModifyClientRemarkRequest; import com.tencentcloudapi.partners.v20180321.models.ModifyClientRemarkResponse;  public class ModifyClientRemark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyClientRemarkRequest req = ModifyClientRemarkRequest.fromJsonString(params, ModifyClientRemarkRequest.class);                          ModifyClientRemarkResponse resp = client.ModifyClientRemark(req);                          System.out.println(ModifyClientRemarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1431,渠道合作伙伴,订单操作相关接口,合作伙伴为客户创建强代付关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.ModifyClientRemarkRequest; import com.tencentcloudapi.partners.v20180321.models.ModifyClientRemarkResponse;  public class ModifyClientRemark {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyClientRemarkRequest req = ModifyClientRemarkRequest.fromJsonString(params, ModifyClientRemarkRequest.class);                          ModifyClientRemarkResponse resp = client.ModifyClientRemark(req);                          System.out.println(ModifyClientRemarkRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1432,渠道合作伙伴,订单操作相关接口,代理商缓存订单查询接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.CreatePayRelationForClientRequest; import com.tencentcloudapi.partners.v20180321.models.CreatePayRelationForClientResponse;  public class CreatePayRelationForClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePayRelationForClientRequest req = CreatePayRelationForClientRequest.fromJsonString(params, CreatePayRelationForClientRequest.class);                          CreatePayRelationForClientResponse resp = client.CreatePayRelationForClient(req);                          System.out.println(CreatePayRelationForClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1433,渠道合作伙伴,订单操作相关接口,代理商代付订单查询接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.CreatePayRelationForClientRequest; import com.tencentcloudapi.partners.v20180321.models.CreatePayRelationForClientResponse;  public class CreatePayRelationForClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePayRelationForClientRequest req = CreatePayRelationForClientRequest.fromJsonString(params, CreatePayRelationForClientRequest.class);                          CreatePayRelationForClientResponse resp = client.CreatePayRelationForClient(req);                          System.out.println(CreatePayRelationForClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1434,渠道合作伙伴,订单操作相关接口,合作伙伴为客户消除强代付关系,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.DescribeAgentDealsCacheRequest; import com.tencentcloudapi.partners.v20180321.models.DescribeAgentDealsCacheResponse;  public class DescribeAgentDealsCache {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""partners.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAgentDealsCacheRequest req = DescribeAgentDealsCacheRequest.fromJsonString(params, DescribeAgentDealsCacheRequest.class);                          DescribeAgentDealsCacheResponse resp = client.DescribeAgentDealsCache(req);                          System.out.println(DescribeAgentDealsCacheRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1435,物联网开发平台,产品管理相关接口,新建产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientRequest; import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientResponse;  public class RemovePayRelationForClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             RemovePayRelationForClientRequest req = RemovePayRelationForClientRequest.fromJsonString(params, RemovePayRelationForClientRequest.class);                          RemovePayRelationForClientResponse resp = client.RemovePayRelationForClient(req);                          System.out.println(RemovePayRelationForClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1436,物联网开发平台,产品管理相关接口,删除产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientRequest; import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientResponse;  public class RemovePayRelationForClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             RemovePayRelationForClientRequest req = RemovePayRelationForClientRequest.fromJsonString(params, RemovePayRelationForClientRequest.class);                          RemovePayRelationForClientResponse resp = client.RemovePayRelationForClient(req);                          System.out.println(RemovePayRelationForClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1437,物联网开发平台,产品管理相关接口,获取产品详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.partners.v20180321.PartnersClient;  import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientRequest; import com.tencentcloudapi.partners.v20180321.models.RemovePayRelationForClientResponse;  public class RemovePayRelationForClient {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      PartnersClient client = new PartnersClient(cred, """", clientProfile);                          String params = ""{}"";             RemovePayRelationForClientRequest req = RemovePayRelationForClientRequest.fromJsonString(params, RemovePayRelationForClientRequest.class);                          RemovePayRelationForClientResponse resp = client.RemovePayRelationForClient(req);                          System.out.println(RemovePayRelationForClientRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1438,物联网开发平台,产品管理相关接口,获取产品列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeStudioProductRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeStudioProductResponse;  public class DescribeStudioProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStudioProductRequest req = DescribeStudioProductRequest.fromJsonString(params, DescribeStudioProductRequest.class);                          DescribeStudioProductResponse resp = client.DescribeStudioProduct(req);                          System.out.println(DescribeStudioProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1439,物联网开发平台,产品管理相关接口,修改产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeStudioProductRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeStudioProductResponse;  public class DescribeStudioProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeStudioProductRequest req = DescribeStudioProductRequest.fromJsonString(params, DescribeStudioProductRequest.class);                          DescribeStudioProductResponse resp = client.DescribeStudioProduct(req);                          System.out.println(DescribeStudioProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1440,物联网开发平台,产品管理相关接口,发布产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.GetStudioProductListRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.GetStudioProductListResponse;  public class GetStudioProductList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             GetStudioProductListRequest req = GetStudioProductListRequest.fromJsonString(params, GetStudioProductListRequest.class);                          GetStudioProductListResponse resp = client.GetStudioProductList(req);                          System.out.println(GetStudioProductListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1441,物联网开发平台,产品管理相关接口,搜索产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ReleaseStudioProductRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ReleaseStudioProductResponse;  public class ReleaseStudioProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ReleaseStudioProductRequest req = ReleaseStudioProductRequest.fromJsonString(params, ReleaseStudioProductRequest.class);                          ReleaseStudioProductResponse resp = client.ReleaseStudioProduct(req);                          System.out.println(ReleaseStudioProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1442,物联网开发平台,数据查询相关接口,获取设备属性数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.SearchStudioProductRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.SearchStudioProductResponse;  public class SearchStudioProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             SearchStudioProductRequest req = SearchStudioProductRequest.fromJsonString(params, SearchStudioProductRequest.class);                          SearchStudioProductResponse resp = client.SearchStudioProduct(req);                          System.out.println(SearchStudioProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1443,物联网开发平台,数据查询相关接口,获取设备历史数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.SearchStudioProductRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.SearchStudioProductResponse;  public class SearchStudioProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             SearchStudioProductRequest req = SearchStudioProductRequest.fromJsonString(params, SearchStudioProductRequest.class);                          SearchStudioProductResponse resp = client.SearchStudioProduct(req);                          System.out.println(SearchStudioProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1444,物联网开发平台,数据查询相关接口,获取设备的历史事件,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeDeviceDataRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeDeviceDataResponse;  public class DescribeDeviceData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDeviceDataRequest req = DescribeDeviceDataRequest.fromJsonString(params, DescribeDeviceDataRequest.class);                          DescribeDeviceDataResponse resp = client.DescribeDeviceData(req);                          System.out.println(DescribeDeviceDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1445,物联网开发平台,数据模板相关接口,查询产品数据模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ListEventHistoryRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ListEventHistoryResponse;  public class ListEventHistory {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ListEventHistoryRequest req = ListEventHistoryRequest.fromJsonString(params, ListEventHistoryRequest.class);                          ListEventHistoryResponse resp = client.ListEventHistory(req);                          System.out.println(ListEventHistoryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1446,物联网开发平台,数据模板相关接口,修改产品数据模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ListEventHistoryRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ListEventHistoryResponse;  public class ListEventHistory {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ListEventHistoryRequest req = ListEventHistoryRequest.fromJsonString(params, ListEventHistoryRequest.class);                          ListEventHistoryResponse resp = client.ListEventHistory(req);                          System.out.println(ListEventHistoryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1447,物联网开发平台,设备管理相关接口,异步调用设备动作,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyModelDefinitionRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyModelDefinitionResponse;  public class ModifyModelDefinition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyModelDefinitionRequest req = ModifyModelDefinitionRequest.fromJsonString(params, ModifyModelDefinitionRequest.class);                          ModifyModelDefinitionResponse resp = client.ModifyModelDefinition(req);                          System.out.println(ModifyModelDefinitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1448,物联网开发平台,设备管理相关接口,同步调用设备动作,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyModelDefinitionRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyModelDefinitionResponse;  public class ModifyModelDefinition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyModelDefinitionRequest req = ModifyModelDefinitionRequest.fromJsonString(params, ModifyModelDefinitionRequest.class);                          ModifyModelDefinitionResponse resp = client.ModifyModelDefinition(req);                          System.out.println(ModifyModelDefinitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1449,物联网开发平台,设备管理相关接口,设备远程控制,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.CallDeviceActionAsyncRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.CallDeviceActionAsyncResponse;  public class CallDeviceActionAsync {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             CallDeviceActionAsyncRequest req = CallDeviceActionAsyncRequest.fromJsonString(params, CallDeviceActionAsyncRequest.class);                          CallDeviceActionAsyncResponse resp = client.CallDeviceActionAsync(req);                          System.out.println(CallDeviceActionAsyncRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1450,物联网开发平台,设备管理相关接口,创建设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ControlDeviceDataRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ControlDeviceDataResponse;  public class ControlDeviceData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ControlDeviceDataRequest req = ControlDeviceDataRequest.fromJsonString(params, ControlDeviceDataRequest.class);                          ControlDeviceDataResponse resp = client.ControlDeviceData(req);                          System.out.println(ControlDeviceDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1451,物联网开发平台,设备管理相关接口,删除设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ControlDeviceDataRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ControlDeviceDataResponse;  public class ControlDeviceData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ControlDeviceDataRequest req = ControlDeviceDataRequest.fromJsonString(params, ControlDeviceDataRequest.class);                          ControlDeviceDataResponse resp = client.ControlDeviceData(req);                          System.out.println(ControlDeviceDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1452,物联网开发平台,设备管理相关接口,查看设备详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteDeviceRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteDeviceResponse;  public class DeleteDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDeviceRequest req = DeleteDeviceRequest.fromJsonString(params, DeleteDeviceRequest.class);                          DeleteDeviceResponse resp = client.DeleteDevice(req);                          System.out.println(DeleteDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1453,物联网开发平台,设备管理相关接口,获取设备列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteDeviceRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteDeviceResponse;  public class DeleteDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDeviceRequest req = DeleteDeviceRequest.fromJsonString(params, DeleteDeviceRequest.class);                          DeleteDeviceResponse resp = client.DeleteDevice(req);                          System.out.println(DeleteDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1454,物联网开发平台,项目管理相关接口,新建项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.GetDeviceListRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.GetDeviceListResponse;  public class GetDeviceList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceListRequest req = GetDeviceListRequest.fromJsonString(params, GetDeviceListRequest.class);                          GetDeviceListResponse resp = client.GetDeviceList(req);                          System.out.println(GetDeviceListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1455,物联网开发平台,项目管理相关接口,删除项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.GetDeviceListRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.GetDeviceListResponse;  public class GetDeviceList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceListRequest req = GetDeviceListRequest.fromJsonString(params, GetDeviceListRequest.class);                          GetDeviceListResponse resp = client.GetDeviceList(req);                          System.out.println(GetDeviceListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1456,物联网开发平台,项目管理相关接口,查询项目详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.CreateProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.CreateProjectResponse;  public class CreateProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProjectRequest req = CreateProjectRequest.fromJsonString(params, CreateProjectRequest.class);                          CreateProjectResponse resp = client.CreateProject(req);                          System.out.println(CreateProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1457,物联网开发平台,项目管理相关接口,获取项目列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DeleteProjectResponse;  public class DeleteProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProjectRequest req = DeleteProjectRequest.fromJsonString(params, DeleteProjectRequest.class);                          DeleteProjectResponse resp = client.DeleteProject(req);                          System.out.println(DeleteProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1458,物联网开发平台,项目管理相关接口,修改项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.DescribeProjectResponse;  public class DescribeProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProjectRequest req = DescribeProjectRequest.fromJsonString(params, DescribeProjectRequest.class);                          DescribeProjectResponse resp = client.DescribeProject(req);                          System.out.println(DescribeProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1459,商业直播,live相关接口,查询流的播放信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectResponse;  public class ModifyProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProjectRequest req = ModifyProjectRequest.fromJsonString(params, ModifyProjectRequest.class);                          ModifyProjectResponse resp = client.ModifyProject(req);                          System.out.println(ModifyProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1460,商业直播,其他接口,注册聊天室,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectResponse;  public class ModifyProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProjectRequest req = ModifyProjectRequest.fromJsonString(params, ModifyProjectRequest.class);                          ModifyProjectResponse resp = client.ModifyProject(req);                          System.out.println(ModifyProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1461,商业直播,其他接口,创建会话,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iotexplorer.v20190423.IotexplorerClient;  import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectRequest; import com.tencentcloudapi.iotexplorer.v20190423.models.ModifyProjectResponse;  public class ModifyProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iotexplorer.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotexplorerClient client = new IotexplorerClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProjectRequest req = ModifyProjectRequest.fromJsonString(params, ModifyProjectRequest.class);                          ModifyProjectResponse resp = client.ModifyProject(req);                          System.out.println(ModifyProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1462,商业直播,其他接口,查询空闲机器数量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bizlive.v20190313.BizliveClient;  import com.tencentcloudapi.bizlive.v20190313.models.RegisterIMRequest; import com.tencentcloudapi.bizlive.v20190313.models.RegisterIMResponse;  public class RegisterIM {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bizlive.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BizliveClient client = new BizliveClient(cred, """", clientProfile);                          String params = ""{}"";             RegisterIMRequest req = RegisterIMRequest.fromJsonString(params, RegisterIMRequest.class);                          RegisterIMResponse resp = client.RegisterIM(req);                          System.out.println(RegisterIMRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1463,商业直播,其他接口,强制退出游戏,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bizlive.v20190313.BizliveClient;  import com.tencentcloudapi.bizlive.v20190313.models.CreateSessionRequest; import com.tencentcloudapi.bizlive.v20190313.models.CreateSessionResponse;  public class CreateSession {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bizlive.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BizliveClient client = new BizliveClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSessionRequest req = CreateSessionRequest.fromJsonString(params, CreateSessionRequest.class);                          CreateSessionResponse resp = client.CreateSession(req);                          System.out.println(CreateSessionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1464,商业直播,直播相关接口,禁播直播流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bizlive.v20190313.BizliveClient;  import com.tencentcloudapi.bizlive.v20190313.models.DescribeWorkersRequest; import com.tencentcloudapi.bizlive.v20190313.models.DescribeWorkersResponse;  public class DescribeWorkers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bizlive.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BizliveClient client = new BizliveClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWorkersRequest req = DescribeWorkersRequest.fromJsonString(params, DescribeWorkersRequest.class);                          DescribeWorkersResponse resp = client.DescribeWorkers(req);                          System.out.println(DescribeWorkersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1465,腾讯智能对话平台,机器人对话服务接口,复位,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bizlive.v20190313.BizliveClient;  import com.tencentcloudapi.bizlive.v20190313.models.StopGameRequest; import com.tencentcloudapi.bizlive.v20190313.models.StopGameResponse;  public class StopGame {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bizlive.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BizliveClient client = new BizliveClient(cred, """", clientProfile);                          String params = ""{}"";             StopGameRequest req = StopGameRequest.fromJsonString(params, StopGameRequest.class);                          StopGameResponse resp = client.StopGame(req);                          System.out.println(StopGameRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1466,腾讯智能对话平台,机器人对话服务接口,文本处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.ResetRequest; import com.tencentcloudapi.tbp.v20190311.models.ResetResponse;  public class Reset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             ResetRequest req = ResetRequest.fromJsonString(params, ResetRequest.class);                          ResetResponse resp = client.Reset(req);                          System.out.println(ResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1467,腾讯智能对话平台,机器人对话服务接口,会话重置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextProcessRequest; import com.tencentcloudapi.tbp.v20190311.models.TextProcessResponse;  public class TextProcess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextProcessRequest req = TextProcessRequest.fromJsonString(params, TextProcessRequest.class);                          TextProcessResponse resp = client.TextProcess(req);                          System.out.println(TextProcessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1468,腾讯智能对话平台,机器人对话服务相关接口,文本处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190311.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1469,腾讯智能对话平台,机器人对话服务相关接口,会话重置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190311.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1470,腾讯智能对话平台,机器人对话服务接口,复位,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190627.TbpClient;  import com.tencentcloudapi.tbp.v20190627.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190627.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1471,腾讯智能对话平台,机器人对话服务接口,文本处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190627.TbpClient;  import com.tencentcloudapi.tbp.v20190627.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190627.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1472,腾讯智能对话平台,机器人对话服务接口,会话重置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextProcessRequest; import com.tencentcloudapi.tbp.v20190311.models.TextProcessResponse;  public class TextProcess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextProcessRequest req = TextProcessRequest.fromJsonString(params, TextProcessRequest.class);                          TextProcessResponse resp = client.TextProcess(req);                          System.out.println(TextProcessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1473,腾讯智能对话平台,机器人对话服务相关接口,文本处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextProcessRequest; import com.tencentcloudapi.tbp.v20190311.models.TextProcessResponse;  public class TextProcess {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextProcessRequest req = TextProcessRequest.fromJsonString(params, TextProcessRequest.class);                          TextProcessResponse resp = client.TextProcess(req);                          System.out.println(TextProcessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1474,腾讯智能对话平台,机器人对话服务相关接口,会话重置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190311.TbpClient;  import com.tencentcloudapi.tbp.v20190311.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190311.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1475,数盾,数据库审计相关接口,获取数据安全审计实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190627.TbpClient;  import com.tencentcloudapi.tbp.v20190627.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190627.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1476,数盾,数据库审计相关接口,获取产品规格信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tbp.v20190627.TbpClient;  import com.tencentcloudapi.tbp.v20190627.models.TextResetRequest; import com.tencentcloudapi.tbp.v20190627.models.TextResetResponse;  public class TextReset {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tbp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TbpClient client = new TbpClient(cred, """", clientProfile);                          String params = ""{}"";             TextResetRequest req = TextResetRequest.fromJsonString(params, TextResetRequest.class);                          TextResetResponse resp = client.TextReset(req);                          System.out.println(TextResetRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1477,数盾,数据库审计相关接口,查询可售卖地域列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditInstancesRequest; import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditInstancesResponse;  public class DescribeDbauditInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDbauditInstancesRequest req = DescribeDbauditInstancesRequest.fromJsonString(params, DescribeDbauditInstancesRequest.class);                          DescribeDbauditInstancesResponse resp = client.DescribeDbauditInstances(req);                          System.out.println(DescribeDbauditInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1478,数盾,数据库审计相关接口,数据安全审计产品实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditInstanceTypeRequest; import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditInstanceTypeResponse;  public class DescribeDbauditInstanceType {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDbauditInstanceTypeRequest req = DescribeDbauditInstanceTypeRequest.fromJsonString(params, DescribeDbauditInstanceTypeRequest.class);                          DescribeDbauditInstanceTypeResponse resp = client.DescribeDbauditInstanceType(req);                          System.out.println(DescribeDbauditInstanceTypeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1479,数盾,数据库审计相关接口,修改实例续费标识,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditUsedRegionsRequest; import com.tencentcloudapi.cds.v20180420.models.DescribeDbauditUsedRegionsResponse;  public class DescribeDbauditUsedRegions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cds.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDbauditUsedRegionsRequest req = DescribeDbauditUsedRegionsRequest.fromJsonString(params, DescribeDbauditUsedRegionsRequest.class);                          DescribeDbauditUsedRegionsResponse resp = client.DescribeDbauditUsedRegions(req);                          System.out.println(DescribeDbauditUsedRegionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1480,云开发,服务操作相关接口,获取数据库权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagRequest; import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagResponse;  public class ModifyDbauditInstancesRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDbauditInstancesRenewFlagRequest req = ModifyDbauditInstancesRenewFlagRequest.fromJsonString(params, ModifyDbauditInstancesRenewFlagRequest.class);                          ModifyDbauditInstancesRenewFlagResponse resp = client.ModifyDbauditInstancesRenewFlag(req);                          System.out.println(ModifyDbauditInstancesRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1481,云开发,服务操作相关接口,获取环境列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagRequest; import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagResponse;  public class ModifyDbauditInstancesRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDbauditInstancesRenewFlagRequest req = ModifyDbauditInstancesRenewFlagRequest.fromJsonString(params, ModifyDbauditInstancesRenewFlagRequest.class);                          ModifyDbauditInstancesRenewFlagResponse resp = client.ModifyDbauditInstancesRenewFlag(req);                          System.out.println(ModifyDbauditInstancesRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1482,云开发,服务操作相关接口,修改数据库权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagRequest; import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagResponse;  public class ModifyDbauditInstancesRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDbauditInstancesRenewFlagRequest req = ModifyDbauditInstancesRenewFlagRequest.fromJsonString(params, ModifyDbauditInstancesRenewFlagRequest.class);                          ModifyDbauditInstancesRenewFlagResponse resp = client.ModifyDbauditInstancesRenewFlag(req);                          System.out.println(ModifyDbauditInstancesRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1483,云开发,服务操作相关接口,更新环境信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cds.v20180420.CdsClient;  import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagRequest; import com.tencentcloudapi.cds.v20180420.models.ModifyDbauditInstancesRenewFlagResponse;  public class ModifyDbauditInstancesRenewFlag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CdsClient client = new CdsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDbauditInstancesRenewFlagRequest req = ModifyDbauditInstancesRenewFlagRequest.fromJsonString(params, ModifyDbauditInstancesRenewFlagRequest.class);                          ModifyDbauditInstancesRenewFlagResponse resp = client.ModifyDbauditInstancesRenewFlag(req);                          System.out.println(ModifyDbauditInstancesRenewFlagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1484,文件检测,文档病毒属性鉴别相关接口,本地引擎下载地址获取,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tcb.v20180608.TcbClient;  import com.tencentcloudapi.tcb.v20180608.models.DescribeEnvsRequest; import com.tencentcloudapi.tcb.v20180608.models.DescribeEnvsResponse;  public class DescribeEnvs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TcbClient client = new TcbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEnvsRequest req = DescribeEnvsRequest.fromJsonString(params, DescribeEnvsRequest.class);                          DescribeEnvsResponse resp = client.DescribeEnvs(req);                          System.out.println(DescribeEnvsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1485,文件检测,文档病毒属性鉴别相关接口,文件上传扫描结果查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tcb.v20180608.TcbClient;  import com.tencentcloudapi.tcb.v20180608.models.DescribeEnvsRequest; import com.tencentcloudapi.tcb.v20180608.models.DescribeEnvsResponse;  public class DescribeEnvs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tcb.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TcbClient client = new TcbClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEnvsRequest req = DescribeEnvsRequest.fromJsonString(params, DescribeEnvsRequest.class);                          DescribeEnvsResponse resp = client.DescribeEnvs(req);                          System.out.println(DescribeEnvsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1486,文件检测,文档病毒属性鉴别相关接口,文件上传扫描,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tav.v20190118.TavClient;  import com.tencentcloudapi.tav.v20190118.models.GetScanResultRequest; import com.tencentcloudapi.tav.v20190118.models.GetScanResultResponse;  public class GetScanResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tav.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TavClient client = new TavClient(cred, """", clientProfile);                          String params = ""{}"";             GetScanResultRequest req = GetScanResultRequest.fromJsonString(params, GetScanResultRequest.class);                          GetScanResultResponse resp = client.GetScanResult(req);                          System.out.println(GetScanResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1487,文件检测,文档病毒属性鉴别相关接口,公有云查,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tav.v20190118.TavClient;  import com.tencentcloudapi.tav.v20190118.models.ScanFileRequest; import com.tencentcloudapi.tav.v20190118.models.ScanFileResponse;  public class ScanFile {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tav.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TavClient client = new TavClient(cred, """", clientProfile);                          String params = ""{}"";             ScanFileRequest req = ScanFileRequest.fromJsonString(params, ScanFileRequest.class);                          ScanFileResponse resp = client.ScanFile(req);                          System.out.println(ScanFileRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1488,威胁情报云查,威胁情报相关接口,查询域名信誉,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tav.v20190118.TavClient;  import com.tencentcloudapi.tav.v20190118.models.ScanFileHashRequest; import com.tencentcloudapi.tav.v20190118.models.ScanFileHashResponse;  public class ScanFileHash {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TavClient client = new TavClient(cred, """", clientProfile);                          String params = ""{}"";             ScanFileHashRequest req = ScanFileHashRequest.fromJsonString(params, ScanFileHashRequest.class);                          ScanFileHashResponse resp = client.ScanFileHash(req);                          System.out.println(ScanFileHashRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1489,威胁情报云查,威胁情报相关接口,查询文件信誉,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tav.v20190118.TavClient;  import com.tencentcloudapi.tav.v20190118.models.ScanFileHashRequest; import com.tencentcloudapi.tav.v20190118.models.ScanFileHashResponse;  public class ScanFileHash {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TavClient client = new TavClient(cred, """", clientProfile);                          String params = ""{}"";             ScanFileHashRequest req = ScanFileHashRequest.fromJsonString(params, ScanFileHashRequest.class);                          ScanFileHashResponse resp = client.ScanFileHash(req);                          System.out.println(ScanFileHashRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1490,威胁情报云查,威胁情报相关接口,查询IP信誉,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tics.v20181115.TicsClient;  import com.tencentcloudapi.tics.v20181115.models.DescribeFileInfoRequest; import com.tencentcloudapi.tics.v20181115.models.DescribeFileInfoResponse;  public class DescribeFileInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TicsClient client = new TicsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFileInfoRequest req = DescribeFileInfoRequest.fromJsonString(params, DescribeFileInfoRequest.class);                          DescribeFileInfoResponse resp = client.DescribeFileInfo(req);                          System.out.println(DescribeFileInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1491,威胁情报云查,威胁情报相关接口,查询威胁情报,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tics.v20181115.TicsClient;  import com.tencentcloudapi.tics.v20181115.models.DescribeIpInfoRequest; import com.tencentcloudapi.tics.v20181115.models.DescribeIpInfoResponse;  public class DescribeIpInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TicsClient client = new TicsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeIpInfoRequest req = DescribeIpInfoRequest.fromJsonString(params, DescribeIpInfoRequest.class);                          DescribeIpInfoResponse resp = client.DescribeIpInfo(req);                          System.out.println(DescribeIpInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1492,样本智能分析平台,样本分析相关接口,获取分析结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tics.v20181115.TicsClient;  import com.tencentcloudapi.tics.v20181115.models.DescribeThreatInfoRequest; import com.tencentcloudapi.tics.v20181115.models.DescribeThreatInfoResponse;  public class DescribeThreatInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TicsClient client = new TicsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeThreatInfoRequest req = DescribeThreatInfoRequest.fromJsonString(params, DescribeThreatInfoRequest.class);                          DescribeThreatInfoResponse resp = client.DescribeThreatInfo(req);                          System.out.println(DescribeThreatInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1493,样本智能分析平台,样本分析相关接口,分析样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tics.v20181115.TicsClient;  import com.tencentcloudapi.tics.v20181115.models.DescribeThreatInfoRequest; import com.tencentcloudapi.tics.v20181115.models.DescribeThreatInfoResponse;  public class DescribeThreatInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tics.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TicsClient client = new TicsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeThreatInfoRequest req = DescribeThreatInfoRequest.fromJsonString(params, DescribeThreatInfoRequest.class);                          DescribeThreatInfoResponse resp = client.DescribeThreatInfo(req);                          System.out.println(DescribeThreatInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1494,计费相关,订单管理相关接口,查询订单数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.habo.v20181203.HaboClient;  import com.tencentcloudapi.habo.v20181203.models.StartAnalyseRequest; import com.tencentcloudapi.habo.v20181203.models.StartAnalyseResponse;  public class StartAnalyse {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""habo.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      HaboClient client = new HaboClient(cred, """", clientProfile);                          String params = ""{}"";             StartAnalyseRequest req = StartAnalyseRequest.fromJsonString(params, StartAnalyseRequest.class);                          StartAnalyseResponse resp = client.StartAnalyse(req);                          System.out.println(StartAnalyseRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1495,计费相关,订单管理相关接口,支付订单,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.habo.v20181203.HaboClient;  import com.tencentcloudapi.habo.v20181203.models.StartAnalyseRequest; import com.tencentcloudapi.habo.v20181203.models.StartAnalyseResponse;  public class StartAnalyse {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""habo.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      HaboClient client = new HaboClient(cred, """", clientProfile);                          String params = ""{}"";             StartAnalyseRequest req = StartAnalyseRequest.fromJsonString(params, StartAnalyseRequest.class);                          StartAnalyseResponse resp = client.StartAnalyse(req);                          System.out.println(StartAnalyseRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1496,计费相关,账单管理相关接口,查询账单明细数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.habo.v20181203.HaboClient;  import com.tencentcloudapi.habo.v20181203.models.StartAnalyseRequest; import com.tencentcloudapi.habo.v20181203.models.StartAnalyseResponse;  public class StartAnalyse {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""habo.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      HaboClient client = new HaboClient(cred, """", clientProfile);                          String params = ""{}"";             StartAnalyseRequest req = StartAnalyseRequest.fromJsonString(params, StartAnalyseRequest.class);                          StartAnalyseResponse resp = client.StartAnalyse(req);                          System.out.println(StartAnalyseRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1497,计费相关,账单管理相关接口,查询账单资源汇总数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeDealsByCondRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeDealsByCondResponse;  public class DescribeDealsByCond {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDealsByCondRequest req = DescribeDealsByCondRequest.fromJsonString(params, DescribeDealsByCondRequest.class);                          DescribeDealsByCondResponse resp = client.DescribeDealsByCond(req);                          System.out.println(DescribeDealsByCondRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1498,计费相关,账单管理相关接口,获取按付费模式汇总费用分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeDealsByCondRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeDealsByCondResponse;  public class DescribeDealsByCond {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDealsByCondRequest req = DescribeDealsByCondRequest.fromJsonString(params, DescribeDealsByCondRequest.class);                          DescribeDealsByCondResponse resp = client.DescribeDealsByCond(req);                          System.out.println(DescribeDealsByCondRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1499,计费相关,账单管理相关接口,获取产品汇总费用分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeBillResourceSummaryRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeBillResourceSummaryResponse;  public class DescribeBillResourceSummary {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBillResourceSummaryRequest req = DescribeBillResourceSummaryRequest.fromJsonString(params, DescribeBillResourceSummaryRequest.class);                          DescribeBillResourceSummaryResponse resp = client.DescribeBillResourceSummary(req);                          System.out.println(DescribeBillResourceSummaryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1500,计费相关,账单管理相关接口,获取按项目汇总费用分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByPayModeRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByPayModeResponse;  public class DescribeBillSummaryByPayMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBillSummaryByPayModeRequest req = DescribeBillSummaryByPayModeRequest.fromJsonString(params, DescribeBillSummaryByPayModeRequest.class);                          DescribeBillSummaryByPayModeResponse resp = client.DescribeBillSummaryByPayMode(req);                          System.out.println(DescribeBillSummaryByPayModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1501,计费相关,账单管理相关接口,获取按地域汇总费用分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByPayModeRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByPayModeResponse;  public class DescribeBillSummaryByPayMode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBillSummaryByPayModeRequest req = DescribeBillSummaryByPayModeRequest.fromJsonString(params, DescribeBillSummaryByPayModeRequest.class);                          DescribeBillSummaryByPayModeResponse resp = client.DescribeBillSummaryByPayMode(req);                          System.out.println(DescribeBillSummaryByPayModeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1502,计费相关,账单管理相关接口,获取按标签汇总费用分布,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByProjectRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByProjectResponse;  public class DescribeBillSummaryByProject {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBillSummaryByProjectRequest req = DescribeBillSummaryByProjectRequest.fromJsonString(params, DescribeBillSummaryByProjectRequest.class);                          DescribeBillSummaryByProjectResponse resp = client.DescribeBillSummaryByProject(req);                          System.out.println(DescribeBillSummaryByProjectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1503,计费相关,账单管理相关接口,按日期获取产品用量明细,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByRegionRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeBillSummaryByRegionResponse;  public class DescribeBillSummaryByRegion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBillSummaryByRegionRequest req = DescribeBillSummaryByRegionRequest.fromJsonString(params, DescribeBillSummaryByRegionRequest.class);                          DescribeBillSummaryByRegionResponse resp = client.DescribeBillSummaryByRegion(req);                          System.out.println(DescribeBillSummaryByRegionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1504,计费相关,资金管理相关接口,获取账户余额,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeDosageDetailByDateRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeDosageDetailByDateResponse;  public class DescribeDosageDetailByDate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""billing.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDosageDetailByDateRequest req = DescribeDosageDetailByDateRequest.fromJsonString(params, DescribeDosageDetailByDateRequest.class);                          DescribeDosageDetailByDateResponse resp = client.DescribeDosageDetailByDate(req);                          System.out.println(DescribeDosageDetailByDateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1505,加速物联网套件,产品管理相关接口,新增产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeAccountBalanceRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeAccountBalanceResponse;  public class DescribeAccountBalance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountBalanceRequest req = DescribeAccountBalanceRequest.fromJsonString(params, DescribeAccountBalanceRequest.class);                          DescribeAccountBalanceResponse resp = client.DescribeAccountBalance(req);                          System.out.println(DescribeAccountBalanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1506,加速物联网套件,产品管理相关接口,新增Topic,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.billing.v20180709.BillingClient;  import com.tencentcloudapi.billing.v20180709.models.DescribeAccountBalanceRequest; import com.tencentcloudapi.billing.v20180709.models.DescribeAccountBalanceResponse;  public class DescribeAccountBalance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BillingClient client = new BillingClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccountBalanceRequest req = DescribeAccountBalanceRequest.fromJsonString(params, DescribeAccountBalanceRequest.class);                          DescribeAccountBalanceResponse resp = client.DescribeAccountBalance(req);                          System.out.println(DescribeAccountBalanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1507,加速物联网套件,产品管理相关接口,关联子设备产品和网关产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AddTopicRequest; import com.tencentcloudapi.iot.v20180123.models.AddTopicResponse;  public class AddTopic {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AddTopicRequest req = AddTopicRequest.fromJsonString(params, AddTopicRequest.class);                          AddTopicResponse resp = client.AddTopic(req);                          System.out.println(AddTopicRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1508,加速物联网套件,产品管理相关接口,删除产品,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AddTopicRequest; import com.tencentcloudapi.iot.v20180123.models.AddTopicResponse;  public class AddTopic {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AddTopicRequest req = AddTopicRequest.fromJsonString(params, AddTopicRequest.class);                          AddTopicResponse resp = client.AddTopic(req);                          System.out.println(AddTopicRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1509,加速物联网套件,产品管理相关接口,删除Topic,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AssociateSubDeviceToGatewayProductRequest; import com.tencentcloudapi.iot.v20180123.models.AssociateSubDeviceToGatewayProductResponse;  public class AssociateSubDeviceToGatewayProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AssociateSubDeviceToGatewayProductRequest req = AssociateSubDeviceToGatewayProductRequest.fromJsonString(params, AssociateSubDeviceToGatewayProductRequest.class);                          AssociateSubDeviceToGatewayProductResponse resp = client.AssociateSubDeviceToGatewayProduct(req);                          System.out.println(AssociateSubDeviceToGatewayProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1510,加速物联网套件,产品管理相关接口,获取产品信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.DeleteProductRequest; import com.tencentcloudapi.iot.v20180123.models.DeleteProductResponse;  public class DeleteProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProductRequest req = DeleteProductRequest.fromJsonString(params, DeleteProductRequest.class);                          DeleteProductResponse resp = client.DeleteProduct(req);                          System.out.println(DeleteProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1511,加速物联网套件,产品管理相关接口,获取产品列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetProductRequest; import com.tencentcloudapi.iot.v20180123.models.GetProductResponse;  public class GetProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetProductRequest req = GetProductRequest.fromJsonString(params, GetProductRequest.class);                          GetProductResponse resp = client.GetProduct(req);                          System.out.println(GetProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1512,加速物联网套件,产品管理相关接口,获取Topic信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetProductRequest; import com.tencentcloudapi.iot.v20180123.models.GetProductResponse;  public class GetProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetProductRequest req = GetProductRequest.fromJsonString(params, GetProductRequest.class);                          GetProductResponse resp = client.GetProduct(req);                          System.out.println(GetProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1513,加速物联网套件,产品管理相关接口,获取Topic列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetTopicRequest; import com.tencentcloudapi.iot.v20180123.models.GetTopicResponse;  public class GetTopic {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetTopicRequest req = GetTopicRequest.fromJsonString(params, GetTopicRequest.class);                          GetTopicResponse resp = client.GetTopic(req);                          System.out.println(GetTopicRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1514,加速物联网套件,产品管理相关接口,取消子设备产品与网关设备产品的关联,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetTopicRequest; import com.tencentcloudapi.iot.v20180123.models.GetTopicResponse;  public class GetTopic {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetTopicRequest req = GetTopicRequest.fromJsonString(params, GetTopicRequest.class);                          GetTopicResponse resp = client.GetTopic(req);                          System.out.println(GetTopicRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1515,加速物联网套件,产品管理相关接口,更新产品信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetTopicsRequest; import com.tencentcloudapi.iot.v20180123.models.GetTopicsResponse;  public class GetTopics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetTopicsRequest req = GetTopicsRequest.fromJsonString(params, GetTopicsRequest.class);                          GetTopicsResponse resp = client.GetTopics(req);                          System.out.println(GetTopicsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1516,加速物联网套件,用户管理相关接口,用户注册,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.UpdateProductRequest; import com.tencentcloudapi.iot.v20180123.models.UpdateProductResponse;  public class UpdateProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateProductRequest req = UpdateProductRequest.fromJsonString(params, UpdateProductRequest.class);                          UpdateProductResponse resp = client.UpdateProduct(req);                          System.out.println(UpdateProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1517,加速物联网套件,用户管理相关接口,获取用户token,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.UpdateProductRequest; import com.tencentcloudapi.iot.v20180123.models.UpdateProductResponse;  public class UpdateProduct {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateProductRequest req = UpdateProductRequest.fromJsonString(params, UpdateProductRequest.class);                          UpdateProductResponse resp = client.UpdateProduct(req);                          System.out.println(UpdateProductRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1518,加速物联网套件,用户管理相关接口,获取用户信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppAddUserRequest; import com.tencentcloudapi.iot.v20180123.models.AppAddUserResponse;  public class AppAddUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppAddUserRequest req = AppAddUserRequest.fromJsonString(params, AppAddUserRequest.class);                          AppAddUserResponse resp = client.AppAddUser(req);                          System.out.println(AppAddUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1519,加速物联网套件,用户管理相关接口,重置用户密码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetTokenRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetTokenResponse;  public class AppGetToken {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetTokenRequest req = AppGetTokenRequest.fromJsonString(params, AppGetTokenRequest.class);                          AppGetTokenResponse resp = client.AppGetToken(req);                          System.out.println(AppGetTokenRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1520,加速物联网套件,用户管理相关接口,用户信息修改,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetUserRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetUserResponse;  public class AppGetUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetUserRequest req = AppGetUserRequest.fromJsonString(params, AppGetUserRequest.class);                          AppGetUserResponse resp = client.AppGetUser(req);                          System.out.println(AppGetUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1521,加速物联网套件,规则引擎管理相关接口,启用规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppUpdateUserRequest; import com.tencentcloudapi.iot.v20180123.models.AppUpdateUserResponse;  public class AppUpdateUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppUpdateUserRequest req = AppUpdateUserRequest.fromJsonString(params, AppUpdateUserRequest.class);                          AppUpdateUserResponse resp = client.AppUpdateUser(req);                          System.out.println(AppUpdateUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1522,加速物联网套件,规则引擎管理相关接口,新增规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppUpdateUserRequest; import com.tencentcloudapi.iot.v20180123.models.AppUpdateUserResponse;  public class AppUpdateUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppUpdateUserRequest req = AppUpdateUserRequest.fromJsonString(params, AppUpdateUserRequest.class);                          AppUpdateUserResponse resp = client.AppUpdateUser(req);                          System.out.println(AppUpdateUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1523,加速物联网套件,规则引擎管理相关接口,禁用规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AddRuleRequest; import com.tencentcloudapi.iot.v20180123.models.AddRuleResponse;  public class AddRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AddRuleRequest req = AddRuleRequest.fromJsonString(params, AddRuleRequest.class);                          AddRuleResponse resp = client.AddRule(req);                          System.out.println(AddRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1524,加速物联网套件,规则引擎管理相关接口,删除规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.DeactivateRuleRequest; import com.tencentcloudapi.iot.v20180123.models.DeactivateRuleResponse;  public class DeactivateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             DeactivateRuleRequest req = DeactivateRuleRequest.fromJsonString(params, DeactivateRuleRequest.class);                          DeactivateRuleResponse resp = client.DeactivateRule(req);                          System.out.println(DeactivateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1525,加速物联网套件,规则引擎管理相关接口,获取转发规则信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.DeactivateRuleRequest; import com.tencentcloudapi.iot.v20180123.models.DeactivateRuleResponse;  public class DeactivateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             DeactivateRuleRequest req = DeactivateRuleRequest.fromJsonString(params, DeactivateRuleRequest.class);                          DeactivateRuleResponse resp = client.DeactivateRule(req);                          System.out.println(DeactivateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1526,加速物联网套件,规则引擎管理相关接口,获取转发规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.DeleteRuleRequest; import com.tencentcloudapi.iot.v20180123.models.DeleteRuleResponse;  public class DeleteRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRuleRequest req = DeleteRuleRequest.fromJsonString(params, DeleteRuleRequest.class);                          DeleteRuleResponse resp = client.DeleteRule(req);                          System.out.println(DeleteRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1527,加速物联网套件,规则引擎管理相关接口,更新规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetRuleRequest; import com.tencentcloudapi.iot.v20180123.models.GetRuleResponse;  public class GetRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetRuleRequest req = GetRuleRequest.fromJsonString(params, GetRuleRequest.class);                          GetRuleResponse resp = client.GetRule(req);                          System.out.println(GetRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1528,加速物联网套件,设备操控相关接口,用户解绑设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.UpdateRuleRequest; import com.tencentcloudapi.iot.v20180123.models.UpdateRuleResponse;  public class UpdateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateRuleRequest req = UpdateRuleRequest.fromJsonString(params, UpdateRuleRequest.class);                          UpdateRuleResponse resp = client.UpdateRule(req);                          System.out.println(UpdateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1529,加速物联网套件,设备操控相关接口,获取绑定设备信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.UpdateRuleRequest; import com.tencentcloudapi.iot.v20180123.models.UpdateRuleResponse;  public class UpdateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateRuleRequest req = UpdateRuleRequest.fromJsonString(params, UpdateRuleRequest.class);                          UpdateRuleResponse resp = client.UpdateRule(req);                          System.out.println(UpdateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1530,加速物联网套件,设备操控相关接口,获取绑定设备数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppDeleteDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.AppDeleteDeviceResponse;  public class AppDeleteDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppDeleteDeviceRequest req = AppDeleteDeviceRequest.fromJsonString(params, AppDeleteDeviceRequest.class);                          AppDeleteDeviceResponse resp = client.AppDeleteDevice(req);                          System.out.println(AppDeleteDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1531,加速物联网套件,设备操控相关接口,获取绑定设备列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceResponse;  public class AppGetDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetDeviceRequest req = AppGetDeviceRequest.fromJsonString(params, AppGetDeviceRequest.class);                          AppGetDeviceResponse resp = client.AppGetDevice(req);                          System.out.println(AppGetDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1532,加速物联网套件,设备操控相关接口,获取绑定设备状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceDataRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceDataResponse;  public class AppGetDeviceData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetDeviceDataRequest req = AppGetDeviceDataRequest.fromJsonString(params, AppGetDeviceDataRequest.class);                          AppGetDeviceDataResponse resp = client.AppGetDeviceData(req);                          System.out.println(AppGetDeviceDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1533,加速物联网套件,设备操控相关接口,用户控制设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetDevicesRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetDevicesResponse;  public class AppGetDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetDevicesRequest req = AppGetDevicesRequest.fromJsonString(params, AppGetDevicesRequest.class);                          AppGetDevicesResponse resp = client.AppGetDevices(req);                          System.out.println(AppGetDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1534,加速物联网套件,设备操控相关接口,用户绑定设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceStatusesRequest; import com.tencentcloudapi.iot.v20180123.models.AppGetDeviceStatusesResponse;  public class AppGetDeviceStatuses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppGetDeviceStatusesRequest req = AppGetDeviceStatusesRequest.fromJsonString(params, AppGetDeviceStatusesRequest.class);                          AppGetDeviceStatusesResponse resp = client.AppGetDeviceStatuses(req);                          System.out.println(AppGetDeviceStatusesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1535,加速物联网套件,设备操控相关接口,修改设备别名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppIssueDeviceControlRequest; import com.tencentcloudapi.iot.v20180123.models.AppIssueDeviceControlResponse;  public class AppIssueDeviceControl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppIssueDeviceControlRequest req = AppIssueDeviceControlRequest.fromJsonString(params, AppIssueDeviceControlRequest.class);                          AppIssueDeviceControlResponse resp = client.AppIssueDeviceControl(req);                          System.out.println(AppIssueDeviceControlRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1536,加速物联网套件,设备操控相关接口,获取设备绑定签名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AppSecureAddDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.AppSecureAddDeviceResponse;  public class AppSecureAddDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AppSecureAddDeviceRequest req = AppSecureAddDeviceRequest.fromJsonString(params, AppSecureAddDeviceRequest.class);                          AppSecureAddDeviceResponse resp = client.AppSecureAddDevice(req);                          System.out.println(AppSecureAddDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1537,加速物联网套件,设备数据相关接口,获取设备历史数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceSignaturesRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceSignaturesResponse;  public class GetDeviceSignatures {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceSignaturesRequest req = GetDeviceSignaturesRequest.fromJsonString(params, GetDeviceSignaturesRequest.class);                          GetDeviceSignaturesResponse resp = client.GetDeviceSignatures(req);                          System.out.println(GetDeviceSignaturesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1538,加速物联网套件,设备数据相关接口,获取调试日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceSignaturesRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceSignaturesResponse;  public class GetDeviceSignatures {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceSignaturesRequest req = GetDeviceSignaturesRequest.fromJsonString(params, GetDeviceSignaturesRequest.class);                          GetDeviceSignaturesResponse resp = client.GetDeviceSignatures(req);                          System.out.println(GetDeviceSignaturesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1539,加速物联网套件,设备数据相关接口,获取设备日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDataHistoryRequest; import com.tencentcloudapi.iot.v20180123.models.GetDataHistoryResponse;  public class GetDataHistory {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDataHistoryRequest req = GetDataHistoryRequest.fromJsonString(params, GetDataHistoryRequest.class);                          GetDataHistoryResponse resp = client.GetDataHistory(req);                          System.out.println(GetDataHistoryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1540,加速物联网套件,设备数据相关接口,获取设备统计指标,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDebugLogRequest; import com.tencentcloudapi.iot.v20180123.models.GetDebugLogResponse;  public class GetDebugLog {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDebugLogRequest req = GetDebugLogRequest.fromJsonString(params, GetDebugLogRequest.class);                          GetDebugLogResponse resp = client.GetDebugLog(req);                          System.out.println(GetDebugLogRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1541,加速物联网套件,设备管理相关接口,新增设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatisticsRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatisticsResponse;  public class GetDeviceStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceStatisticsRequest req = GetDeviceStatisticsRequest.fromJsonString(params, GetDeviceStatisticsRequest.class);                          GetDeviceStatisticsResponse resp = client.GetDeviceStatistics(req);                          System.out.println(GetDeviceStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1542,加速物联网套件,设备管理相关接口,删除设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatisticsRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatisticsResponse;  public class GetDeviceStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceStatisticsRequest req = GetDeviceStatisticsRequest.fromJsonString(params, GetDeviceStatisticsRequest.class);                          GetDeviceStatisticsResponse resp = client.GetDeviceStatistics(req);                          System.out.println(GetDeviceStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1543,加速物联网套件,设备管理相关接口,获取设备信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.AddDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.AddDeviceResponse;  public class AddDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             AddDeviceRequest req = AddDeviceRequest.fromJsonString(params, AddDeviceRequest.class);                          AddDeviceResponse resp = client.AddDevice(req);                          System.out.println(AddDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1544,加速物联网套件,设备管理相关接口,获取设备数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.DeleteDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.DeleteDeviceResponse;  public class DeleteDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDeviceRequest req = DeleteDeviceRequest.fromJsonString(params, DeleteDeviceRequest.class);                          DeleteDeviceResponse resp = client.DeleteDevice(req);                          System.out.println(DeleteDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1545,加速物联网套件,设备管理相关接口,获取设备列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceResponse;  public class GetDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceRequest req = GetDeviceRequest.fromJsonString(params, GetDeviceRequest.class);                          GetDeviceResponse resp = client.GetDevice(req);                          System.out.println(GetDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1546,加速物联网套件,设备管理相关接口,批量获取设备状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceDataRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceDataResponse;  public class GetDeviceData {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceDataRequest req = GetDeviceDataRequest.fromJsonString(params, GetDeviceDataRequest.class);                          GetDeviceDataResponse resp = client.GetDeviceData(req);                          System.out.println(GetDeviceDataRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1547,加速物联网套件,设备管理相关接口,下发设备控制指令,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDevicesRequest; import com.tencentcloudapi.iot.v20180123.models.GetDevicesResponse;  public class GetDevices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDevicesRequest req = GetDevicesRequest.fromJsonString(params, GetDevicesRequest.class);                          GetDevicesResponse resp = client.GetDevices(req);                          System.out.println(GetDevicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1548,加速物联网套件,设备管理相关接口,向Topic发布消息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatusesRequest; import com.tencentcloudapi.iot.v20180123.models.GetDeviceStatusesResponse;  public class GetDeviceStatuses {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             GetDeviceStatusesRequest req = GetDeviceStatusesRequest.fromJsonString(params, GetDeviceStatusesRequest.class);                          GetDeviceStatusesResponse resp = client.GetDeviceStatuses(req);                          System.out.println(GetDeviceStatusesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1549,加速物联网套件,设备管理相关接口,重置设备,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.IssueDeviceControlRequest; import com.tencentcloudapi.iot.v20180123.models.IssueDeviceControlResponse;  public class IssueDeviceControl {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             IssueDeviceControlRequest req = IssueDeviceControlRequest.fromJsonString(params, IssueDeviceControlRequest.class);                          IssueDeviceControlResponse resp = client.IssueDeviceControl(req);                          System.out.println(IssueDeviceControlRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1550,人脸融合,人脸融合相关接口,人脸融合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.PublishMsgRequest; import com.tencentcloudapi.iot.v20180123.models.PublishMsgResponse;  public class PublishMsg {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iot.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             PublishMsgRequest req = PublishMsgRequest.fromJsonString(params, PublishMsgRequest.class);                          PublishMsgResponse resp = client.PublishMsg(req);                          System.out.println(PublishMsgRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1551,人脸融合,人脸融合相关接口,选脸融合,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iot.v20180123.IotClient;  import com.tencentcloudapi.iot.v20180123.models.ResetDeviceRequest; import com.tencentcloudapi.iot.v20180123.models.ResetDeviceResponse;  public class ResetDevice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""facefusion.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IotClient client = new IotClient(cred, """", clientProfile);                          String params = ""{}"";             ResetDeviceRequest req = ResetDeviceRequest.fromJsonString(params, ResetDeviceRequest.class);                          ResetDeviceResponse resp = client.ResetDevice(req);                          System.out.println(ResetDeviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1552,人脸识别,五官定位相关接口,五官定位,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.facefusion.v20181201.FacefusionClient;  import com.tencentcloudapi.facefusion.v20181201.models.FuseFaceRequest; import com.tencentcloudapi.facefusion.v20181201.models.FuseFaceResponse;  public class FuseFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FacefusionClient client = new FacefusionClient(cred, """", clientProfile);                          String params = ""{}"";             FuseFaceRequest req = FuseFaceRequest.fromJsonString(params, FuseFaceRequest.class);                          FuseFaceResponse resp = client.FuseFace(req);                          System.out.println(FuseFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1553,人脸识别,人员库管理相关接口,复制人员,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.AnalyzeFaceRequest; import com.tencentcloudapi.iai.v20180301.models.AnalyzeFaceResponse;  public class AnalyzeFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             AnalyzeFaceRequest req = AnalyzeFaceRequest.fromJsonString(params, AnalyzeFaceRequest.class);                          AnalyzeFaceResponse resp = client.AnalyzeFace(req);                          System.out.println(AnalyzeFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1554,人脸识别,人员库管理相关接口,增加人脸,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.AnalyzeFaceRequest; import com.tencentcloudapi.iai.v20180301.models.AnalyzeFaceResponse;  public class AnalyzeFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             AnalyzeFaceRequest req = AnalyzeFaceRequest.fromJsonString(params, AnalyzeFaceRequest.class);                          AnalyzeFaceResponse resp = client.AnalyzeFace(req);                          System.out.println(AnalyzeFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1555,人脸识别,人员库管理相关接口,创建人员库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.CopyPersonRequest; import com.tencentcloudapi.iai.v20180301.models.CopyPersonResponse;  public class CopyPerson {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             CopyPersonRequest req = CopyPersonRequest.fromJsonString(params, CopyPersonRequest.class);                          CopyPersonResponse resp = client.CopyPerson(req);                          System.out.println(CopyPersonRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1556,人脸识别,人员库管理相关接口,创建人员,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.CreateFaceRequest; import com.tencentcloudapi.iai.v20180301.models.CreateFaceResponse;  public class CreateFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             CreateFaceRequest req = CreateFaceRequest.fromJsonString(params, CreateFaceRequest.class);                          CreateFaceResponse resp = client.CreateFace(req);                          System.out.println(CreateFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1557,人脸识别,人员库管理相关接口,删除人脸,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.CreateGroupRequest; import com.tencentcloudapi.iai.v20180301.models.CreateGroupResponse;  public class CreateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             CreateGroupRequest req = CreateGroupRequest.fromJsonString(params, CreateGroupRequest.class);                          CreateGroupResponse resp = client.CreateGroup(req);                          System.out.println(CreateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1558,人脸识别,人员库管理相关接口,删除人员库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.CreatePersonRequest; import com.tencentcloudapi.iai.v20180301.models.CreatePersonResponse;  public class CreatePerson {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePersonRequest req = CreatePersonRequest.fromJsonString(params, CreatePersonRequest.class);                          CreatePersonResponse resp = client.CreatePerson(req);                          System.out.println(CreatePersonRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1559,人脸识别,人员库管理相关接口,删除人员,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DeleteFaceRequest; import com.tencentcloudapi.iai.v20180301.models.DeleteFaceResponse;  public class DeleteFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFaceRequest req = DeleteFaceRequest.fromJsonString(params, DeleteFaceRequest.class);                          DeleteFaceResponse resp = client.DeleteFace(req);                          System.out.println(DeleteFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1560,人脸识别,人员库管理相关接口,人员库删除人员,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DeleteGroupRequest; import com.tencentcloudapi.iai.v20180301.models.DeleteGroupResponse;  public class DeleteGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteGroupRequest req = DeleteGroupRequest.fromJsonString(params, DeleteGroupRequest.class);                          DeleteGroupResponse resp = client.DeleteGroup(req);                          System.out.println(DeleteGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1561,人脸识别,人员库管理相关接口,获取人员库列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DeletePersonRequest; import com.tencentcloudapi.iai.v20180301.models.DeletePersonResponse;  public class DeletePerson {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonRequest req = DeletePersonRequest.fromJsonString(params, DeletePersonRequest.class);                          DeletePersonResponse resp = client.DeletePerson(req);                          System.out.println(DeletePersonRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1562,人脸识别,人员库管理相关接口,获取人员基础信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DeletePersonFromGroupRequest; import com.tencentcloudapi.iai.v20180301.models.DeletePersonFromGroupResponse;  public class DeletePersonFromGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePersonFromGroupRequest req = DeletePersonFromGroupRequest.fromJsonString(params, DeletePersonFromGroupRequest.class);                          DeletePersonFromGroupResponse resp = client.DeletePersonFromGroup(req);                          System.out.println(DeletePersonFromGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1563,人脸识别,人员库管理相关接口,获取人员归属信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.GetPersonBaseInfoRequest; import com.tencentcloudapi.iai.v20180301.models.GetPersonBaseInfoResponse;  public class GetPersonBaseInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             GetPersonBaseInfoRequest req = GetPersonBaseInfoRequest.fromJsonString(params, GetPersonBaseInfoRequest.class);                          GetPersonBaseInfoResponse resp = client.GetPersonBaseInfo(req);                          System.out.println(GetPersonBaseInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1564,人脸识别,人员库管理相关接口,获取人员列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.GetPersonGroupInfoRequest; import com.tencentcloudapi.iai.v20180301.models.GetPersonGroupInfoResponse;  public class GetPersonGroupInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             GetPersonGroupInfoRequest req = GetPersonGroupInfoRequest.fromJsonString(params, GetPersonGroupInfoRequest.class);                          GetPersonGroupInfoResponse resp = client.GetPersonGroupInfo(req);                          System.out.println(GetPersonGroupInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1565,人脸识别,人员库管理相关接口,获取人员列表长度,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.GetPersonGroupInfoRequest; import com.tencentcloudapi.iai.v20180301.models.GetPersonGroupInfoResponse;  public class GetPersonGroupInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             GetPersonGroupInfoRequest req = GetPersonGroupInfoRequest.fromJsonString(params, GetPersonGroupInfoRequest.class);                          GetPersonGroupInfoResponse resp = client.GetPersonGroupInfo(req);                          System.out.println(GetPersonGroupInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1566,人脸识别,人员库管理相关接口,修改人员库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.GetPersonListRequest; import com.tencentcloudapi.iai.v20180301.models.GetPersonListResponse;  public class GetPersonList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             GetPersonListRequest req = GetPersonListRequest.fromJsonString(params, GetPersonListRequest.class);                          GetPersonListResponse resp = client.GetPersonList(req);                          System.out.println(GetPersonListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1567,人脸识别,人员库管理相关接口,修改人员基础信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.GetPersonListNumRequest; import com.tencentcloudapi.iai.v20180301.models.GetPersonListNumResponse;  public class GetPersonListNum {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             GetPersonListNumRequest req = GetPersonListNumRequest.fromJsonString(params, GetPersonListNumRequest.class);                          GetPersonListNumResponse resp = client.GetPersonListNum(req);                          System.out.println(GetPersonListNumRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1568,人脸识别,人员库管理相关接口,修改人员描述信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.ModifyGroupRequest; import com.tencentcloudapi.iai.v20180301.models.ModifyGroupResponse;  public class ModifyGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyGroupRequest req = ModifyGroupRequest.fromJsonString(params, ModifyGroupRequest.class);                          ModifyGroupResponse resp = client.ModifyGroup(req);                          System.out.println(ModifyGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1569,人脸识别,人脸搜索相关接口,人脸搜索,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.ModifyPersonGroupInfoRequest; import com.tencentcloudapi.iai.v20180301.models.ModifyPersonGroupInfoResponse;  public class ModifyPersonGroupInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPersonGroupInfoRequest req = ModifyPersonGroupInfoRequest.fromJsonString(params, ModifyPersonGroupInfoRequest.class);                          ModifyPersonGroupInfoResponse resp = client.ModifyPersonGroupInfo(req);                          System.out.println(ModifyPersonGroupInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1570,人脸识别,人脸搜索相关接口,人脸搜索分库返回,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.ModifyPersonGroupInfoRequest; import com.tencentcloudapi.iai.v20180301.models.ModifyPersonGroupInfoResponse;  public class ModifyPersonGroupInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyPersonGroupInfoRequest req = ModifyPersonGroupInfoRequest.fromJsonString(params, ModifyPersonGroupInfoRequest.class);                          ModifyPersonGroupInfoResponse resp = client.ModifyPersonGroupInfo(req);                          System.out.println(ModifyPersonGroupInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1571,人脸识别,人脸搜索相关接口,人员搜索,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.SearchFacesRequest; import com.tencentcloudapi.iai.v20180301.models.SearchFacesResponse;  public class SearchFaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             SearchFacesRequest req = SearchFacesRequest.fromJsonString(params, SearchFacesRequest.class);                          SearchFacesResponse resp = client.SearchFaces(req);                          System.out.println(SearchFacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1572,人脸识别,人脸搜索相关接口,人员搜索按库返回,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.SearchFacesReturnsByGroupRequest; import com.tencentcloudapi.iai.v20180301.models.SearchFacesReturnsByGroupResponse;  public class SearchFacesReturnsByGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             SearchFacesReturnsByGroupRequest req = SearchFacesReturnsByGroupRequest.fromJsonString(params, SearchFacesReturnsByGroupRequest.class);                          SearchFacesReturnsByGroupResponse resp = client.SearchFacesReturnsByGroup(req);                          System.out.println(SearchFacesReturnsByGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1573,人脸识别,人脸检测与分析相关接口,人脸检测与分析,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.SearchPersonsReturnsByGroupRequest; import com.tencentcloudapi.iai.v20180301.models.SearchPersonsReturnsByGroupResponse;  public class SearchPersonsReturnsByGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             SearchPersonsReturnsByGroupRequest req = SearchPersonsReturnsByGroupRequest.fromJsonString(params, SearchPersonsReturnsByGroupRequest.class);                          SearchPersonsReturnsByGroupResponse resp = client.SearchPersonsReturnsByGroup(req);                          System.out.println(SearchPersonsReturnsByGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1574,人脸识别,人脸比对相关接口,人脸比对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DetectFaceRequest; import com.tencentcloudapi.iai.v20180301.models.DetectFaceResponse;  public class DetectFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DetectFaceRequest req = DetectFaceRequest.fromJsonString(params, DetectFaceRequest.class);                          DetectFaceResponse resp = client.DetectFace(req);                          System.out.println(DetectFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1575,人脸识别,人脸静态活体检测相关接口,人脸静态活体检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.CompareFaceRequest; import com.tencentcloudapi.iai.v20180301.models.CompareFaceResponse;  public class CompareFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             CompareFaceRequest req = CompareFaceRequest.fromJsonString(params, CompareFaceRequest.class);                          CompareFaceResponse resp = client.CompareFace(req);                          System.out.println(CompareFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1576,人脸识别,人脸验证相关接口,人脸验证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DetectLiveFaceRequest; import com.tencentcloudapi.iai.v20180301.models.DetectLiveFaceResponse;  public class DetectLiveFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DetectLiveFaceRequest req = DetectLiveFaceRequest.fromJsonString(params, DetectLiveFaceRequest.class);                          DetectLiveFaceResponse resp = client.DetectLiveFace(req);                          System.out.println(DetectLiveFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1577,人脸识别,人脸验证相关接口,人员验证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.DetectLiveFaceRequest; import com.tencentcloudapi.iai.v20180301.models.DetectLiveFaceResponse;  public class DetectLiveFace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             DetectLiveFaceRequest req = DetectLiveFaceRequest.fromJsonString(params, DetectLiveFaceRequest.class);                          DetectLiveFaceResponse resp = client.DetectLiveFace(req);                          System.out.println(DetectLiveFaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1578,文字识别,卡证文字识别相关接口,银行卡识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.VerifyPersonRequest; import com.tencentcloudapi.iai.v20180301.models.VerifyPersonResponse;  public class VerifyPerson {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             VerifyPersonRequest req = VerifyPersonRequest.fromJsonString(params, VerifyPersonRequest.class);                          VerifyPersonResponse resp = client.VerifyPerson(req);                          System.out.println(VerifyPersonRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1579,文字识别,卡证文字识别相关接口,营业执照识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iai.v20180301.IaiClient;  import com.tencentcloudapi.iai.v20180301.models.VerifyPersonRequest; import com.tencentcloudapi.iai.v20180301.models.VerifyPersonResponse;  public class VerifyPerson {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iai.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IaiClient client = new IaiClient(cred, """", clientProfile);                          String params = ""{}"";             VerifyPersonRequest req = VerifyPersonRequest.fromJsonString(params, VerifyPersonRequest.class);                          VerifyPersonResponse resp = client.VerifyPerson(req);                          System.out.println(VerifyPersonRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1580,文字识别,卡证文字识别相关接口,名片识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.BankCardOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.BankCardOCRResponse;  public class BankCardOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             BankCardOCRRequest req = BankCardOCRRequest.fromJsonString(params, BankCardOCRRequest.class);                          BankCardOCRResponse resp = client.BankCardOCR(req);                          System.out.println(BankCardOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1581,文字识别,卡证文字识别相关接口,企业证照识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.BizLicenseOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.BizLicenseOCRResponse;  public class BizLicenseOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             BizLicenseOCRRequest req = BizLicenseOCRRequest.fromJsonString(params, BizLicenseOCRRequest.class);                          BizLicenseOCRResponse resp = client.BizLicenseOCR(req);                          System.out.println(BizLicenseOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1582,文字识别,卡证文字识别相关接口,不动产权证识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.BusinessCardOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.BusinessCardOCRResponse;  public class BusinessCardOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             BusinessCardOCRRequest req = BusinessCardOCRRequest.fromJsonString(params, BusinessCardOCRRequest.class);                          BusinessCardOCRResponse resp = client.BusinessCardOCR(req);                          System.out.println(BusinessCardOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1583,文字识别,卡证文字识别相关接口,身份证识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.EnterpriseLicenseOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.EnterpriseLicenseOCRResponse;  public class EnterpriseLicenseOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             EnterpriseLicenseOCRRequest req = EnterpriseLicenseOCRRequest.fromJsonString(params, EnterpriseLicenseOCRRequest.class);                          EnterpriseLicenseOCRResponse resp = client.EnterpriseLicenseOCR(req);                          System.out.println(EnterpriseLicenseOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1584,文字识别,卡证文字识别相关接口,事业单位法人证书识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.EstateCertOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.EstateCertOCRResponse;  public class EstateCertOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             EstateCertOCRRequest req = EstateCertOCRRequest.fromJsonString(params, EstateCertOCRRequest.class);                          EstateCertOCRResponse resp = client.EstateCertOCR(req);                          System.out.println(EstateCertOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1585,文字识别,卡证文字识别相关接口,马来西亚身份证识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.IDCardOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.IDCardOCRResponse;  public class IDCardOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             IDCardOCRRequest req = IDCardOCRRequest.fromJsonString(params, IDCardOCRRequest.class);                          IDCardOCRResponse resp = client.IDCardOCR(req);                          System.out.println(IDCardOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1586,文字识别,卡证文字识别相关接口,马来西亚护照识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.InstitutionOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.InstitutionOCRResponse;  public class InstitutionOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             InstitutionOCRRequest req = InstitutionOCRRequest.fromJsonString(params, InstitutionOCRRequest.class);                          InstitutionOCRResponse resp = client.InstitutionOCR(req);                          System.out.println(InstitutionOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1587,文字识别,卡证文字识别相关接口,组织机构代码证识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.MLIDPassportOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.MLIDPassportOCRResponse;  public class MLIDPassportOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             MLIDPassportOCRRequest req = MLIDPassportOCRRequest.fromJsonString(params, MLIDPassportOCRRequest.class);                          MLIDPassportOCRResponse resp = client.MLIDPassportOCR(req);                          System.out.println(MLIDPassportOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1588,文字识别,卡证文字识别相关接口,护照识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.MLIDPassportOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.MLIDPassportOCRResponse;  public class MLIDPassportOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             MLIDPassportOCRRequest req = MLIDPassportOCRRequest.fromJsonString(params, MLIDPassportOCRRequest.class);                          MLIDPassportOCRResponse resp = client.MLIDPassportOCR(req);                          System.out.println(MLIDPassportOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1589,文字识别,卡证文字识别相关接口,港澳台通行证识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.OrgCodeCertOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.OrgCodeCertOCRResponse;  public class OrgCodeCertOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             OrgCodeCertOCRRequest req = OrgCodeCertOCRRequest.fromJsonString(params, OrgCodeCertOCRRequest.class);                          OrgCodeCertOCRResponse resp = client.OrgCodeCertOCR(req);                          System.out.println(OrgCodeCertOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1590,文字识别,汽车场景识别相关接口,驾驶证识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.PassportOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.PassportOCRResponse;  public class PassportOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             PassportOCRRequest req = PassportOCRRequest.fromJsonString(params, PassportOCRRequest.class);                          PassportOCRResponse resp = client.PassportOCR(req);                          System.out.println(PassportOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1591,文字识别,汽车场景识别相关接口,车牌识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.PermitOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.PermitOCRResponse;  public class PermitOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             PermitOCRRequest req = PermitOCRRequest.fromJsonString(params, PermitOCRRequest.class);                          PermitOCRResponse resp = client.PermitOCR(req);                          System.out.println(PermitOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1592,文字识别,汽车场景识别相关接口,行驶证识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.PermitOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.PermitOCRResponse;  public class PermitOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             PermitOCRRequest req = PermitOCRRequest.fromJsonString(params, PermitOCRRequest.class);                          PermitOCRResponse resp = client.PermitOCR(req);                          System.out.println(PermitOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1593,文字识别,汽车场景识别相关接口,机动车登记证书识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.LicensePlateOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.LicensePlateOCRResponse;  public class LicensePlateOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             LicensePlateOCRRequest req = LicensePlateOCRRequest.fromJsonString(params, LicensePlateOCRRequest.class);                          LicensePlateOCRResponse resp = client.LicensePlateOCR(req);                          System.out.println(LicensePlateOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1594,文字识别,汽车场景识别相关接口,车辆VIN码识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.VehicleRegCertOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.VehicleRegCertOCRResponse;  public class VehicleRegCertOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             VehicleRegCertOCRRequest req = VehicleRegCertOCRRequest.fromJsonString(params, VehicleRegCertOCRRequest.class);                          VehicleRegCertOCRResponse resp = client.VehicleRegCertOCR(req);                          System.out.println(VehicleRegCertOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1595,文字识别,票据单据识别相关接口,汽车票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.VinOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.VinOCRResponse;  public class VinOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             VinOCRRequest req = VinOCRRequest.fromJsonString(params, VinOCRRequest.class);                          VinOCRResponse resp = client.VinOCR(req);                          System.out.println(VinOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1596,文字识别,票据单据识别相关接口,购车发票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.VinOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.VinOCRResponse;  public class VinOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             VinOCRRequest req = VinOCRRequest.fromJsonString(params, VinOCRRequest.class);                          VinOCRResponse resp = client.VinOCR(req);                          System.out.println(VinOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1597,文字识别,票据单据识别相关接口,完税证明识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.BusInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.BusInvoiceOCRResponse;  public class BusInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             BusInvoiceOCRRequest req = BusInvoiceOCRRequest.fromJsonString(params, BusInvoiceOCRRequest.class);                          BusInvoiceOCRResponse resp = client.BusInvoiceOCR(req);                          System.out.println(BusInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1598,文字识别,票据单据识别相关接口,金融票据整单识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.CarInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.CarInvoiceOCRResponse;  public class CarInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             CarInvoiceOCRRequest req = CarInvoiceOCRRequest.fromJsonString(params, CarInvoiceOCRRequest.class);                          CarInvoiceOCRResponse resp = client.CarInvoiceOCR(req);                          System.out.println(CarInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1599,文字识别,票据单据识别相关接口,金融票据切片识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.DutyPaidProofOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.DutyPaidProofOCRResponse;  public class DutyPaidProofOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             DutyPaidProofOCRRequest req = DutyPaidProofOCRRequest.fromJsonString(params, DutyPaidProofOCRRequest.class);                          DutyPaidProofOCRResponse resp = client.DutyPaidProofOCR(req);                          System.out.println(DutyPaidProofOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1600,文字识别,票据单据识别相关接口,机票行程单识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.FinanBillSliceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.FinanBillSliceOCRResponse;  public class FinanBillSliceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             FinanBillSliceOCRRequest req = FinanBillSliceOCRRequest.fromJsonString(params, FinanBillSliceOCRRequest.class);                          FinanBillSliceOCRResponse resp = client.FinanBillSliceOCR(req);                          System.out.println(FinanBillSliceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1601,文字识别,票据单据识别相关接口,通用机打发票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.FinanBillSliceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.FinanBillSliceOCRResponse;  public class FinanBillSliceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             FinanBillSliceOCRRequest req = FinanBillSliceOCRRequest.fromJsonString(params, FinanBillSliceOCRRequest.class);                          FinanBillSliceOCRResponse resp = client.FinanBillSliceOCR(req);                          System.out.println(FinanBillSliceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1602,文字识别,票据单据识别相关接口,混贴票据分类（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.FlightInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.FlightInvoiceOCRResponse;  public class FlightInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             FlightInvoiceOCRRequest req = FlightInvoiceOCRRequest.fromJsonString(params, FlightInvoiceOCRRequest.class);                          FlightInvoiceOCRResponse resp = client.FlightInvoiceOCR(req);                          System.out.println(FlightInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1603,文字识别,票据单据识别相关接口,混贴票据识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.MixedInvoiceDetectRequest; import com.tencentcloudapi.ocr.v20181119.models.MixedInvoiceDetectResponse;  public class MixedInvoiceDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             MixedInvoiceDetectRequest req = MixedInvoiceDetectRequest.fromJsonString(params, MixedInvoiceDetectRequest.class);                          MixedInvoiceDetectResponse resp = client.MixedInvoiceDetect(req);                          System.out.println(MixedInvoiceDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1604,文字识别,票据单据识别相关接口,定额发票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.MixedInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.MixedInvoiceOCRResponse;  public class MixedInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             MixedInvoiceOCRRequest req = MixedInvoiceOCRRequest.fromJsonString(params, MixedInvoiceOCRRequest.class);                          MixedInvoiceOCRResponse resp = client.MixedInvoiceOCR(req);                          System.out.println(MixedInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1605,文字识别,票据单据识别相关接口,轮船票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.QuotaInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.QuotaInvoiceOCRResponse;  public class QuotaInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             QuotaInvoiceOCRRequest req = QuotaInvoiceOCRRequest.fromJsonString(params, QuotaInvoiceOCRRequest.class);                          QuotaInvoiceOCRResponse resp = client.QuotaInvoiceOCR(req);                          System.out.println(QuotaInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1606,文字识别,票据单据识别相关接口,出租车发票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.QuotaInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.QuotaInvoiceOCRResponse;  public class QuotaInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             QuotaInvoiceOCRRequest req = QuotaInvoiceOCRRequest.fromJsonString(params, QuotaInvoiceOCRRequest.class);                          QuotaInvoiceOCRResponse resp = client.QuotaInvoiceOCR(req);                          System.out.println(QuotaInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1607,文字识别,票据单据识别相关接口,过路过桥费发票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.ShipInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.ShipInvoiceOCRResponse;  public class ShipInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             ShipInvoiceOCRRequest req = ShipInvoiceOCRRequest.fromJsonString(params, ShipInvoiceOCRRequest.class);                          ShipInvoiceOCRResponse resp = client.ShipInvoiceOCR(req);                          System.out.println(ShipInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1608,文字识别,票据单据识别相关接口,火车票识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TollInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.TollInvoiceOCRResponse;  public class TollInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TollInvoiceOCRRequest req = TollInvoiceOCRRequest.fromJsonString(params, TollInvoiceOCRRequest.class);                          TollInvoiceOCRResponse resp = client.TollInvoiceOCR(req);                          System.out.println(TollInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1609,文字识别,票据单据识别相关接口,增值税发票识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TrainTicketOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.TrainTicketOCRResponse;  public class TrainTicketOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TrainTicketOCRRequest req = TrainTicketOCRRequest.fromJsonString(params, TrainTicketOCRRequest.class);                          TrainTicketOCRResponse resp = client.TrainTicketOCR(req);                          System.out.println(TrainTicketOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1610,文字识别,票据单据识别相关接口,增值税发票（卷票）识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TrainTicketOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.TrainTicketOCRResponse;  public class TrainTicketOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TrainTicketOCRRequest req = TrainTicketOCRRequest.fromJsonString(params, TrainTicketOCRRequest.class);                          TrainTicketOCRResponse resp = client.TrainTicketOCR(req);                          System.out.println(TrainTicketOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1611,文字识别,票据单据识别相关接口,运单识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.VatRollInvoiceOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.VatRollInvoiceOCRResponse;  public class VatRollInvoiceOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             VatRollInvoiceOCRRequest req = VatRollInvoiceOCRRequest.fromJsonString(params, VatRollInvoiceOCRRequest.class);                          VatRollInvoiceOCRResponse resp = client.VatRollInvoiceOCR(req);                          System.out.println(VatRollInvoiceOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1612,文字识别,行业文档识别相关接口,算式识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.WaybillOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.WaybillOCRResponse;  public class WaybillOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             WaybillOCRRequest req = WaybillOCRRequest.fromJsonString(params, WaybillOCRRequest.class);                          WaybillOCRResponse resp = client.WaybillOCR(req);                          System.out.println(WaybillOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1613,文字识别,行业文档识别相关接口,数学试题识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.ArithmeticOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.ArithmeticOCRResponse;  public class ArithmeticOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             ArithmeticOCRRequest req = ArithmeticOCRRequest.fromJsonString(params, ArithmeticOCRRequest.class);                          ArithmeticOCRResponse resp = client.ArithmeticOCR(req);                          System.out.println(ArithmeticOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1614,文字识别,行业文档识别相关接口,数学公式识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.ArithmeticOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.ArithmeticOCRResponse;  public class ArithmeticOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             ArithmeticOCRRequest req = ArithmeticOCRRequest.fromJsonString(params, ArithmeticOCRRequest.class);                          ArithmeticOCRResponse resp = client.ArithmeticOCR(req);                          System.out.println(ArithmeticOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1615,文字识别,行业文档识别相关接口,保险单据识别（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.EduPaperOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.EduPaperOCRResponse;  public class EduPaperOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             EduPaperOCRRequest req = EduPaperOCRRequest.fromJsonString(params, EduPaperOCRRequest.class);                          EduPaperOCRResponse resp = client.EduPaperOCR(req);                          System.out.println(EduPaperOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1616,文字识别,行业文档识别相关接口,表格识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.FormulaOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.FormulaOCRResponse;  public class FormulaOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             FormulaOCRRequest req = FormulaOCRRequest.fromJsonString(params, FormulaOCRRequest.class);                          FormulaOCRResponse resp = client.FormulaOCR(req);                          System.out.println(FormulaOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1617,文字识别,通用文字识别相关接口,英文识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TableOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.TableOCRResponse;  public class TableOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TableOCRRequest req = TableOCRRequest.fromJsonString(params, TableOCRRequest.class);                          TableOCRResponse resp = client.TableOCR(req);                          System.out.println(TableOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1618,文字识别,通用文字识别相关接口,通用印刷体识别（高精度版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TableOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.TableOCRResponse;  public class TableOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TableOCRRequest req = TableOCRRequest.fromJsonString(params, TableOCRRequest.class);                          TableOCRResponse resp = client.TableOCR(req);                          System.out.println(TableOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1619,文字识别,通用文字识别相关接口,通用印刷体识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.EnglishOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.EnglishOCRResponse;  public class EnglishOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             EnglishOCRRequest req = EnglishOCRRequest.fromJsonString(params, EnglishOCRRequest.class);                          EnglishOCRResponse resp = client.EnglishOCR(req);                          System.out.println(EnglishOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1620,文字识别,通用文字识别相关接口,通用印刷体识别（精简版）（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.GeneralAccurateOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.GeneralAccurateOCRResponse;  public class GeneralAccurateOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             GeneralAccurateOCRRequest req = GeneralAccurateOCRRequest.fromJsonString(params, GeneralAccurateOCRRequest.class);                          GeneralAccurateOCRResponse resp = client.GeneralAccurateOCR(req);                          System.out.println(GeneralAccurateOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1621,文字识别,通用文字识别相关接口,通用印刷体识别（高速版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.GeneralBasicOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.GeneralBasicOCRResponse;  public class GeneralBasicOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             GeneralBasicOCRRequest req = GeneralBasicOCRRequest.fromJsonString(params, GeneralBasicOCRRequest.class);                          GeneralBasicOCRResponse resp = client.GeneralBasicOCR(req);                          System.out.println(GeneralBasicOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1622,文字识别,通用文字识别相关接口,通用手写体识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.GeneralEfficientOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.GeneralEfficientOCRResponse;  public class GeneralEfficientOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             GeneralEfficientOCRRequest req = GeneralEfficientOCRRequest.fromJsonString(params, GeneralEfficientOCRRequest.class);                          GeneralEfficientOCRResponse resp = client.GeneralEfficientOCR(req);                          System.out.println(GeneralEfficientOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1623,文字识别,通用文字识别相关接口,二维码和条形码识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.GeneralFastOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.GeneralFastOCRResponse;  public class GeneralFastOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             GeneralFastOCRRequest req = GeneralFastOCRRequest.fromJsonString(params, GeneralFastOCRRequest.class);                          GeneralFastOCRResponse resp = client.GeneralFastOCR(req);                          System.out.println(GeneralFastOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1624,文字识别,通用文字识别相关接口,快速文本检测（免费公测版）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.GeneralHandwritingOCRRequest; import com.tencentcloudapi.ocr.v20181119.models.GeneralHandwritingOCRResponse;  public class GeneralHandwritingOCR {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""ocr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             GeneralHandwritingOCRRequest req = GeneralHandwritingOCRRequest.fromJsonString(params, GeneralHandwritingOCRRequest.class);                          GeneralHandwritingOCRResponse resp = client.GeneralHandwritingOCR(req);                          System.out.println(GeneralHandwritingOCRRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1625,图像分析,图像处理相关接口,图片智能裁剪,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TextDetectRequest; import com.tencentcloudapi.ocr.v20181119.models.TextDetectResponse;  public class TextDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TextDetectRequest req = TextDetectRequest.fromJsonString(params, TextDetectRequest.class);                          TextDetectResponse resp = client.TextDetect(req);                          System.out.println(TextDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1626,图像分析,图像处理相关接口,图像清晰度增强,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ocr.v20181119.OcrClient;  import com.tencentcloudapi.ocr.v20181119.models.TextDetectRequest; import com.tencentcloudapi.ocr.v20181119.models.TextDetectResponse;  public class TextDetect {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      OcrClient client = new OcrClient(cred, """", clientProfile);                          String params = ""{}"";             TextDetectRequest req = TextDetectRequest.fromJsonString(params, TextDetectRequest.class);                          TextDetectResponse resp = client.TextDetect(req);                          System.out.println(TextDetectRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1627,图像分析,图像审核相关接口,恶心检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.EnhanceImageRequest; import com.tencentcloudapi.tiia.v20190529.models.EnhanceImageResponse;  public class EnhanceImage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             EnhanceImageRequest req = EnhanceImageRequest.fromJsonString(params, EnhanceImageRequest.class);                          EnhanceImageResponse resp = client.EnhanceImage(req);                          System.out.println(EnhanceImageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1628,图像分析,图像审核相关接口,不良行为识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.EnhanceImageRequest; import com.tencentcloudapi.tiia.v20190529.models.EnhanceImageResponse;  public class EnhanceImage {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             EnhanceImageRequest req = EnhanceImageRequest.fromJsonString(params, EnhanceImageRequest.class);                          EnhanceImageResponse resp = client.EnhanceImage(req);                          System.out.println(EnhanceImageRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1629,图像分析,图像审核相关接口,图像内容审核,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.DetectDisgustRequest; import com.tencentcloudapi.tiia.v20190529.models.DetectDisgustResponse;  public class DetectDisgust {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             DetectDisgustRequest req = DetectDisgustRequest.fromJsonString(params, DetectDisgustRequest.class);                          DetectDisgustResponse resp = client.DetectDisgust(req);                          System.out.println(DetectDisgustRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1630,图像分析,图像理解相关接口,公众人物识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.ImageModerationRequest; import com.tencentcloudapi.tiia.v20190529.models.ImageModerationResponse;  public class ImageModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             ImageModerationRequest req = ImageModerationRequest.fromJsonString(params, ImageModerationRequest.class);                          ImageModerationResponse resp = client.ImageModeration(req);                          System.out.println(ImageModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1631,图像分析,图像理解相关接口,图像标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.ImageModerationRequest; import com.tencentcloudapi.tiia.v20190529.models.ImageModerationResponse;  public class ImageModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             ImageModerationRequest req = ImageModerationRequest.fromJsonString(params, ImageModerationRequest.class);                          ImageModerationResponse resp = client.ImageModeration(req);                          System.out.println(ImageModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1632,图像分析,图像理解相关接口,商品识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.DetectCelebrityRequest; import com.tencentcloudapi.tiia.v20190529.models.DetectCelebrityResponse;  public class DetectCelebrity {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             DetectCelebrityRequest req = DetectCelebrityRequest.fromJsonString(params, DetectCelebrityRequest.class);                          DetectCelebrityResponse resp = client.DetectCelebrity(req);                          System.out.println(DetectCelebrityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1633,图像分析,图像理解相关接口,车辆识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.DetectLabelRequest; import com.tencentcloudapi.tiia.v20190529.models.DetectLabelResponse;  public class DetectLabel {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             DetectLabelRequest req = DetectLabelRequest.fromJsonString(params, DetectLabelRequest.class);                          DetectLabelResponse resp = client.DetectLabel(req);                          System.out.println(DetectLabelRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1634,图像分析,图像质量检测相关接口,图像质量评估,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.RecognizeCarRequest; import com.tencentcloudapi.tiia.v20190529.models.RecognizeCarResponse;  public class RecognizeCar {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             RecognizeCarRequest req = RecognizeCarRequest.fromJsonString(params, RecognizeCarRequest.class);                          RecognizeCarResponse resp = client.RecognizeCar(req);                          System.out.println(RecognizeCarRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1635,智能鉴黄,图片内容审核相关接口,图像内容审核,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiia.v20190529.TiiaClient;  import com.tencentcloudapi.tiia.v20190529.models.AssessQualityRequest; import com.tencentcloudapi.tiia.v20190529.models.AssessQualityResponse;  public class AssessQuality {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiia.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiiaClient client = new TiiaClient(cred, """", clientProfile);                          String params = ""{}"";             AssessQualityRequest req = AssessQualityRequest.fromJsonString(params, AssessQualityRequest.class);                          AssessQualityResponse resp = client.AssessQuality(req);                          System.out.println(AssessQualityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1636,数字版权管理,密钥相关接口,查询加密密钥列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.ticm.v20181127.TicmClient;  import com.tencentcloudapi.ticm.v20181127.models.ImageModerationRequest; import com.tencentcloudapi.ticm.v20181127.models.ImageModerationResponse;  public class ImageModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TicmClient client = new TicmClient(cred, """", clientProfile);                          String params = ""{}"";             ImageModerationRequest req = ImageModerationRequest.fromJsonString(params, ImageModerationRequest.class);                          ImageModerationResponse resp = client.ImageModeration(req);                          System.out.println(ImageModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1637,数字版权管理,工作流相关接口,启动DRM加密,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.DescribeKeysRequest; import com.tencentcloudapi.drm.v20181115.models.DescribeKeysResponse;  public class DescribeKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeKeysRequest req = DescribeKeysRequest.fromJsonString(params, DescribeKeysRequest.class);                          DescribeKeysResponse resp = client.DescribeKeys(req);                          System.out.println(DescribeKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1638,数字版权管理,许可证相关接口,生成DRM的播放许可证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.StartEncryptionRequest; import com.tencentcloudapi.drm.v20181115.models.StartEncryptionResponse;  public class StartEncryption {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             StartEncryptionRequest req = StartEncryptionRequest.fromJsonString(params, StartEncryptionRequest.class);                          StartEncryptionResponse resp = client.StartEncryption(req);                          System.out.println(StartEncryptionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1639,数字版权管理,证书相关接口,新设置fairplay方案所需私钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.CreateLicenseRequest; import com.tencentcloudapi.drm.v20181115.models.CreateLicenseResponse;  public class CreateLicense {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             CreateLicenseRequest req = CreateLicenseRequest.fromJsonString(params, CreateLicenseRequest.class);                          CreateLicenseResponse resp = client.CreateLicense(req);                          System.out.println(CreateLicenseRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1640,数字版权管理,证书相关接口,删除Fairplay方案的私钥、ask,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.AddFairPlayPemRequest; import com.tencentcloudapi.drm.v20181115.models.AddFairPlayPemResponse;  public class AddFairPlayPem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             AddFairPlayPemRequest req = AddFairPlayPemRequest.fromJsonString(params, AddFairPlayPemRequest.class);                          AddFairPlayPemResponse resp = client.AddFairPlayPem(req);                          System.out.println(AddFairPlayPemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1641,数字版权管理,证书相关接口,查询所设置的FairPlay私钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.AddFairPlayPemRequest; import com.tencentcloudapi.drm.v20181115.models.AddFairPlayPemResponse;  public class AddFairPlayPem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             AddFairPlayPemRequest req = AddFairPlayPemRequest.fromJsonString(params, AddFairPlayPemRequest.class);                          AddFairPlayPemResponse resp = client.AddFairPlayPem(req);                          System.out.println(AddFairPlayPemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1642,数字版权管理,证书相关接口,设置fairplay方案所需私钥,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.DeleteFairPlayPemRequest; import com.tencentcloudapi.drm.v20181115.models.DeleteFairPlayPemResponse;  public class DeleteFairPlayPem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFairPlayPemRequest req = DeleteFairPlayPemRequest.fromJsonString(params, DeleteFairPlayPemRequest.class);                          DeleteFairPlayPemResponse resp = client.DeleteFairPlayPem(req);                          System.out.println(DeleteFairPlayPemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1643,Elasticsearch服务,实例相关接口,创建ES集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.ModifyFairPlayPemRequest; import com.tencentcloudapi.drm.v20181115.models.ModifyFairPlayPemResponse;  public class ModifyFairPlayPem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyFairPlayPemRequest req = ModifyFairPlayPemRequest.fromJsonString(params, ModifyFairPlayPemRequest.class);                          ModifyFairPlayPemResponse resp = client.ModifyFairPlayPem(req);                          System.out.println(ModifyFairPlayPemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1644,Elasticsearch服务,实例相关接口,销毁ES集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.drm.v20181115.DrmClient;  import com.tencentcloudapi.drm.v20181115.models.ModifyFairPlayPemRequest; import com.tencentcloudapi.drm.v20181115.models.ModifyFairPlayPemResponse;  public class ModifyFairPlayPem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""drm.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      DrmClient client = new DrmClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyFairPlayPemRequest req = ModifyFairPlayPemRequest.fromJsonString(params, ModifyFairPlayPemRequest.class);                          ModifyFairPlayPemResponse resp = client.ModifyFairPlayPem(req);                          System.out.println(ModifyFairPlayPemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1645,Elasticsearch服务,实例相关接口,查询ES集群日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.DeleteInstanceRequest; import com.tencentcloudapi.es.v20180416.models.DeleteInstanceResponse;  public class DeleteInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteInstanceRequest req = DeleteInstanceRequest.fromJsonString(params, DeleteInstanceRequest.class);                          DeleteInstanceResponse resp = client.DeleteInstance(req);                          System.out.println(DeleteInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1646,Elasticsearch服务,实例相关接口,查询实例操作记录,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.DeleteInstanceRequest; import com.tencentcloudapi.es.v20180416.models.DeleteInstanceResponse;  public class DeleteInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteInstanceRequest req = DeleteInstanceRequest.fromJsonString(params, DeleteInstanceRequest.class);                          DeleteInstanceResponse resp = client.DeleteInstance(req);                          System.out.println(DeleteInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1647,Elasticsearch服务,实例相关接口,查询ES集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.DescribeInstanceLogsRequest; import com.tencentcloudapi.es.v20180416.models.DescribeInstanceLogsResponse;  public class DescribeInstanceLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceLogsRequest req = DescribeInstanceLogsRequest.fromJsonString(params, DescribeInstanceLogsRequest.class);                          DescribeInstanceLogsResponse resp = client.DescribeInstanceLogs(req);                          System.out.println(DescribeInstanceLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1648,Elasticsearch服务,实例相关接口,重启ES集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.DescribeInstanceOperationsRequest; import com.tencentcloudapi.es.v20180416.models.DescribeInstanceOperationsResponse;  public class DescribeInstanceOperations {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstanceOperationsRequest req = DescribeInstanceOperationsRequest.fromJsonString(params, DescribeInstanceOperationsRequest.class);                          DescribeInstanceOperationsResponse resp = client.DescribeInstanceOperations(req);                          System.out.println(DescribeInstanceOperationsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1649,Elasticsearch服务,实例相关接口,更新ES集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.DescribeInstancesRequest; import com.tencentcloudapi.es.v20180416.models.DescribeInstancesResponse;  public class DescribeInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeInstancesRequest req = DescribeInstancesRequest.fromJsonString(params, DescribeInstancesRequest.class);                          DescribeInstancesResponse resp = client.DescribeInstances(req);                          System.out.println(DescribeInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1650,Elasticsearch服务,实例相关接口,升级ES集群版本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.RestartInstanceRequest; import com.tencentcloudapi.es.v20180416.models.RestartInstanceResponse;  public class RestartInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             RestartInstanceRequest req = RestartInstanceRequest.fromJsonString(params, RestartInstanceRequest.class);                          RestartInstanceResponse resp = client.RestartInstance(req);                          System.out.println(RestartInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1651,Elasticsearch服务,实例相关接口,升级ES商业特性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.UpdateInstanceRequest; import com.tencentcloudapi.es.v20180416.models.UpdateInstanceResponse;  public class UpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateInstanceRequest req = UpdateInstanceRequest.fromJsonString(params, UpdateInstanceRequest.class);                          UpdateInstanceResponse resp = client.UpdateInstance(req);                          System.out.println(UpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1652,数学作业批改,功能接口,速算题目批改接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.UpdateInstanceRequest; import com.tencentcloudapi.es.v20180416.models.UpdateInstanceResponse;  public class UpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateInstanceRequest req = UpdateInstanceRequest.fromJsonString(params, UpdateInstanceRequest.class);                          UpdateInstanceResponse resp = client.UpdateInstance(req);                          System.out.println(UpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1653,人脸核身（云智慧眼）,PaaS服务相关接口,银行卡二要素核验,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.UpdateInstanceRequest; import com.tencentcloudapi.es.v20180416.models.UpdateInstanceResponse;  public class UpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateInstanceRequest req = UpdateInstanceRequest.fromJsonString(params, UpdateInstanceRequest.class);                          UpdateInstanceResponse resp = client.UpdateInstance(req);                          System.out.println(UpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1654,人脸核身（云智慧眼）,PaaS服务相关接口,银行卡四要素核验,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.UpdateInstanceRequest; import com.tencentcloudapi.es.v20180416.models.UpdateInstanceResponse;  public class UpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""es.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateInstanceRequest req = UpdateInstanceRequest.fromJsonString(params, UpdateInstanceRequest.class);                          UpdateInstanceResponse resp = client.UpdateInstance(req);                          System.out.println(UpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1655,人脸核身（云智慧眼）,PaaS服务相关接口,银行卡三要素核验,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.es.v20180416.EsClient;  import com.tencentcloudapi.es.v20180416.models.UpgradeInstanceRequest; import com.tencentcloudapi.es.v20180416.models.UpgradeInstanceResponse;  public class UpgradeInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EsClient client = new EsClient(cred, """", clientProfile);                          String params = ""{}"";             UpgradeInstanceRequest req = UpgradeInstanceRequest.fromJsonString(params, UpgradeInstanceRequest.class);                          UpgradeInstanceResponse resp = client.UpgradeInstance(req);                          System.out.println(UpgradeInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1656,人脸核身（云智慧眼）,PaaS服务相关接口,获取动作顺序,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.BankCardVerificationRequest; import com.tencentcloudapi.faceid.v20180301.models.BankCardVerificationResponse;  public class BankCardVerification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             BankCardVerificationRequest req = BankCardVerificationRequest.fromJsonString(params, BankCardVerificationRequest.class);                          BankCardVerificationResponse resp = client.BankCardVerification(req);                          System.out.println(BankCardVerificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1657,人脸核身（云智慧眼）,PaaS服务相关接口,获取数字验证码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.BankCardVerificationRequest; import com.tencentcloudapi.faceid.v20180301.models.BankCardVerificationResponse;  public class BankCardVerification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             BankCardVerificationRequest req = BankCardVerificationRequest.fromJsonString(params, BankCardVerificationRequest.class);                          BankCardVerificationResponse resp = client.BankCardVerification(req);                          System.out.println(BankCardVerificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1658,人脸核身（云智慧眼）,PaaS服务相关接口,身份证识别及信息核验,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.GetLiveCodeRequest; import com.tencentcloudapi.faceid.v20180301.models.GetLiveCodeResponse;  public class GetLiveCode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             GetLiveCodeRequest req = GetLiveCodeRequest.fromJsonString(params, GetLiveCodeRequest.class);                          GetLiveCodeResponse resp = client.GetLiveCode(req);                          System.out.println(GetLiveCodeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1659,人脸核身（云智慧眼）,PaaS服务相关接口,身份信息认证,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.GetLiveCodeRequest; import com.tencentcloudapi.faceid.v20180301.models.GetLiveCodeResponse;  public class GetLiveCode {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             GetLiveCodeRequest req = GetLiveCodeRequest.fromJsonString(params, GetLiveCodeRequest.class);                          GetLiveCodeResponse resp = client.GetLiveCode(req);                          System.out.println(GetLiveCodeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1660,人脸核身（云智慧眼）,PaaS服务相关接口,照片人脸核身,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.IdCardVerificationRequest; import com.tencentcloudapi.faceid.v20180301.models.IdCardVerificationResponse;  public class IdCardVerification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             IdCardVerificationRequest req = IdCardVerificationRequest.fromJsonString(params, IdCardVerificationRequest.class);                          IdCardVerificationResponse resp = client.IdCardVerification(req);                          System.out.println(IdCardVerificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1661,人脸核身（云智慧眼）,PaaS服务相关接口,活体检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.ImageRecognitionRequest; import com.tencentcloudapi.faceid.v20180301.models.ImageRecognitionResponse;  public class ImageRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             ImageRecognitionRequest req = ImageRecognitionRequest.fromJsonString(params, ImageRecognitionRequest.class);                          ImageRecognitionResponse resp = client.ImageRecognition(req);                          System.out.println(ImageRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1662,人脸核身（云智慧眼）,PaaS服务相关接口,活体人脸比对,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.ImageRecognitionRequest; import com.tencentcloudapi.faceid.v20180301.models.ImageRecognitionResponse;  public class ImageRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             ImageRecognitionRequest req = ImageRecognitionRequest.fromJsonString(params, ImageRecognitionRequest.class);                          ImageRecognitionResponse resp = client.ImageRecognition(req);                          System.out.println(ImageRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1663,人脸核身（云智慧眼）,PaaS服务相关接口,活体人脸核身,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.LivenessRequest; import com.tencentcloudapi.faceid.v20180301.models.LivenessResponse;  public class Liveness {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             LivenessRequest req = LivenessRequest.fromJsonString(params, LivenessRequest.class);                          LivenessResponse resp = client.Liveness(req);                          System.out.println(LivenessRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1664,人脸核身（云智慧眼）,SaaS服务相关接口,实名核身鉴权,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.LivenessRecognitionRequest; import com.tencentcloudapi.faceid.v20180301.models.LivenessRecognitionResponse;  public class LivenessRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             LivenessRecognitionRequest req = LivenessRecognitionRequest.fromJsonString(params, LivenessRecognitionRequest.class);                          LivenessRecognitionResponse resp = client.LivenessRecognition(req);                          System.out.println(LivenessRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1665,人脸核身（云智慧眼）,SaaS服务相关接口,获取实名核身结果信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.LivenessRecognitionRequest; import com.tencentcloudapi.faceid.v20180301.models.LivenessRecognitionResponse;  public class LivenessRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             LivenessRecognitionRequest req = LivenessRecognitionRequest.fromJsonString(params, LivenessRecognitionRequest.class);                          LivenessRecognitionResponse resp = client.LivenessRecognition(req);                          System.out.println(LivenessRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1666,云通信,其他接口,获取云通信 IM 的 SDKAppid,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.faceid.v20180301.FaceidClient;  import com.tencentcloudapi.faceid.v20180301.models.GetDetectInfoRequest; import com.tencentcloudapi.faceid.v20180301.models.GetDetectInfoResponse;  public class GetDetectInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""faceid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      FaceidClient client = new FaceidClient(cred, """", clientProfile);                          String params = ""{}"";             GetDetectInfoRequest req = GetDetectInfoRequest.fromJsonString(params, GetDetectInfoRequest.class);                          GetDetectInfoResponse resp = client.GetDetectInfo(req);                          System.out.println(GetDetectInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1667,游戏多媒体引擎,应用相关接口,创建GME应用,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cim.v20190318.CimClient;  import com.tencentcloudapi.cim.v20190318.models.DescribeSdkAppidRequest; import com.tencentcloudapi.cim.v20190318.models.DescribeSdkAppidResponse;  public class DescribeSdkAppid {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cim.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CimClient client = new CimClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSdkAppidRequest req = DescribeSdkAppidRequest.fromJsonString(params, DescribeSdkAppidRequest.class);                          DescribeSdkAppidResponse resp = client.DescribeSdkAppid(req);                          System.out.println(DescribeSdkAppidRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1668,游戏多媒体引擎,应用相关接口,查询识别结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cim.v20190318.CimClient;  import com.tencentcloudapi.cim.v20190318.models.DescribeSdkAppidRequest; import com.tencentcloudapi.cim.v20190318.models.DescribeSdkAppidResponse;  public class DescribeSdkAppid {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cim.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CimClient client = new CimClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSdkAppidRequest req = DescribeSdkAppidRequest.fromJsonString(params, DescribeSdkAppidRequest.class);                          DescribeSdkAppidResponse resp = client.DescribeSdkAppid(req);                          System.out.println(DescribeSdkAppidRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1669,游戏多媒体引擎,应用相关接口,查询识别结果列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.CreateAppRequest; import com.tencentcloudapi.gme.v20180711.models.CreateAppResponse;  public class CreateApp {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAppRequest req = CreateAppRequest.fromJsonString(params, CreateAppRequest.class);                          CreateAppResponse resp = client.CreateApp(req);                          System.out.println(CreateAppRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1670,游戏多媒体引擎,应用相关接口,修改应用开关状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.DescribeFilterResultRequest; import com.tencentcloudapi.gme.v20180711.models.DescribeFilterResultResponse;  public class DescribeFilterResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFilterResultRequest req = DescribeFilterResultRequest.fromJsonString(params, DescribeFilterResultRequest.class);                          DescribeFilterResultResponse resp = client.DescribeFilterResult(req);                          System.out.println(DescribeFilterResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1671,游戏多媒体引擎,应用相关接口,语音过滤,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.DescribeFilterResultListRequest; import com.tencentcloudapi.gme.v20180711.models.DescribeFilterResultListResponse;  public class DescribeFilterResultList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFilterResultListRequest req = DescribeFilterResultListRequest.fromJsonString(params, DescribeFilterResultListRequest.class);                          DescribeFilterResultListResponse resp = client.DescribeFilterResultList(req);                          System.out.println(DescribeFilterResultListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1672,游戏多媒体引擎,用量相关接口,获取应用用量统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.VoiceFilterRequest; import com.tencentcloudapi.gme.v20180711.models.VoiceFilterResponse;  public class VoiceFilter {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             VoiceFilterRequest req = VoiceFilterRequest.fromJsonString(params, VoiceFilterRequest.class);                          VoiceFilterResponse resp = client.VoiceFilter(req);                          System.out.println(VoiceFilterRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1673,游戏多媒体引擎,语音分析相关接口,查询语音检测结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.DescribeAppStatisticsRequest; import com.tencentcloudapi.gme.v20180711.models.DescribeAppStatisticsResponse;  public class DescribeAppStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAppStatisticsRequest req = DescribeAppStatisticsRequest.fromJsonString(params, DescribeAppStatisticsRequest.class);                          DescribeAppStatisticsResponse resp = client.DescribeAppStatistics(req);                          System.out.println(DescribeAppStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1674,游戏多媒体引擎,语音分析相关接口,提交语音检测任务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.DescribeAppStatisticsRequest; import com.tencentcloudapi.gme.v20180711.models.DescribeAppStatisticsResponse;  public class DescribeAppStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gme.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAppStatisticsRequest req = DescribeAppStatisticsRequest.fromJsonString(params, DescribeAppStatisticsRequest.class);                          DescribeAppStatisticsResponse resp = client.DescribeAppStatistics(req);                          System.out.println(DescribeAppStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1675,物联网设备身份认证TID,流程管理相关接口,单向认证测试TID,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.ScanVoiceRequest; import com.tencentcloudapi.gme.v20180711.models.ScanVoiceResponse;  public class ScanVoice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             ScanVoiceRequest req = ScanVoiceRequest.fromJsonString(params, ScanVoiceRequest.class);                          ScanVoiceResponse resp = client.ScanVoice(req);                          System.out.println(ScanVoiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1676,物联网设备身份认证TID,流程管理相关接口,安全芯片TID烧录回执,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gme.v20180711.GmeClient;  import com.tencentcloudapi.gme.v20180711.models.ScanVoiceRequest; import com.tencentcloudapi.gme.v20180711.models.ScanVoiceResponse;  public class ScanVoice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GmeClient client = new GmeClient(cred, """", clientProfile);                          String params = ""{}"";             ScanVoiceRequest req = ScanVoiceRequest.fromJsonString(params, ScanVoiceRequest.class);                          ScanVoiceResponse resp = client.ScanVoice(req);                          System.out.println(ScanVoiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1677,物联网设备身份认证TID,流程管理相关接口,安全芯片TID空发回执,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.AuthTestTidRequest; import com.tencentcloudapi.iottid.v20190411.models.AuthTestTidResponse;  public class AuthTestTid {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             AuthTestTidRequest req = AuthTestTidRequest.fromJsonString(params, AuthTestTidRequest.class);                          AuthTestTidResponse resp = client.AuthTestTid(req);                          System.out.println(AuthTestTidRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1678,物联网设备身份认证TID,流程管理相关接口,请求空发TID信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.BurnTidNotifyRequest; import com.tencentcloudapi.iottid.v20190411.models.BurnTidNotifyResponse;  public class BurnTidNotify {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             BurnTidNotifyRequest req = BurnTidNotifyRequest.fromJsonString(params, BurnTidNotifyRequest.class);                          BurnTidNotifyResponse resp = client.BurnTidNotify(req);                          System.out.println(BurnTidNotifyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1679,物联网设备身份认证TID,流程管理相关接口,查询可空发的白盒密钥数量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.DeliverTidNotifyRequest; import com.tencentcloudapi.iottid.v20190411.models.DeliverTidNotifyResponse;  public class DeliverTidNotify {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             DeliverTidNotifyRequest req = DeliverTidNotifyRequest.fromJsonString(params, DeliverTidNotifyRequest.class);                          DeliverTidNotifyResponse resp = client.DeliverTidNotify(req);                          System.out.println(DeliverTidNotifyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1680,物联网设备身份认证TID,流程管理相关接口,查询权限,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.DeliverTidsRequest; import com.tencentcloudapi.iottid.v20190411.models.DeliverTidsResponse;  public class DeliverTids {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             DeliverTidsRequest req = DeliverTidsRequest.fromJsonString(params, DeliverTidsRequest.class);                          DeliverTidsResponse resp = client.DeliverTids(req);                          System.out.println(DeliverTidsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1681,物联网设备身份认证TID,流程管理相关接口,下载芯片订单的TID,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.DescribePermissionRequest; import com.tencentcloudapi.iottid.v20190411.models.DescribePermissionResponse;  public class DescribePermission {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePermissionRequest req = DescribePermissionRequest.fromJsonString(params, DescribePermissionRequest.class);                          DescribePermissionResponse resp = client.DescribePermission(req);                          System.out.println(DescribePermissionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1682,物联网设备身份认证TID,流程管理相关接口,上传硬件唯一标识码,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.DownloadTidsRequest; import com.tencentcloudapi.iottid.v20190411.models.DownloadTidsResponse;  public class DownloadTids {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadTidsRequest req = DownloadTidsRequest.fromJsonString(params, DownloadTidsRequest.class);                          DownloadTidsResponse resp = client.DownloadTids(req);                          System.out.println(DownloadTidsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1683,物联网设备身份认证TID,流程管理相关接口,验证芯片烧录TID信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.DownloadTidsRequest; import com.tencentcloudapi.iottid.v20190411.models.DownloadTidsResponse;  public class DownloadTids {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""iottid.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             DownloadTidsRequest req = DownloadTidsRequest.fromJsonString(params, DownloadTidsRequest.class);                          DownloadTidsResponse resp = client.DownloadTids(req);                          System.out.println(DownloadTidsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1684,语音识别,一句话识别相关接口,一句话识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.iottid.v20190411.IottidClient;  import com.tencentcloudapi.iottid.v20190411.models.VerifyChipBurnInfoRequest; import com.tencentcloudapi.iottid.v20190411.models.VerifyChipBurnInfoResponse;  public class VerifyChipBurnInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      IottidClient client = new IottidClient(cred, """", clientProfile);                          String params = ""{}"";             VerifyChipBurnInfoRequest req = VerifyChipBurnInfoRequest.fromJsonString(params, VerifyChipBurnInfoRequest.class);                          VerifyChipBurnInfoResponse resp = client.VerifyChipBurnInfo(req);                          System.out.println(VerifyChipBurnInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1685,语音识别,录音文件识别相关接口,录音文件识别请求,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.asr.v20190614.AsrClient;  import com.tencentcloudapi.asr.v20190614.models.SentenceRecognitionRequest; import com.tencentcloudapi.asr.v20190614.models.SentenceRecognitionResponse;  public class SentenceRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AsrClient client = new AsrClient(cred, """", clientProfile);                          String params = ""{}"";             SentenceRecognitionRequest req = SentenceRecognitionRequest.fromJsonString(params, SentenceRecognitionRequest.class);                          SentenceRecognitionResponse resp = client.SentenceRecognition(req);                          System.out.println(SentenceRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1686,语音识别,录音文件识别相关接口,录音文件识别结果查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.asr.v20190614.AsrClient;  import com.tencentcloudapi.asr.v20190614.models.CreateRecTaskRequest; import com.tencentcloudapi.asr.v20190614.models.CreateRecTaskResponse;  public class CreateRecTask {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AsrClient client = new AsrClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRecTaskRequest req = CreateRecTaskRequest.fromJsonString(params, CreateRecTaskRequest.class);                          CreateRecTaskResponse resp = client.CreateRecTask(req);                          System.out.println(CreateRecTaskRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1687,内容安全,内容安全相关接口,文本内容检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.asr.v20190614.AsrClient;  import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusRequest; import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AsrClient client = new AsrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1688,内容安全,内容安全相关接口,图片内容检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.asr.v20190614.AsrClient;  import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusRequest; import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AsrClient client = new AsrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1689,内容安全,内容安全相关接口,音频内容检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.asr.v20190614.AsrClient;  import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusRequest; import com.tencentcloudapi.asr.v20190614.models.DescribeTaskStatusResponse;  public class DescribeTaskStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""asr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      AsrClient client = new AsrClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskStatusRequest req = DescribeTaskStatusRequest.fromJsonString(params, DescribeTaskStatusRequest.class);                          DescribeTaskStatusResponse resp = client.DescribeTaskStatus(req);                          System.out.println(DescribeTaskStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1690,内容安全,内容安全相关接口,视频内容检测,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.TextModerationRequest; import com.tencentcloudapi.cms.v20190321.models.TextModerationResponse;  public class TextModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             TextModerationRequest req = TextModerationRequest.fromJsonString(params, TextModerationRequest.class);                          TextModerationResponse resp = client.TextModeration(req);                          System.out.println(TextModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1691,内容安全,内容安全相关接口,识别结果概览数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.ImageModerationRequest; import com.tencentcloudapi.cms.v20190321.models.ImageModerationResponse;  public class ImageModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             ImageModerationRequest req = ImageModerationRequest.fromJsonString(params, ImageModerationRequest.class);                          ImageModerationResponse resp = client.ImageModeration(req);                          System.out.println(ImageModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1692,内容安全,内容安全相关接口,新增文本样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.VideoModerationRequest; import com.tencentcloudapi.cms.v20190321.models.VideoModerationResponse;  public class VideoModeration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             VideoModerationRequest req = VideoModerationRequest.fromJsonString(params, VideoModerationRequest.class);                          VideoModerationResponse resp = client.VideoModeration(req);                          System.out.println(VideoModerationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1693,内容安全,内容安全相关接口,查询文字样本库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DescribeModerationOverviewRequest; import com.tencentcloudapi.cms.v20190321.models.DescribeModerationOverviewResponse;  public class DescribeModerationOverview {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeModerationOverviewRequest req = DescribeModerationOverviewRequest.fromJsonString(params, DescribeModerationOverviewRequest.class);                          DescribeModerationOverviewResponse resp = client.DescribeModerationOverview(req);                          System.out.println(DescribeModerationOverviewRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1694,内容安全,内容安全相关接口,删除文字样本库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DescribeModerationOverviewRequest; import com.tencentcloudapi.cms.v20190321.models.DescribeModerationOverviewResponse;  public class DescribeModerationOverview {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeModerationOverviewRequest req = DescribeModerationOverviewRequest.fromJsonString(params, DescribeModerationOverviewRequest.class);                          DescribeModerationOverviewResponse resp = client.DescribeModerationOverview(req);                          System.out.println(DescribeModerationOverviewRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1695,内容安全,内容安全相关接口,新增文件类型样本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DescribeTextSampleRequest; import com.tencentcloudapi.cms.v20190321.models.DescribeTextSampleResponse;  public class DescribeTextSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTextSampleRequest req = DescribeTextSampleRequest.fromJsonString(params, DescribeTextSampleRequest.class);                          DescribeTextSampleResponse resp = client.DescribeTextSample(req);                          System.out.println(DescribeTextSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1696,内容安全,内容安全相关接口,删除文件样本库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DeleteTextSampleRequest; import com.tencentcloudapi.cms.v20190321.models.DeleteTextSampleResponse;  public class DeleteTextSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTextSampleRequest req = DeleteTextSampleRequest.fromJsonString(params, DeleteTextSampleRequest.class);                          DeleteTextSampleResponse resp = client.DeleteTextSample(req);                          System.out.println(DeleteTextSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1697,内容安全,内容安全相关接口,查询文件样本库,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.CreateFileSampleRequest; import com.tencentcloudapi.cms.v20190321.models.CreateFileSampleResponse;  public class CreateFileSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateFileSampleRequest req = CreateFileSampleRequest.fromJsonString(params, CreateFileSampleRequest.class);                          CreateFileSampleResponse resp = client.CreateFileSample(req);                          System.out.println(CreateFileSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1698,腾讯知文自然语言处理,句法分析相关接口,文本纠错,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DescribeFileSampleRequest; import com.tencentcloudapi.cms.v20190321.models.DescribeFileSampleResponse;  public class DescribeFileSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFileSampleRequest req = DescribeFileSampleRequest.fromJsonString(params, DescribeFileSampleRequest.class);                          DescribeFileSampleResponse resp = client.DescribeFileSample(req);                          System.out.println(DescribeFileSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1699,腾讯知文自然语言处理,句法分析相关接口,句法依存分析,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cms.v20190321.CmsClient;  import com.tencentcloudapi.cms.v20190321.models.DescribeFileSampleRequest; import com.tencentcloudapi.cms.v20190321.models.DescribeFileSampleResponse;  public class DescribeFileSample {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CmsClient client = new CmsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFileSampleRequest req = DescribeFileSampleRequest.fromJsonString(params, DescribeFileSampleRequest.class);                          DescribeFileSampleResponse resp = client.DescribeFileSample(req);                          System.out.println(DescribeFileSampleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1700,腾讯知文自然语言处理,向量技术相关接口,词向量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.DependencyParsingRequest; import com.tencentcloudapi.nlp.v20190408.models.DependencyParsingResponse;  public class DependencyParsing {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             DependencyParsingRequest req = DependencyParsingRequest.fromJsonString(params, DependencyParsingRequest.class);                          DependencyParsingResponse resp = client.DependencyParsing(req);                          System.out.println(DependencyParsingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1701,腾讯知文自然语言处理,向量技术相关接口,句向量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.DependencyParsingRequest; import com.tencentcloudapi.nlp.v20190408.models.DependencyParsingResponse;  public class DependencyParsing {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             DependencyParsingRequest req = DependencyParsingRequest.fromJsonString(params, DependencyParsingRequest.class);                          DependencyParsingResponse resp = client.DependencyParsing(req);                          System.out.println(DependencyParsingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1702,腾讯知文自然语言处理,向量技术相关接口,词相似度,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.WordEmbeddingRequest; import com.tencentcloudapi.nlp.v20190408.models.WordEmbeddingResponse;  public class WordEmbedding {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             WordEmbeddingRequest req = WordEmbeddingRequest.fromJsonString(params, WordEmbeddingRequest.class);                          WordEmbeddingResponse resp = client.WordEmbedding(req);                          System.out.println(WordEmbeddingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1703,腾讯知文自然语言处理,向量技术相关接口,文本相似度,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.WordEmbeddingRequest; import com.tencentcloudapi.nlp.v20190408.models.WordEmbeddingResponse;  public class WordEmbedding {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             WordEmbeddingRequest req = WordEmbeddingRequest.fromJsonString(params, WordEmbeddingRequest.class);                          WordEmbeddingResponse resp = client.WordEmbedding(req);                          System.out.println(WordEmbeddingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1704,腾讯知文自然语言处理,文本审核相关接口,敏感词识别,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.WordSimilarityRequest; import com.tencentcloudapi.nlp.v20190408.models.WordSimilarityResponse;  public class WordSimilarity {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             WordSimilarityRequest req = WordSimilarityRequest.fromJsonString(params, WordSimilarityRequest.class);                          WordSimilarityResponse resp = client.WordSimilarity(req);                          System.out.println(WordSimilarityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1705,腾讯知文自然语言处理,文本审核相关接口,内容审核,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.SentenceSimilarityRequest; import com.tencentcloudapi.nlp.v20190408.models.SentenceSimilarityResponse;  public class SentenceSimilarity {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             SentenceSimilarityRequest req = SentenceSimilarityRequest.fromJsonString(params, SentenceSimilarityRequest.class);                          SentenceSimilarityResponse resp = client.SentenceSimilarity(req);                          System.out.println(SentenceSimilarityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1706,腾讯知文自然语言处理,文本审核相关接口,文本审核,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.SensitiveWordsRecognitionRequest; import com.tencentcloudapi.nlp.v20190408.models.SensitiveWordsRecognitionResponse;  public class SensitiveWordsRecognition {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             SensitiveWordsRecognitionRequest req = SensitiveWordsRecognitionRequest.fromJsonString(params, SensitiveWordsRecognitionRequest.class);                          SensitiveWordsRecognitionResponse resp = client.SensitiveWordsRecognition(req);                          System.out.println(SensitiveWordsRecognitionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1707,腾讯知文自然语言处理,篇章分析相关接口,自动摘要,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.TextApprovalRequest; import com.tencentcloudapi.nlp.v20190408.models.TextApprovalResponse;  public class TextApproval {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             TextApprovalRequest req = TextApprovalRequest.fromJsonString(params, TextApprovalRequest.class);                          TextApprovalResponse resp = client.TextApproval(req);                          System.out.println(TextApprovalRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1708,腾讯知文自然语言处理,篇章分析相关接口,关键词提取,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.TextApprovalRequest; import com.tencentcloudapi.nlp.v20190408.models.TextApprovalResponse;  public class TextApproval {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             TextApprovalRequest req = TextApprovalRequest.fromJsonString(params, TextApprovalRequest.class);                          TextApprovalResponse resp = client.TextApproval(req);                          System.out.println(TextApprovalRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1709,腾讯知文自然语言处理,篇章分析相关接口,情感分析,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.AutoSummarizationRequest; import com.tencentcloudapi.nlp.v20190408.models.AutoSummarizationResponse;  public class AutoSummarization {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             AutoSummarizationRequest req = AutoSummarizationRequest.fromJsonString(params, AutoSummarizationRequest.class);                          AutoSummarizationResponse resp = client.AutoSummarization(req);                          System.out.println(AutoSummarizationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1710,腾讯知文自然语言处理,篇章分析相关接口,文本分类,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.KeywordsExtractionRequest; import com.tencentcloudapi.nlp.v20190408.models.KeywordsExtractionResponse;  public class KeywordsExtraction {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             KeywordsExtractionRequest req = KeywordsExtractionRequest.fromJsonString(params, KeywordsExtractionRequest.class);                          KeywordsExtractionResponse resp = client.KeywordsExtraction(req);                          System.out.println(KeywordsExtractionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1711,腾讯知文自然语言处理,词法分析相关接口,相似词,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.TextClassificationRequest; import com.tencentcloudapi.nlp.v20190408.models.TextClassificationResponse;  public class TextClassification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             TextClassificationRequest req = TextClassificationRequest.fromJsonString(params, TextClassificationRequest.class);                          TextClassificationResponse resp = client.TextClassification(req);                          System.out.println(TextClassificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1712,腾讯知文自然语言处理,词法分析相关接口,词法分析,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.TextClassificationRequest; import com.tencentcloudapi.nlp.v20190408.models.TextClassificationResponse;  public class TextClassification {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""nlp.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             TextClassificationRequest req = TextClassificationRequest.fromJsonString(params, TextClassificationRequest.class);                          TextClassificationResponse resp = client.TextClassification(req);                          System.out.println(TextClassificationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1713,业务风险情报,风险查询相关接口,获取业务风险情报,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.nlp.v20190408.NlpClient;  import com.tencentcloudapi.nlp.v20190408.models.LexicalAnalysisRequest; import com.tencentcloudapi.nlp.v20190408.models.LexicalAnalysisResponse;  public class LexicalAnalysis {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""bri.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      NlpClient client = new NlpClient(cred, """", clientProfile);                          String params = ""{}"";             LexicalAnalysisRequest req = LexicalAnalysisRequest.fromJsonString(params, LexicalAnalysisRequest.class);                          LexicalAnalysisResponse resp = client.LexicalAnalysis(req);                          System.out.println(LexicalAnalysisRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1714,标签,写接口,标签关联资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bri.v20190328.BriClient;  import com.tencentcloudapi.bri.v20190328.models.DescribeBRIRequest; import com.tencentcloudapi.bri.v20190328.models.DescribeBRIResponse;  public class DescribeBRI {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BriClient client = new BriClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBRIRequest req = DescribeBRIRequest.fromJsonString(params, DescribeBRIRequest.class);                          DescribeBRIResponse resp = client.DescribeBRI(req);                          System.out.println(DescribeBRIRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1715,标签,写接口,创建标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.bri.v20190328.BriClient;  import com.tencentcloudapi.bri.v20190328.models.DescribeBRIRequest; import com.tencentcloudapi.bri.v20190328.models.DescribeBRIResponse;  public class DescribeBRI {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      BriClient client = new BriClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeBRIRequest req = DescribeBRIRequest.fromJsonString(params, DescribeBRIRequest.class);                          DescribeBRIResponse resp = client.DescribeBRI(req);                          System.out.println(DescribeBRIRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1716,标签,写接口,标签解绑资源,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.AddResourceTagRequest; import com.tencentcloudapi.tag.v20180813.models.AddResourceTagResponse;  public class AddResourceTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             AddResourceTagRequest req = AddResourceTagRequest.fromJsonString(params, AddResourceTagRequest.class);                          AddResourceTagResponse resp = client.AddResourceTag(req);                          System.out.println(AddResourceTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1717,标签,写接口,删除标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.CreateTagRequest; import com.tencentcloudapi.tag.v20180813.models.CreateTagResponse;  public class CreateTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTagRequest req = CreateTagRequest.fromJsonString(params, CreateTagRequest.class);                          CreateTagResponse resp = client.CreateTag(req);                          System.out.println(CreateTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1718,标签,写接口,批量修改资源关联的标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DeleteTagRequest; import com.tencentcloudapi.tag.v20180813.models.DeleteTagResponse;  public class DeleteTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTagRequest req = DeleteTagRequest.fromJsonString(params, DeleteTagRequest.class);                          DeleteTagResponse resp = client.DeleteTag(req);                          System.out.println(DeleteTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1719,标签,写接口,修改资源标签值,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.ModifyResourceTagsRequest; import com.tencentcloudapi.tag.v20180813.models.ModifyResourceTagsResponse;  public class ModifyResourceTags {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyResourceTagsRequest req = ModifyResourceTagsRequest.fromJsonString(params, ModifyResourceTagsRequest.class);                          ModifyResourceTagsResponse resp = client.ModifyResourceTags(req);                          System.out.println(ModifyResourceTagsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1720,标签,读接口,通过标签查询资源列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.UpdateResourceTagValueRequest; import com.tencentcloudapi.tag.v20180813.models.UpdateResourceTagValueResponse;  public class UpdateResourceTagValue {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateResourceTagValueRequest req = UpdateResourceTagValueRequest.fromJsonString(params, UpdateResourceTagValueRequest.class);                          UpdateResourceTagValueResponse resp = client.UpdateResourceTagValue(req);                          System.out.println(UpdateResourceTagValueRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1721,标签,读接口,查看资源关联的标签,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.UpdateResourceTagValueRequest; import com.tencentcloudapi.tag.v20180813.models.UpdateResourceTagValueResponse;  public class UpdateResourceTagValue {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateResourceTagValueRequest req = UpdateResourceTagValueRequest.fromJsonString(params, UpdateResourceTagValueRequest.class);                          UpdateResourceTagValueResponse resp = client.UpdateResourceTagValue(req);                          System.out.println(UpdateResourceTagValueRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1722,标签,读接口,查询标签键,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeResourceTagsByResourceIdsRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeResourceTagsByResourceIdsResponse;  public class DescribeResourceTagsByResourceIds {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeResourceTagsByResourceIdsRequest req = DescribeResourceTagsByResourceIdsRequest.fromJsonString(params, DescribeResourceTagsByResourceIdsRequest.class);                          DescribeResourceTagsByResourceIdsResponse resp = client.DescribeResourceTagsByResourceIds(req);                          System.out.println(DescribeResourceTagsByResourceIdsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1723,标签,读接口,查询标签列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeResourceTagsByResourceIdsRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeResourceTagsByResourceIdsResponse;  public class DescribeResourceTagsByResourceIds {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeResourceTagsByResourceIdsRequest req = DescribeResourceTagsByResourceIdsRequest.fromJsonString(params, DescribeResourceTagsByResourceIdsRequest.class);                          DescribeResourceTagsByResourceIdsResponse resp = client.DescribeResourceTagsByResourceIds(req);                          System.out.println(DescribeResourceTagsByResourceIdsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1724,标签,读接口,查询标签值,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeTagKeysRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeTagKeysResponse;  public class DescribeTagKeys {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTagKeysRequest req = DescribeTagKeysRequest.fromJsonString(params, DescribeTagKeysRequest.class);                          DescribeTagKeysResponse resp = client.DescribeTagKeys(req);                          System.out.println(DescribeTagKeysRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1725,弹性 MapReduce,信息查询相关接口,查询EMR实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesResponse;  public class DescribeTagValues {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTagValuesRequest req = DescribeTagValuesRequest.fromJsonString(params, DescribeTagValuesRequest.class);                          DescribeTagValuesResponse resp = client.DescribeTagValues(req);                          System.out.println(DescribeTagValuesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1726,弹性 MapReduce,信息查询相关接口,创建实例询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesResponse;  public class DescribeTagValues {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTagValuesRequest req = DescribeTagValuesRequest.fromJsonString(params, DescribeTagValuesRequest.class);                          DescribeTagValuesResponse resp = client.DescribeTagValues(req);                          System.out.println(DescribeTagValuesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1727,弹性 MapReduce,信息查询相关接口,续费询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tag.v20180813.TagClient;  import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesRequest; import com.tencentcloudapi.tag.v20180813.models.DescribeTagValuesResponse;  public class DescribeTagValues {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tag.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TagClient client = new TagClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTagValuesRequest req = DescribeTagValuesRequest.fromJsonString(params, DescribeTagValuesRequest.class);                          DescribeTagValuesResponse resp = client.DescribeTagValues(req);                          System.out.println(DescribeTagValuesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1728,弹性 MapReduce,信息查询相关接口,扩容询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.InquiryPriceCreateInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.InquiryPriceCreateInstanceResponse;  public class InquiryPriceCreateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceCreateInstanceRequest req = InquiryPriceCreateInstanceRequest.fromJsonString(params, InquiryPriceCreateInstanceRequest.class);                          InquiryPriceCreateInstanceResponse resp = client.InquiryPriceCreateInstance(req);                          System.out.println(InquiryPriceCreateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1729,弹性 MapReduce,信息查询相关接口,变配询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.InquiryPriceRenewInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.InquiryPriceRenewInstanceResponse;  public class InquiryPriceRenewInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceRenewInstanceRequest req = InquiryPriceRenewInstanceRequest.fromJsonString(params, InquiryPriceRenewInstanceRequest.class);                          InquiryPriceRenewInstanceResponse resp = client.InquiryPriceRenewInstance(req);                          System.out.println(InquiryPriceRenewInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1730,弹性 MapReduce,扩缩容相关接口,实例扩容,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.InquiryPriceUpdateInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.InquiryPriceUpdateInstanceResponse;  public class InquiryPriceUpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceUpdateInstanceRequest req = InquiryPriceUpdateInstanceRequest.fromJsonString(params, InquiryPriceUpdateInstanceRequest.class);                          InquiryPriceUpdateInstanceResponse resp = client.InquiryPriceUpdateInstance(req);                          System.out.println(InquiryPriceUpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1731,弹性 MapReduce,扩缩容相关接口,缩容Task节点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.InquiryPriceUpdateInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.InquiryPriceUpdateInstanceResponse;  public class InquiryPriceUpdateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             InquiryPriceUpdateInstanceRequest req = InquiryPriceUpdateInstanceRequest.fromJsonString(params, InquiryPriceUpdateInstanceRequest.class);                          InquiryPriceUpdateInstanceResponse resp = client.InquiryPriceUpdateInstance(req);                          System.out.println(InquiryPriceUpdateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1732,弹性 MapReduce,集群生命周期相关接口,创建EMR实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.TerminateTasksRequest; import com.tencentcloudapi.emr.v20190103.models.TerminateTasksResponse;  public class TerminateTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateTasksRequest req = TerminateTasksRequest.fromJsonString(params, TerminateTasksRequest.class);                          TerminateTasksResponse resp = client.TerminateTasks(req);                          System.out.println(TerminateTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1733,弹性 MapReduce,集群生命周期相关接口,销毁EMR实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.TerminateTasksRequest; import com.tencentcloudapi.emr.v20190103.models.TerminateTasksResponse;  public class TerminateTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""emr.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateTasksRequest req = TerminateTasksRequest.fromJsonString(params, TerminateTasksRequest.class);                          TerminateTasksResponse resp = client.TerminateTasks(req);                          System.out.println(TerminateTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1734,云审计,云审计相关接口,检索日志,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.TerminateInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.TerminateInstanceResponse;  public class TerminateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateInstanceRequest req = TerminateInstanceRequest.fromJsonString(params, TerminateInstanceRequest.class);                          TerminateInstanceResponse resp = client.TerminateInstance(req);                          System.out.println(TerminateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1735,云审计,云审计相关接口,查询AttributeKey的有效取值范围,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.emr.v20190103.EmrClient;  import com.tencentcloudapi.emr.v20190103.models.TerminateInstanceRequest; import com.tencentcloudapi.emr.v20190103.models.TerminateInstanceResponse;  public class TerminateInstance {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      EmrClient client = new EmrClient(cred, """", clientProfile);                          String params = ""{}"";             TerminateInstanceRequest req = TerminateInstanceRequest.fromJsonString(params, TerminateInstanceRequest.class);                          TerminateInstanceResponse resp = client.TerminateInstance(req);                          System.out.println(TerminateInstanceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1736,云审计,云审计相关接口,创建跟踪集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.LookUpEventsRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.LookUpEventsResponse;  public class LookUpEvents {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             LookUpEventsRequest req = LookUpEventsRequest.fromJsonString(params, LookUpEventsRequest.class);                          LookUpEventsResponse resp = client.LookUpEvents(req);                          System.out.println(LookUpEventsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1737,云审计,云审计相关接口,删除跟踪集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditResponse;  public class CreateAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAuditRequest req = CreateAuditRequest.fromJsonString(params, CreateAuditRequest.class);                          CreateAuditResponse resp = client.CreateAudit(req);                          System.out.println(CreateAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1738,云审计,云审计相关接口,查询跟踪集详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditResponse;  public class CreateAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAuditRequest req = CreateAuditRequest.fromJsonString(params, CreateAuditRequest.class);                          CreateAuditResponse resp = client.CreateAudit(req);                          System.out.println(CreateAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1739,云审计,云审计相关接口,查询用户可创建跟踪集的数量,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.CreateAuditResponse;  public class CreateAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAuditRequest req = CreateAuditRequest.fromJsonString(params, CreateAuditRequest.class);                          CreateAuditResponse resp = client.CreateAudit(req);                          System.out.println(CreateAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1740,云审计,云审计相关接口,查询跟踪集概要,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.DeleteAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.DeleteAuditResponse;  public class DeleteAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAuditRequest req = DeleteAuditRequest.fromJsonString(params, DeleteAuditRequest.class);                          DeleteAuditResponse resp = client.DeleteAudit(req);                          System.out.println(DeleteAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1741,云审计,云审计相关接口,查询云审计支持的cmq的可用区,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.DescribeAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.DescribeAuditResponse;  public class DescribeAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAuditRequest req = DescribeAuditRequest.fromJsonString(params, DescribeAuditRequest.class);                          DescribeAuditResponse resp = client.DescribeAudit(req);                          System.out.println(DescribeAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1742,云审计,云审计相关接口,查询云审计支持的cos可用区,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.ListCmqEnableRegionRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.ListCmqEnableRegionResponse;  public class ListCmqEnableRegion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             ListCmqEnableRegionRequest req = ListCmqEnableRegionRequest.fromJsonString(params, ListCmqEnableRegionRequest.class);                          ListCmqEnableRegionResponse resp = client.ListCmqEnableRegion(req);                          System.out.println(ListCmqEnableRegionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1743,云审计,云审计相关接口,开启跟踪集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.ListCmqEnableRegionRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.ListCmqEnableRegionResponse;  public class ListCmqEnableRegion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             ListCmqEnableRegionRequest req = ListCmqEnableRegionRequest.fromJsonString(params, ListCmqEnableRegionRequest.class);                          ListCmqEnableRegionResponse resp = client.ListCmqEnableRegion(req);                          System.out.println(ListCmqEnableRegionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1744,云审计,云审计相关接口,关闭跟踪集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.ListCosEnableRegionRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.ListCosEnableRegionResponse;  public class ListCosEnableRegion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             ListCosEnableRegionRequest req = ListCosEnableRegionRequest.fromJsonString(params, ListCosEnableRegionRequest.class);                          ListCosEnableRegionResponse resp = client.ListCosEnableRegion(req);                          System.out.println(ListCosEnableRegionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1745,云审计,云审计相关接口,更新跟踪集,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.StartLoggingRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.StartLoggingResponse;  public class StartLogging {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""cloudaudit.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             StartLoggingRequest req = StartLoggingRequest.fromJsonString(params, StartLoggingRequest.class);                          StartLoggingResponse resp = client.StartLogging(req);                          System.out.println(StartLoggingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1746,云搜,大数据应用服务,云搜数据上传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.UpdateAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.UpdateAuditResponse;  public class UpdateAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateAuditRequest req = UpdateAuditRequest.fromJsonString(params, UpdateAuditRequest.class);                          UpdateAuditResponse resp = client.UpdateAudit(req);                          System.out.println(UpdateAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1747,云搜,大数据应用服务,数据检索接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.cloudaudit.v20190319.CloudauditClient;  import com.tencentcloudapi.cloudaudit.v20190319.models.UpdateAuditRequest; import com.tencentcloudapi.cloudaudit.v20190319.models.UpdateAuditResponse;  public class UpdateAudit {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CloudauditClient client = new CloudauditClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateAuditRequest req = UpdateAuditRequest.fromJsonString(params, UpdateAuditRequest.class);                          UpdateAuditResponse resp = client.UpdateAudit(req);                          System.out.println(UpdateAuditRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1748,云搜,大数据应用服务,云搜数据上传,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunsou.v20180504.YunsouClient;  import com.tencentcloudapi.yunsou.v20180504.models.DataSearchRequest; import com.tencentcloudapi.yunsou.v20180504.models.DataSearchResponse;  public class DataSearch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunsouClient client = new YunsouClient(cred, """", clientProfile);                          String params = ""{}"";             DataSearchRequest req = DataSearchRequest.fromJsonString(params, DataSearchRequest.class);                          DataSearchResponse resp = client.DataSearch(req);                          System.out.println(DataSearchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1749,云搜,大数据应用服务,数据检索接口,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunsou.v20180504.YunsouClient;  import com.tencentcloudapi.yunsou.v20180504.models.DataSearchRequest; import com.tencentcloudapi.yunsou.v20180504.models.DataSearchResponse;  public class DataSearch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunsouClient client = new YunsouClient(cred, """", clientProfile);                          String params = ""{}"";             DataSearchRequest req = DataSearchRequest.fromJsonString(params, DataSearchRequest.class);                          DataSearchResponse resp = client.DataSearch(req);                          System.out.println(DataSearchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1750,腾讯知识图谱数据查询,百科知识图谱相关接口,实体信息查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunsou.v20180504.YunsouClient;  import com.tencentcloudapi.yunsou.v20180504.models.DataSearchRequest; import com.tencentcloudapi.yunsou.v20180504.models.DataSearchResponse;  public class DataSearch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunsouClient client = new YunsouClient(cred, """", clientProfile);                          String params = ""{}"";             DataSearchRequest req = DataSearchRequest.fromJsonString(params, DataSearchRequest.class);                          DataSearchResponse resp = client.DataSearch(req);                          System.out.println(DataSearchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1751,腾讯知识图谱数据查询,百科知识图谱相关接口,实体关系查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.yunsou.v20180504.YunsouClient;  import com.tencentcloudapi.yunsou.v20180504.models.DataSearchRequest; import com.tencentcloudapi.yunsou.v20180504.models.DataSearchResponse;  public class DataSearch {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""yunsou.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      YunsouClient client = new YunsouClient(cred, """", clientProfile);                          String params = ""{}"";             DataSearchRequest req = DataSearchRequest.fromJsonString(params, DataSearchRequest.class);                          DataSearchResponse resp = client.DataSearch(req);                          System.out.println(DataSearchRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1752,腾讯知识图谱数据查询,百科知识图谱相关接口,三元组查询,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tkgdq.v20190411.TkgdqClient;  import com.tencentcloudapi.tkgdq.v20190411.models.DescribeEntityRequest; import com.tencentcloudapi.tkgdq.v20190411.models.DescribeEntityResponse;  public class DescribeEntity {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tkgdq.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkgdqClient client = new TkgdqClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeEntityRequest req = DescribeEntityRequest.fromJsonString(params, DescribeEntityRequest.class);                          DescribeEntityResponse resp = client.DescribeEntity(req);                          System.out.println(DescribeEntityRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1753,验证码,服务器相关接口,核查验证码票据结果,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tkgdq.v20190411.TkgdqClient;  import com.tencentcloudapi.tkgdq.v20190411.models.DescribeTripleRequest; import com.tencentcloudapi.tkgdq.v20190411.models.DescribeTripleResponse;  public class DescribeTriple {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""captcha.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TkgdqClient client = new TkgdqClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTripleRequest req = DescribeTripleRequest.fromJsonString(params, DescribeTripleRequest.class);                          DescribeTripleResponse resp = client.DescribeTriple(req);                          System.out.println(DescribeTripleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1754,全球应用加速,其他接口,查询统计通道组和通道信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.captcha.v20190722.CaptchaClient;  import com.tencentcloudapi.captcha.v20190722.models.DescribeCaptchaResultRequest; import com.tencentcloudapi.captcha.v20190722.models.DescribeCaptchaResultResponse;  public class DescribeCaptchaResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""captcha.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CaptchaClient client = new CaptchaClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCaptchaResultRequest req = DescribeCaptchaResultRequest.fromJsonString(params, DescribeCaptchaResultRequest.class);                          DescribeCaptchaResultResponse resp = client.DescribeCaptchaResult(req);                          System.out.println(DescribeCaptchaResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1755,全球应用加速,其他接口,查询监听器统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.captcha.v20190722.CaptchaClient;  import com.tencentcloudapi.captcha.v20190722.models.DescribeCaptchaResultRequest; import com.tencentcloudapi.captcha.v20190722.models.DescribeCaptchaResultResponse;  public class DescribeCaptchaResult {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""captcha.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      CaptchaClient client = new CaptchaClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCaptchaResultRequest req = DescribeCaptchaResultRequest.fromJsonString(params, DescribeCaptchaResultRequest.class);                          DescribeCaptchaResultResponse resp = client.DescribeCaptchaResult(req);                          System.out.println(DescribeCaptchaResultRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1756,全球应用加速,其他接口,查询通道组统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeGroupAndStatisticsProxyRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeGroupAndStatisticsProxyResponse;  public class DescribeGroupAndStatisticsProxy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupAndStatisticsProxyRequest req = DescribeGroupAndStatisticsProxyRequest.fromJsonString(params, DescribeGroupAndStatisticsProxyRequest.class);                          DescribeGroupAndStatisticsProxyResponse resp = client.DescribeGroupAndStatisticsProxy(req);                          System.out.println(DescribeGroupAndStatisticsProxyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1757,全球应用加速,其他接口,查询通道统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeListenerStatisticsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeListenerStatisticsResponse;  public class DescribeListenerStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeListenerStatisticsRequest req = DescribeListenerStatisticsRequest.fromJsonString(params, DescribeListenerStatisticsRequest.class);                          DescribeListenerStatisticsResponse resp = client.DescribeListenerStatistics(req);                          System.out.println(DescribeListenerStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1758,全球应用加速,其他接口,查询已绑定源站健康检查统计数据,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupStatisticsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupStatisticsResponse;  public class DescribeProxyGroupStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxyGroupStatisticsRequest req = DescribeProxyGroupStatisticsRequest.fromJsonString(params, DescribeProxyGroupStatisticsRequest.class);                          DescribeProxyGroupStatisticsResponse resp = client.DescribeProxyGroupStatistics(req);                          System.out.println(DescribeProxyGroupStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1759,全球应用加速,其他接口,获取源站区域和带宽梯度价格,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServerStatisticsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServerStatisticsResponse;  public class DescribeRealServerStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRealServerStatisticsRequest req = DescribeRealServerStatisticsRequest.fromJsonString(params, DescribeRealServerStatisticsRequest.class);                          DescribeRealServerStatisticsResponse resp = client.DescribeRealServerStatistics(req);                          System.out.println(DescribeRealServerStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1760,全球应用加速,其他接口,根据标签拉取资源列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServerStatisticsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServerStatisticsResponse;  public class DescribeRealServerStatistics {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRealServerStatisticsRequest req = DescribeRealServerStatisticsRequest.fromJsonString(params, DescribeRealServerStatisticsRequest.class);                          DescribeRealServerStatisticsResponse resp = client.DescribeRealServerStatistics(req);                          System.out.println(DescribeRealServerStatisticsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1761,全球应用加速,源站相关接口,添加源站,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRegionAndPriceRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRegionAndPriceResponse;  public class DescribeRegionAndPrice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRegionAndPriceRequest req = DescribeRegionAndPriceRequest.fromJsonString(params, DescribeRegionAndPriceRequest.class);                          DescribeRegionAndPriceResponse resp = client.DescribeRegionAndPrice(req);                          System.out.println(DescribeRegionAndPriceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1762,全球应用加速,源站相关接口,查询源站信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeResourcesByTagRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeResourcesByTagResponse;  public class DescribeResourcesByTag {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeResourcesByTagRequest req = DescribeResourcesByTagRequest.fromJsonString(params, DescribeResourcesByTagRequest.class);                          DescribeResourcesByTagResponse resp = client.DescribeResourcesByTag(req);                          System.out.println(DescribeResourcesByTagRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1763,全球应用加速,源站相关接口,查询源站绑定状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.AddRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.AddRealServersResponse;  public class AddRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             AddRealServersRequest req = AddRealServersRequest.fromJsonString(params, AddRealServersRequest.class);                          AddRealServersResponse resp = client.AddRealServers(req);                          System.out.println(AddRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1764,全球应用加速,源站相关接口,修改源站名称,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServersResponse;  public class DescribeRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRealServersRequest req = DescribeRealServersRequest.fromJsonString(params, DescribeRealServersRequest.class);                          DescribeRealServersResponse resp = client.DescribeRealServers(req);                          System.out.println(DescribeRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1765,全球应用加速,源站相关接口,删除源站,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServersStatusRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRealServersStatusResponse;  public class DescribeRealServersStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRealServersStatusRequest req = DescribeRealServersStatusRequest.fromJsonString(params, DescribeRealServersStatusRequest.class);                          DescribeRealServersStatusResponse resp = client.DescribeRealServersStatus(req);                          System.out.println(DescribeRealServersStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1766,全球应用加速,监听器相关接口,监听器绑定源站,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.RemoveRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.RemoveRealServersResponse;  public class RemoveRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveRealServersRequest req = RemoveRealServersRequest.fromJsonString(params, RemoveRealServersRequest.class);                          RemoveRealServersResponse resp = client.RemoveRealServers(req);                          System.out.println(RemoveRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1767,全球应用加速,监听器相关接口,创建HTTP监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.RemoveRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.RemoveRealServersResponse;  public class RemoveRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             RemoveRealServersRequest req = RemoveRealServersRequest.fromJsonString(params, RemoveRealServersRequest.class);                          RemoveRealServersResponse resp = client.RemoveRealServers(req);                          System.out.println(RemoveRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1768,全球应用加速,监听器相关接口,创建HTTPS监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateHTTPListenerRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateHTTPListenerResponse;  public class CreateHTTPListener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateHTTPListenerRequest req = CreateHTTPListenerRequest.fromJsonString(params, CreateHTTPListenerRequest.class);                          CreateHTTPListenerResponse resp = client.CreateHTTPListener(req);                          System.out.println(CreateHTTPListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1769,全球应用加速,监听器相关接口,创建TCP监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateHTTPListenerRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateHTTPListenerResponse;  public class CreateHTTPListener {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateHTTPListenerRequest req = CreateHTTPListenerRequest.fromJsonString(params, CreateHTTPListenerRequest.class);                          CreateHTTPListenerResponse resp = client.CreateHTTPListener(req);                          System.out.println(CreateHTTPListenerRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1770,全球应用加速,监听器相关接口,创建UDP监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateTCPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateTCPListenersResponse;  public class CreateTCPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTCPListenersRequest req = CreateTCPListenersRequest.fromJsonString(params, CreateTCPListenersRequest.class);                          CreateTCPListenersResponse resp = client.CreateTCPListeners(req);                          System.out.println(CreateTCPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1771,全球应用加速,监听器相关接口,删除通道监听器,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateUDPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateUDPListenersResponse;  public class CreateUDPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateUDPListenersRequest req = CreateUDPListenersRequest.fromJsonString(params, CreateUDPListenersRequest.class);                          CreateUDPListenersResponse resp = client.CreateUDPListeners(req);                          System.out.println(CreateUDPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1772,全球应用加速,监听器相关接口,查询HTTP监听器信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteListenersResponse;  public class DeleteListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteListenersRequest req = DeleteListenersRequest.fromJsonString(params, DeleteListenersRequest.class);                          DeleteListenersResponse resp = client.DeleteListeners(req);                          System.out.println(DeleteListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1773,全球应用加速,监听器相关接口,查询HTTPS监听器信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPListenersResponse;  public class DescribeHTTPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHTTPListenersRequest req = DescribeHTTPListenersRequest.fromJsonString(params, DescribeHTTPListenersRequest.class);                          DescribeHTTPListenersResponse resp = client.DescribeHTTPListeners(req);                          System.out.println(DescribeHTTPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1774,全球应用加速,监听器相关接口,查询监听器源站列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPListenersResponse;  public class DescribeHTTPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHTTPListenersRequest req = DescribeHTTPListenersRequest.fromJsonString(params, DescribeHTTPListenersRequest.class);                          DescribeHTTPListenersResponse resp = client.DescribeHTTPListeners(req);                          System.out.println(DescribeHTTPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1775,全球应用加速,监听器相关接口,查询TCP监听器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPSListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeHTTPSListenersResponse;  public class DescribeHTTPSListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeHTTPSListenersRequest req = DescribeHTTPSListenersRequest.fromJsonString(params, DescribeHTTPSListenersRequest.class);                          DescribeHTTPSListenersResponse resp = client.DescribeHTTPSListeners(req);                          System.out.println(DescribeHTTPSListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1776,全球应用加速,监听器相关接口,查询UDP监听器列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeTCPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeTCPListenersResponse;  public class DescribeTCPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTCPListenersRequest req = DescribeTCPListenersRequest.fromJsonString(params, DescribeTCPListenersRequest.class);                          DescribeTCPListenersResponse resp = client.DescribeTCPListeners(req);                          System.out.println(DescribeTCPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1777,全球应用加速,监听器相关接口,修改HTTP监听器配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeTCPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeTCPListenersResponse;  public class DescribeTCPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTCPListenersRequest req = DescribeTCPListenersRequest.fromJsonString(params, DescribeTCPListenersRequest.class);                          DescribeTCPListenersResponse resp = client.DescribeTCPListeners(req);                          System.out.println(DescribeTCPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1778,全球应用加速,监听器相关接口,修改HTTPS监听器配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeUDPListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeUDPListenersResponse;  public class DescribeUDPListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUDPListenersRequest req = DescribeUDPListenersRequest.fromJsonString(params, DescribeUDPListenersRequest.class);                          DescribeUDPListenersResponse resp = client.DescribeUDPListeners(req);                          System.out.println(DescribeUDPListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1779,全球应用加速,监听器相关接口,修改TCP监听器配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyHTTPListenerAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyHTTPListenerAttributeResponse;  public class ModifyHTTPListenerAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyHTTPListenerAttributeRequest req = ModifyHTTPListenerAttributeRequest.fromJsonString(params, ModifyHTTPListenerAttributeRequest.class);                          ModifyHTTPListenerAttributeResponse resp = client.ModifyHTTPListenerAttribute(req);                          System.out.println(ModifyHTTPListenerAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1780,全球应用加速,监听器相关接口,修改UDP监听器配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyHTTPSListenerAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyHTTPSListenerAttributeResponse;  public class ModifyHTTPSListenerAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyHTTPSListenerAttributeRequest req = ModifyHTTPSListenerAttributeRequest.fromJsonString(params, ModifyHTTPSListenerAttributeRequest.class);                          ModifyHTTPSListenerAttributeResponse resp = client.ModifyHTTPSListenerAttribute(req);                          System.out.println(ModifyHTTPSListenerAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1781,全球应用加速,规则相关接口,转发规则绑定源站,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyUDPListenerAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyUDPListenerAttributeResponse;  public class ModifyUDPListenerAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyUDPListenerAttributeRequest req = ModifyUDPListenerAttributeRequest.fromJsonString(params, ModifyUDPListenerAttributeRequest.class);                          ModifyUDPListenerAttributeResponse resp = client.ModifyUDPListenerAttribute(req);                          System.out.println(ModifyUDPListenerAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1782,全球应用加速,规则相关接口,创建HTTPS监听器的访问域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.BindRuleRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.BindRuleRealServersResponse;  public class BindRuleRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             BindRuleRealServersRequest req = BindRuleRealServersRequest.fromJsonString(params, BindRuleRealServersRequest.class);                          BindRuleRealServersResponse resp = client.BindRuleRealServers(req);                          System.out.println(BindRuleRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1783,全球应用加速,规则相关接口,创建监听器转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.BindRuleRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.BindRuleRealServersResponse;  public class BindRuleRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             BindRuleRealServersRequest req = BindRuleRealServersRequest.fromJsonString(params, BindRuleRealServersRequest.class);                          BindRuleRealServersResponse resp = client.BindRuleRealServers(req);                          System.out.println(BindRuleRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1784,全球应用加速,规则相关接口,根据域名删除转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateRuleRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateRuleResponse;  public class CreateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRuleRequest req = CreateRuleRequest.fromJsonString(params, CreateRuleRequest.class);                          CreateRuleResponse resp = client.CreateRule(req);                          System.out.println(CreateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1785,全球应用加速,规则相关接口,删除7层监听器转发规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateRuleRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateRuleResponse;  public class CreateRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateRuleRequest req = CreateRuleRequest.fromJsonString(params, CreateRuleRequest.class);                          CreateRuleResponse resp = client.CreateRule(req);                          System.out.println(CreateRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1786,全球应用加速,规则相关接口,查询转发规则相关源站信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteDomainResponse;  public class DeleteDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteDomainRequest req = DeleteDomainRequest.fromJsonString(params, DeleteDomainRequest.class);                          DeleteDomainResponse resp = client.DeleteDomain(req);                          System.out.println(DeleteDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1787,全球应用加速,规则相关接口,查询转发规则信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteRuleRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteRuleResponse;  public class DeleteRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteRuleRequest req = DeleteRuleRequest.fromJsonString(params, DeleteRuleRequest.class);                          DeleteRuleResponse resp = client.DeleteRule(req);                          System.out.println(DeleteRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1788,全球应用加速,规则相关接口,修改域名对应的证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeRuleRealServersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeRuleRealServersResponse;  public class DescribeRuleRealServers {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRuleRealServersRequest req = DescribeRuleRealServersRequest.fromJsonString(params, DescribeRuleRealServersRequest.class);                          DescribeRuleRealServersResponse resp = client.DescribeRuleRealServers(req);                          System.out.println(DescribeRuleRealServersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1789,全球应用加速,规则相关接口,更新监听器转发规则域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainResponse;  public class ModifyDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDomainRequest req = ModifyDomainRequest.fromJsonString(params, ModifyDomainRequest.class);                          ModifyDomainResponse resp = client.ModifyDomain(req);                          System.out.println(ModifyDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1790,全球应用加速,规则相关接口,修改转发规则信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainResponse;  public class ModifyDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDomainRequest req = ModifyDomainRequest.fromJsonString(params, ModifyDomainRequest.class);                          ModifyDomainResponse resp = client.ModifyDomain(req);                          System.out.println(ModifyDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1791,全球应用加速,规则相关接口,认证高级配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyDomainResponse;  public class ModifyDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyDomainRequest req = ModifyDomainRequest.fromJsonString(params, ModifyDomainRequest.class);                          ModifyDomainResponse resp = client.ModifyDomain(req);                          System.out.println(ModifyDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1792,全球应用加速,证书相关接口,创建证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationRequest; import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationResponse;  public class SetAuthentication {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             SetAuthenticationRequest req = SetAuthenticationRequest.fromJsonString(params, SetAuthenticationRequest.class);                          SetAuthenticationResponse resp = client.SetAuthentication(req);                          System.out.println(SetAuthenticationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1793,全球应用加速,证书相关接口,删除证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationRequest; import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationResponse;  public class SetAuthentication {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             SetAuthenticationRequest req = SetAuthenticationRequest.fromJsonString(params, SetAuthenticationRequest.class);                          SetAuthenticationResponse resp = client.SetAuthentication(req);                          System.out.println(SetAuthenticationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1794,全球应用加速,证书相关接口,查询证书详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationRequest; import com.tencentcloudapi.gaap.v20180529.models.SetAuthenticationResponse;  public class SetAuthentication {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             SetAuthenticationRequest req = SetAuthenticationRequest.fromJsonString(params, SetAuthenticationRequest.class);                          SetAuthenticationResponse resp = client.SetAuthentication(req);                          System.out.println(SetAuthenticationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1795,全球应用加速,证书相关接口,查询服务器证书列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateCertificateRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateCertificateResponse;  public class CreateCertificate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateCertificateRequest req = CreateCertificateRequest.fromJsonString(params, CreateCertificateRequest.class);                          CreateCertificateResponse resp = client.CreateCertificate(req);                          System.out.println(CreateCertificateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1796,全球应用加速,证书相关接口,修改证书属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeCertificateDetailRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeCertificateDetailResponse;  public class DescribeCertificateDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCertificateDetailRequest req = DescribeCertificateDetailRequest.fromJsonString(params, DescribeCertificateDetailRequest.class);                          DescribeCertificateDetailResponse resp = client.DescribeCertificateDetail(req);                          System.out.println(DescribeCertificateDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1797,全球应用加速,通道相关接口,查询通道是否可以创建,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesResponse;  public class ModifyCertificateAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCertificateAttributesRequest req = ModifyCertificateAttributesRequest.fromJsonString(params, ModifyCertificateAttributesRequest.class);                          ModifyCertificateAttributesResponse resp = client.ModifyCertificateAttributes(req);                          System.out.println(ModifyCertificateAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1798,全球应用加速,通道相关接口,关闭通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesResponse;  public class ModifyCertificateAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCertificateAttributesRequest req = ModifyCertificateAttributesRequest.fromJsonString(params, ModifyCertificateAttributesRequest.class);                          ModifyCertificateAttributesResponse resp = client.ModifyCertificateAttributes(req);                          System.out.println(ModifyCertificateAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1799,全球应用加速,通道相关接口,关闭安全策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyCertificateAttributesResponse;  public class ModifyCertificateAttributes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyCertificateAttributesRequest req = ModifyCertificateAttributesRequest.fromJsonString(params, ModifyCertificateAttributesRequest.class);                          ModifyCertificateAttributesResponse resp = client.ModifyCertificateAttributes(req);                          System.out.println(ModifyCertificateAttributesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1800,全球应用加速,通道相关接口,创建通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CheckProxyCreateRequest; import com.tencentcloudapi.gaap.v20180529.models.CheckProxyCreateResponse;  public class CheckProxyCreate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CheckProxyCreateRequest req = CheckProxyCreateRequest.fromJsonString(params, CheckProxyCreateRequest.class);                          CheckProxyCreateResponse resp = client.CheckProxyCreate(req);                          System.out.println(CheckProxyCreateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1801,全球应用加速,通道相关接口,创建安全策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateProxyRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateProxyResponse;  public class CreateProxy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProxyRequest req = CreateProxyRequest.fromJsonString(params, CreateProxyRequest.class);                          CreateProxyResponse resp = client.CreateProxy(req);                          System.out.println(CreateProxyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1802,全球应用加速,通道相关接口,添加安全策略规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateProxyRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateProxyResponse;  public class CreateProxy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProxyRequest req = CreateProxyRequest.fromJsonString(params, CreateProxyRequest.class);                          CreateProxyResponse resp = client.CreateProxy(req);                          System.out.println(CreateProxyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1803,全球应用加速,通道相关接口,删除安全策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateSecurityPolicyRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateSecurityPolicyResponse;  public class CreateSecurityPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSecurityPolicyRequest req = CreateSecurityPolicyRequest.fromJsonString(params, CreateSecurityPolicyRequest.class);                          CreateSecurityPolicyResponse resp = client.CreateSecurityPolicy(req);                          System.out.println(CreateSecurityPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1804,全球应用加速,通道相关接口,删除安全策略规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateSecurityRulesRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateSecurityRulesResponse;  public class CreateSecurityRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSecurityRulesRequest req = CreateSecurityRulesRequest.fromJsonString(params, CreateSecurityRulesRequest.class);                          CreateSecurityRulesResponse resp = client.CreateSecurityRules(req);                          System.out.println(CreateSecurityRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1805,全球应用加速,通道相关接口,查询加速区域,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteSecurityPolicyRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteSecurityPolicyResponse;  public class DeleteSecurityPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSecurityPolicyRequest req = DeleteSecurityPolicyRequest.fromJsonString(params, DeleteSecurityPolicyRequest.class);                          DeleteSecurityPolicyResponse resp = client.DeleteSecurityPolicy(req);                          System.out.println(DeleteSecurityPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1806,全球应用加速,通道相关接口,根据源站区域查询可用加速区域,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteSecurityRulesRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteSecurityRulesResponse;  public class DeleteSecurityRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSecurityRulesRequest req = DeleteSecurityRulesRequest.fromJsonString(params, DeleteSecurityRulesRequest.class);                          DeleteSecurityRulesResponse resp = client.DeleteSecurityRules(req);                          System.out.println(DeleteSecurityRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1807,全球应用加速,通道相关接口,查询源站区域,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeAccessRegionsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeAccessRegionsResponse;  public class DescribeAccessRegions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccessRegionsRequest req = DescribeAccessRegionsRequest.fromJsonString(params, DescribeAccessRegionsRequest.class);                          DescribeAccessRegionsResponse resp = client.DescribeAccessRegions(req);                          System.out.println(DescribeAccessRegionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1808,全球应用加速,通道相关接口,查询通道实例列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeAccessRegionsByDestRegionRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeAccessRegionsByDestRegionResponse;  public class DescribeAccessRegionsByDestRegion {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccessRegionsByDestRegionRequest req = DescribeAccessRegionsByDestRegionRequest.fromJsonString(params, DescribeAccessRegionsByDestRegionRequest.class);                          DescribeAccessRegionsByDestRegionResponse resp = client.DescribeAccessRegionsByDestRegion(req);                          System.out.println(DescribeAccessRegionsByDestRegionRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1809,全球应用加速,通道相关接口,查询通道状态列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeDestRegionsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeDestRegionsResponse;  public class DescribeDestRegions {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDestRegionsRequest req = DescribeDestRegionsRequest.fromJsonString(params, DescribeDestRegionsRequest.class);                          DescribeDestRegionsResponse resp = client.DescribeDestRegions(req);                          System.out.println(DescribeDestRegionsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1810,全球应用加速,通道相关接口,查询统计通道和监听器信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxiesRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxiesResponse;  public class DescribeProxies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxiesRequest req = DescribeProxiesRequest.fromJsonString(params, DescribeProxiesRequest.class);                          DescribeProxiesResponse resp = client.DescribeProxies(req);                          System.out.println(DescribeProxiesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1811,全球应用加速,通道相关接口,查询通道详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxiesStatusRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxiesStatusResponse;  public class DescribeProxiesStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxiesStatusRequest req = DescribeProxiesStatusRequest.fromJsonString(params, DescribeProxiesStatusRequest.class);                          DescribeProxiesStatusResponse resp = client.DescribeProxiesStatus(req);                          System.out.println(DescribeProxiesStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1812,全球应用加速,通道相关接口,获取安全策略详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyAndStatisticsListenersRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyAndStatisticsListenersResponse;  public class DescribeProxyAndStatisticsListeners {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxyAndStatisticsListenersRequest req = DescribeProxyAndStatisticsListenersRequest.fromJsonString(params, DescribeProxyAndStatisticsListenersRequest.class);                          DescribeProxyAndStatisticsListenersResponse resp = client.DescribeProxyAndStatisticsListeners(req);                          System.out.println(DescribeProxyAndStatisticsListenersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1813,全球应用加速,通道相关接口,销毁通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyDetailRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyDetailResponse;  public class DescribeProxyDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxyDetailRequest req = DescribeProxyDetailRequest.fromJsonString(params, DescribeProxyDetailRequest.class);                          DescribeProxyDetailResponse resp = client.DescribeProxyDetail(req);                          System.out.println(DescribeProxyDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1814,全球应用加速,通道相关接口,创建加速通道询价,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeSecurityPolicyDetailRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeSecurityPolicyDetailResponse;  public class DescribeSecurityPolicyDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSecurityPolicyDetailRequest req = DescribeSecurityPolicyDetailRequest.fromJsonString(params, DescribeSecurityPolicyDetailRequest.class);                          DescribeSecurityPolicyDetailResponse resp = client.DescribeSecurityPolicyDetail(req);                          System.out.println(DescribeSecurityPolicyDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1815,全球应用加速,通道相关接口,修改通道的属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DestroyProxiesRequest; import com.tencentcloudapi.gaap.v20180529.models.DestroyProxiesResponse;  public class DestroyProxies {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DestroyProxiesRequest req = DestroyProxiesRequest.fromJsonString(params, DestroyProxiesRequest.class);                          DestroyProxiesResponse resp = client.DestroyProxies(req);                          System.out.println(DestroyProxiesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1816,全球应用加速,通道相关接口,修改通道所属项目,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyProxiesAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyProxiesAttributeResponse;  public class ModifyProxiesAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProxiesAttributeRequest req = ModifyProxiesAttributeRequest.fromJsonString(params, ModifyProxiesAttributeRequest.class);                          ModifyProxiesAttributeResponse resp = client.ModifyProxiesAttribute(req);                          System.out.println(ModifyProxiesAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1817,全球应用加速,通道相关接口,修改通道配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyProxiesAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyProxiesAttributeResponse;  public class ModifyProxiesAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProxiesAttributeRequest req = ModifyProxiesAttributeRequest.fromJsonString(params, ModifyProxiesAttributeRequest.class);                          ModifyProxiesAttributeResponse resp = client.ModifyProxiesAttribute(req);                          System.out.println(ModifyProxiesAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1818,全球应用加速,通道相关接口,修改安全策略规则名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyConfigurationRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyConfigurationResponse;  public class ModifyProxyConfiguration {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProxyConfigurationRequest req = ModifyProxyConfigurationRequest.fromJsonString(params, ModifyProxyConfigurationRequest.class);                          ModifyProxyConfigurationResponse resp = client.ModifyProxyConfiguration(req);                          System.out.println(ModifyProxyConfigurationRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1819,全球应用加速,通道相关接口,开启通道,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifySecurityRuleRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifySecurityRuleResponse;  public class ModifySecurityRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySecurityRuleRequest req = ModifySecurityRuleRequest.fromJsonString(params, ModifySecurityRuleRequest.class);                          ModifySecurityRuleResponse resp = client.ModifySecurityRule(req);                          System.out.println(ModifySecurityRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1820,全球应用加速,通道相关接口,开启安全策略,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifySecurityRuleRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifySecurityRuleResponse;  public class ModifySecurityRule {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySecurityRuleRequest req = ModifySecurityRuleRequest.fromJsonString(params, ModifySecurityRuleRequest.class);                          ModifySecurityRuleResponse resp = client.ModifySecurityRule(req);                          System.out.println(ModifySecurityRuleRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1821,全球应用加速,通道组相关接口,创建通道组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.OpenSecurityPolicyRequest; import com.tencentcloudapi.gaap.v20180529.models.OpenSecurityPolicyResponse;  public class OpenSecurityPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             OpenSecurityPolicyRequest req = OpenSecurityPolicyRequest.fromJsonString(params, OpenSecurityPolicyRequest.class);                          OpenSecurityPolicyResponse resp = client.OpenSecurityPolicy(req);                          System.out.println(OpenSecurityPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1822,全球应用加速,通道组相关接口,开通通道组域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.OpenSecurityPolicyRequest; import com.tencentcloudapi.gaap.v20180529.models.OpenSecurityPolicyResponse;  public class OpenSecurityPolicy {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             OpenSecurityPolicyRequest req = OpenSecurityPolicyRequest.fromJsonString(params, OpenSecurityPolicyRequest.class);                          OpenSecurityPolicyResponse resp = client.OpenSecurityPolicy(req);                          System.out.println(OpenSecurityPolicyRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1823,全球应用加速,通道组相关接口,删除通道组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateProxyGroupDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateProxyGroupDomainResponse;  public class CreateProxyGroupDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProxyGroupDomainRequest req = CreateProxyGroupDomainRequest.fromJsonString(params, CreateProxyGroupDomainRequest.class);                          CreateProxyGroupDomainResponse resp = client.CreateProxyGroupDomain(req);                          System.out.println(CreateProxyGroupDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1824,全球应用加速,通道组相关接口,获取国家地区编码映射表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.CreateProxyGroupDomainRequest; import com.tencentcloudapi.gaap.v20180529.models.CreateProxyGroupDomainResponse;  public class CreateProxyGroupDomain {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             CreateProxyGroupDomainRequest req = CreateProxyGroupDomainRequest.fromJsonString(params, CreateProxyGroupDomainRequest.class);                          CreateProxyGroupDomainResponse resp = client.CreateProxyGroupDomain(req);                          System.out.println(CreateProxyGroupDomainRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1825,全球应用加速,通道组相关接口,获取通道组域名解析配置详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DeleteProxyGroupRequest; import com.tencentcloudapi.gaap.v20180529.models.DeleteProxyGroupResponse;  public class DeleteProxyGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteProxyGroupRequest req = DeleteProxyGroupRequest.fromJsonString(params, DeleteProxyGroupRequest.class);                          DeleteProxyGroupResponse resp = client.DeleteProxyGroup(req);                          System.out.println(DeleteProxyGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1826,全球应用加速,通道组相关接口,查询通道组详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeCountryAreaMappingRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeCountryAreaMappingResponse;  public class DescribeCountryAreaMapping {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCountryAreaMappingRequest req = DescribeCountryAreaMappingRequest.fromJsonString(params, DescribeCountryAreaMappingRequest.class);                          DescribeCountryAreaMappingResponse resp = client.DescribeCountryAreaMapping(req);                          System.out.println(DescribeCountryAreaMappingRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1827,全球应用加速,通道组相关接口,拉取通道组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeGroupDomainConfigRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeGroupDomainConfigResponse;  public class DescribeGroupDomainConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupDomainConfigRequest req = DescribeGroupDomainConfigRequest.fromJsonString(params, DescribeGroupDomainConfigRequest.class);                          DescribeGroupDomainConfigResponse resp = client.DescribeGroupDomainConfig(req);                          System.out.println(DescribeGroupDomainConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1828,全球应用加速,通道组相关接口,配置通道组就近接入域名,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupDetailsRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupDetailsResponse;  public class DescribeProxyGroupDetails {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxyGroupDetailsRequest req = DescribeProxyGroupDetailsRequest.fromJsonString(params, DescribeProxyGroupDetailsRequest.class);                          DescribeProxyGroupDetailsResponse resp = client.DescribeProxyGroupDetails(req);                          System.out.println(DescribeProxyGroupDetailsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1829,全球应用加速,通道组相关接口,修改通道组属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupListRequest; import com.tencentcloudapi.gaap.v20180529.models.DescribeProxyGroupListResponse;  public class DescribeProxyGroupList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""gaap.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeProxyGroupListRequest req = DescribeProxyGroupListRequest.fromJsonString(params, DescribeProxyGroupListRequest.class);                          DescribeProxyGroupListResponse resp = client.DescribeProxyGroupList(req);                          System.out.println(DescribeProxyGroupListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1830,实时音视频,房间管理相关接口,解散房间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyGroupAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyGroupAttributeResponse;  public class ModifyProxyGroupAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProxyGroupAttributeRequest req = ModifyProxyGroupAttributeRequest.fromJsonString(params, ModifyProxyGroupAttributeRequest.class);                          ModifyProxyGroupAttributeResponse resp = client.ModifyProxyGroupAttribute(req);                          System.out.println(ModifyProxyGroupAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1831,实时音视频,房间管理相关接口,踢人,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.gaap.v20180529.GaapClient;  import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyGroupAttributeRequest; import com.tencentcloudapi.gaap.v20180529.models.ModifyProxyGroupAttributeResponse;  public class ModifyProxyGroupAttribute {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      GaapClient client = new GaapClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyProxyGroupAttributeRequest req = ModifyProxyGroupAttributeRequest.fromJsonString(params, ModifyProxyGroupAttributeRequest.class);                          ModifyProxyGroupAttributeResponse resp = client.ModifyProxyGroupAttribute(req);                          System.out.println(ModifyProxyGroupAttributeRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1832,腾讯分布式服务框架,命名空间相关接口,创建命名空间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.trtc.v20190722.TrtcClient;  import com.tencentcloudapi.trtc.v20190722.models.KickOutUserRequest; import com.tencentcloudapi.trtc.v20190722.models.KickOutUserResponse;  public class KickOutUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TrtcClient client = new TrtcClient(cred, """", clientProfile);                          String params = ""{}"";             KickOutUserRequest req = KickOutUserRequest.fromJsonString(params, KickOutUserRequest.class);                          KickOutUserResponse resp = client.KickOutUser(req);                          System.out.println(KickOutUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1833,腾讯分布式服务框架,命名空间相关接口,删除命名空间,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.trtc.v20190722.TrtcClient;  import com.tencentcloudapi.trtc.v20190722.models.KickOutUserRequest; import com.tencentcloudapi.trtc.v20190722.models.KickOutUserResponse;  public class KickOutUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TrtcClient client = new TrtcClient(cred, """", clientProfile);                          String params = ""{}"";             KickOutUserRequest req = KickOutUserRequest.fromJsonString(params, KickOutUserRequest.class);                          KickOutUserResponse resp = client.KickOutUser(req);                          System.out.println(KickOutUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1834,腾讯分布式服务框架,命名空间相关接口,查询简单命名空间列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.trtc.v20190722.TrtcClient;  import com.tencentcloudapi.trtc.v20190722.models.KickOutUserRequest; import com.tencentcloudapi.trtc.v20190722.models.KickOutUserResponse;  public class KickOutUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TrtcClient client = new TrtcClient(cred, """", clientProfile);                          String params = ""{}"";             KickOutUserRequest req = KickOutUserRequest.fromJsonString(params, KickOutUserRequest.class);                          KickOutUserResponse resp = client.KickOutUser(req);                          System.out.println(KickOutUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1835,腾讯分布式服务框架,应用相关接口,创建应用,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.trtc.v20190722.TrtcClient;  import com.tencentcloudapi.trtc.v20190722.models.KickOutUserRequest; import com.tencentcloudapi.trtc.v20190722.models.KickOutUserResponse;  public class KickOutUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TrtcClient client = new TrtcClient(cred, """", clientProfile);                          String params = ""{}"";             KickOutUserRequest req = KickOutUserRequest.fromJsonString(params, KickOutUserRequest.class);                          KickOutUserResponse resp = client.KickOutUser(req);                          System.out.println(KickOutUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1836,腾讯分布式服务框架,应用相关接口,删除应用,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.trtc.v20190722.TrtcClient;  import com.tencentcloudapi.trtc.v20190722.models.KickOutUserRequest; import com.tencentcloudapi.trtc.v20190722.models.KickOutUserResponse;  public class KickOutUser {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""trtc.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TrtcClient client = new TrtcClient(cred, """", clientProfile);                          String params = ""{}"";             KickOutUserRequest req = KickOutUserRequest.fromJsonString(params, KickOutUserRequest.class);                          KickOutUserResponse resp = client.KickOutUser(req);                          System.out.println(KickOutUserRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1837,腾讯分布式服务框架,应用相关接口,获取应用详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeleteNamespaceRequest; import com.tencentcloudapi.tsf.v20180326.models.DeleteNamespaceResponse;  public class DeleteNamespace {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteNamespaceRequest req = DeleteNamespaceRequest.fromJsonString(params, DeleteNamespaceRequest.class);                          DeleteNamespaceResponse resp = client.DeleteNamespace(req);                          System.out.println(DeleteNamespaceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1838,腾讯分布式服务框架,应用相关接口,获取应用列表其它字段,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesResponse;  public class DescribeSimpleNamespaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleNamespacesRequest req = DescribeSimpleNamespacesRequest.fromJsonString(params, DescribeSimpleNamespacesRequest.class);                          DescribeSimpleNamespacesResponse resp = client.DescribeSimpleNamespaces(req);                          System.out.println(DescribeSimpleNamespacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1839,腾讯分布式服务框架,应用相关接口,获取应用列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesResponse;  public class DescribeSimpleNamespaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleNamespacesRequest req = DescribeSimpleNamespacesRequest.fromJsonString(params, DescribeSimpleNamespacesRequest.class);                          DescribeSimpleNamespacesResponse resp = client.DescribeSimpleNamespaces(req);                          System.out.println(DescribeSimpleNamespacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1840,腾讯分布式服务框架,应用相关接口,查询简单应用列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesResponse;  public class DescribeSimpleNamespaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleNamespacesRequest req = DescribeSimpleNamespacesRequest.fromJsonString(params, DescribeSimpleNamespacesRequest.class);                          DescribeSimpleNamespacesResponse resp = client.DescribeSimpleNamespaces(req);                          System.out.println(DescribeSimpleNamespacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1841,腾讯分布式服务框架,服务相关接口,新增微服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleNamespacesResponse;  public class DescribeSimpleNamespaces {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleNamespacesRequest req = DescribeSimpleNamespacesRequest.fromJsonString(params, DescribeSimpleNamespacesRequest.class);                          DescribeSimpleNamespacesResponse resp = client.DescribeSimpleNamespaces(req);                          System.out.println(DescribeSimpleNamespacesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1842,腾讯分布式服务框架,服务相关接口,删除微服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleApplicationsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleApplicationsResponse;  public class DescribeSimpleApplications {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleApplicationsRequest req = DescribeSimpleApplicationsRequest.fromJsonString(params, DescribeSimpleApplicationsRequest.class);                          DescribeSimpleApplicationsResponse resp = client.DescribeSimpleApplications(req);                          System.out.println(DescribeSimpleApplicationsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1843,腾讯分布式服务框架,服务相关接口,查询微服务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateMicroserviceRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateMicroserviceResponse;  public class CreateMicroservice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMicroserviceRequest req = CreateMicroserviceRequest.fromJsonString(params, CreateMicroserviceRequest.class);                          CreateMicroserviceResponse resp = client.CreateMicroservice(req);                          System.out.println(CreateMicroserviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1844,腾讯分布式服务框架,服务相关接口,获取微服务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateMicroserviceRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateMicroserviceResponse;  public class CreateMicroservice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMicroserviceRequest req = CreateMicroserviceRequest.fromJsonString(params, CreateMicroserviceRequest.class);                          CreateMicroserviceResponse resp = client.CreateMicroservice(req);                          System.out.println(CreateMicroserviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1845,腾讯分布式服务框架,服务相关接口,修改微服务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroserviceRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroserviceResponse;  public class DescribeMicroservice {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMicroserviceRequest req = DescribeMicroserviceRequest.fromJsonString(params, DescribeMicroserviceRequest.class);                          DescribeMicroserviceResponse resp = client.DescribeMicroservice(req);                          System.out.println(DescribeMicroserviceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1846,腾讯分布式服务框架,程序包相关接口,批量删除包,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesResponse;  public class DescribeMicroservices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMicroservicesRequest req = DescribeMicroservicesRequest.fromJsonString(params, DescribeMicroservicesRequest.class);                          DescribeMicroservicesResponse resp = client.DescribeMicroservices(req);                          System.out.println(DescribeMicroservicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1847,腾讯分布式服务框架,程序包相关接口,获取下载程序包信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesResponse;  public class DescribeMicroservices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMicroservicesRequest req = DescribeMicroservicesRequest.fromJsonString(params, DescribeMicroservicesRequest.class);                          DescribeMicroservicesResponse resp = client.DescribeMicroservices(req);                          System.out.println(DescribeMicroservicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1848,腾讯分布式服务框架,程序包相关接口,获取某个应用的程序包信息列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeMicroservicesResponse;  public class DescribeMicroservices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMicroservicesRequest req = DescribeMicroservicesRequest.fromJsonString(params, DescribeMicroservicesRequest.class);                          DescribeMicroservicesResponse resp = client.DescribeMicroservices(req);                          System.out.println(DescribeMicroservicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1849,腾讯分布式服务框架,程序包相关接口,获取上传程序包信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeDownloadInfoRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeDownloadInfoResponse;  public class DescribeDownloadInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeDownloadInfoRequest req = DescribeDownloadInfoRequest.fromJsonString(params, DescribeDownloadInfoRequest.class);                          DescribeDownloadInfoResponse resp = client.DescribeDownloadInfo(req);                          System.out.println(DescribeDownloadInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1850,腾讯分布式服务框架,程序包相关接口,更新上传程序包信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeUploadInfoRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeUploadInfoResponse;  public class DescribeUploadInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUploadInfoRequest req = DescribeUploadInfoRequest.fromJsonString(params, DescribeUploadInfoRequest.class);                          DescribeUploadInfoResponse resp = client.DescribeUploadInfo(req);                          System.out.println(DescribeUploadInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1851,腾讯分布式服务框架,部署组相关接口,创建容器部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeUploadInfoRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeUploadInfoResponse;  public class DescribeUploadInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeUploadInfoRequest req = DescribeUploadInfoRequest.fromJsonString(params, DescribeUploadInfoRequest.class);                          DescribeUploadInfoResponse resp = client.DescribeUploadInfo(req);                          System.out.println(DescribeUploadInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1852,腾讯分布式服务框架,部署组相关接口,创建虚拟机部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ModifyUploadInfoRequest; import com.tencentcloudapi.tsf.v20180326.models.ModifyUploadInfoResponse;  public class ModifyUploadInfo {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyUploadInfoRequest req = ModifyUploadInfoRequest.fromJsonString(params, ModifyUploadInfoRequest.class);                          ModifyUploadInfoResponse resp = client.ModifyUploadInfo(req);                          System.out.println(ModifyUploadInfoRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1853,腾讯分布式服务框架,部署组相关接口,删除容器部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateContainGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateContainGroupResponse;  public class CreateContainGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateContainGroupRequest req = CreateContainGroupRequest.fromJsonString(params, CreateContainGroupRequest.class);                          CreateContainGroupResponse resp = client.CreateContainGroup(req);                          System.out.println(CreateContainGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1854,腾讯分布式服务框架,部署组相关接口,删除虚拟机部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateGroupResponse;  public class CreateGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateGroupRequest req = CreateGroupRequest.fromJsonString(params, CreateGroupRequest.class);                          CreateGroupResponse resp = client.CreateGroup(req);                          System.out.println(CreateGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1855,腾讯分布式服务框架,部署组相关接口,部署容器应用,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeleteContainerGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DeleteContainerGroupResponse;  public class DeleteContainerGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteContainerGroupRequest req = DeleteContainerGroupRequest.fromJsonString(params, DeleteContainerGroupRequest.class);                          DeleteContainerGroupResponse resp = client.DeleteContainerGroup(req);                          System.out.println(DeleteContainerGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1856,腾讯分布式服务框架,部署组相关接口,部署虚拟机部署组应用,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeleteGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DeleteGroupResponse;  public class DeleteGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteGroupRequest req = DeleteGroupRequest.fromJsonString(params, DeleteGroupRequest.class);                          DeleteGroupResponse resp = client.DeleteGroup(req);                          System.out.println(DeleteGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1857,腾讯分布式服务框架,部署组相关接口,查询容器部署组详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeleteGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DeleteGroupResponse;  public class DeleteGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteGroupRequest req = DeleteGroupRequest.fromJsonString(params, DeleteGroupRequest.class);                          DeleteGroupResponse resp = client.DeleteGroup(req);                          System.out.println(DeleteGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1858,腾讯分布式服务框架,部署组相关接口,容器部署组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeployGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DeployGroupResponse;  public class DeployGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeployGroupRequest req = DeployGroupRequest.fromJsonString(params, DeployGroupRequest.class);                          DeployGroupResponse resp = client.DeployGroup(req);                          System.out.println(DeployGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1859,腾讯分布式服务框架,部署组相关接口,查询虚拟机部署组详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeployGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DeployGroupResponse;  public class DeployGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeployGroupRequest req = DeployGroupRequest.fromJsonString(params, DeployGroupRequest.class);                          DeployGroupResponse resp = client.DeployGroup(req);                          System.out.println(DeployGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1860,腾讯分布式服务框架,部署组相关接口,查询虚拟机部署组云主机列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeContainerGroupsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeContainerGroupsResponse;  public class DescribeContainerGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeContainerGroupsRequest req = DescribeContainerGroupsRequest.fromJsonString(params, DescribeContainerGroupsRequest.class);                          DescribeContainerGroupsResponse resp = client.DescribeContainerGroups(req);                          System.out.println(DescribeContainerGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1861,腾讯分布式服务框架,部署组相关接口,获取虚拟机部署组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupResponse;  public class DescribeGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupRequest req = DescribeGroupRequest.fromJsonString(params, DescribeGroupRequest.class);                          DescribeGroupResponse resp = client.DescribeGroup(req);                          System.out.println(DescribeGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1862,腾讯分布式服务框架,部署组相关接口,查询简单部署组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupResponse;  public class DescribeGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupRequest req = DescribeGroupRequest.fromJsonString(params, DescribeGroupRequest.class);                          DescribeGroupResponse resp = client.DescribeGroup(req);                          System.out.println(DescribeGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1863,腾讯分布式服务框架,部署组相关接口,虚拟机部署组添加实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeGroupsResponse;  public class DescribeGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeGroupsRequest req = DescribeGroupsRequest.fromJsonString(params, DescribeGroupsRequest.class);                          DescribeGroupsResponse resp = client.DescribeGroups(req);                          System.out.println(DescribeGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1864,腾讯分布式服务框架,部署组相关接口,修改容器部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleGroupsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleGroupsResponse;  public class DescribeSimpleGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleGroupsRequest req = DescribeSimpleGroupsRequest.fromJsonString(params, DescribeSimpleGroupsRequest.class);                          DescribeSimpleGroupsResponse resp = client.DescribeSimpleGroups(req);                          System.out.println(DescribeSimpleGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1865,腾讯分布式服务框架,部署组相关接口,修改容器部署组实例数,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ExpandGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.ExpandGroupResponse;  public class ExpandGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ExpandGroupRequest req = ExpandGroupRequest.fromJsonString(params, ExpandGroupRequest.class);                          ExpandGroupResponse resp = client.ExpandGroup(req);                          System.out.println(ExpandGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1866,腾讯分布式服务框架,部署组相关接口,缩容虚拟机部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ModifyContainerGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.ModifyContainerGroupResponse;  public class ModifyContainerGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyContainerGroupRequest req = ModifyContainerGroupRequest.fromJsonString(params, ModifyContainerGroupRequest.class);                          ModifyContainerGroupResponse resp = client.ModifyContainerGroup(req);                          System.out.println(ModifyContainerGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1867,腾讯分布式服务框架,部署组相关接口,虚拟机部署组下线实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ModifyContainerReplicasRequest; import com.tencentcloudapi.tsf.v20180326.models.ModifyContainerReplicasResponse;  public class ModifyContainerReplicas {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyContainerReplicasRequest req = ModifyContainerReplicasRequest.fromJsonString(params, ModifyContainerReplicasRequest.class);                          ModifyContainerReplicasResponse resp = client.ModifyContainerReplicas(req);                          System.out.println(ModifyContainerReplicasRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1868,腾讯分布式服务框架,部署组相关接口,启动容器部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ShrinkGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.ShrinkGroupResponse;  public class ShrinkGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ShrinkGroupRequest req = ShrinkGroupRequest.fromJsonString(params, ShrinkGroupRequest.class);                          ShrinkGroupResponse resp = client.ShrinkGroup(req);                          System.out.println(ShrinkGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1869,腾讯分布式服务框架,部署组相关接口,启动虚拟机部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ShrinkGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.ShrinkGroupResponse;  public class ShrinkGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ShrinkGroupRequest req = ShrinkGroupRequest.fromJsonString(params, ShrinkGroupRequest.class);                          ShrinkGroupResponse resp = client.ShrinkGroup(req);                          System.out.println(ShrinkGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1870,腾讯分布式服务框架,部署组相关接口,停止容器部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ShrinkInstancesRequest; import com.tencentcloudapi.tsf.v20180326.models.ShrinkInstancesResponse;  public class ShrinkInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ShrinkInstancesRequest req = ShrinkInstancesRequest.fromJsonString(params, ShrinkInstancesRequest.class);                          ShrinkInstancesResponse resp = client.ShrinkInstances(req);                          System.out.println(ShrinkInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1871,腾讯分布式服务框架,部署组相关接口,停止虚拟机部署组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.StartGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.StartGroupResponse;  public class StartGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             StartGroupRequest req = StartGroupRequest.fromJsonString(params, StartGroupRequest.class);                          StartGroupResponse resp = client.StartGroup(req);                          System.out.println(StartGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1872,腾讯分布式服务框架,配置管理相关接口,创建配置项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.StopGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.StopGroupResponse;  public class StopGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             StopGroupRequest req = StopGroupRequest.fromJsonString(params, StopGroupRequest.class);                          StopGroupResponse resp = client.StopGroup(req);                          System.out.println(StopGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1873,腾讯分布式服务框架,配置管理相关接口,创建公共配置项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.StopGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.StopGroupResponse;  public class StopGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             StopGroupRequest req = StopGroupRequest.fromJsonString(params, StopGroupRequest.class);                          StopGroupResponse resp = client.StopGroup(req);                          System.out.println(StopGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1874,腾讯分布式服务框架,配置管理相关接口,删除配置项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.StopGroupRequest; import com.tencentcloudapi.tsf.v20180326.models.StopGroupResponse;  public class StopGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             StopGroupRequest req = StopGroupRequest.fromJsonString(params, StopGroupRequest.class);                          StopGroupResponse resp = client.StopGroup(req);                          System.out.println(StopGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1875,腾讯分布式服务框架,配置管理相关接口,删除公共配置项,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateConfigResponse;  public class CreateConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateConfigRequest req = CreateConfigRequest.fromJsonString(params, CreateConfigRequest.class);                          CreateConfigResponse resp = client.CreateConfig(req);                          System.out.println(CreateConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1876,腾讯分布式服务框架,配置管理相关接口,查询配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreatePublicConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.CreatePublicConfigResponse;  public class CreatePublicConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreatePublicConfigRequest req = CreatePublicConfigRequest.fromJsonString(params, CreatePublicConfigRequest.class);                          CreatePublicConfigResponse resp = client.CreatePublicConfig(req);                          System.out.println(CreatePublicConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1877,腾讯分布式服务框架,配置管理相关接口,查询配置发布历史,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeleteConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.DeleteConfigResponse;  public class DeleteConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteConfigRequest req = DeleteConfigRequest.fromJsonString(params, DeleteConfigRequest.class);                          DeleteConfigResponse resp = client.DeleteConfig(req);                          System.out.println(DeleteConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1878,腾讯分布式服务框架,配置管理相关接口,查询配置发布信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DeletePublicConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.DeletePublicConfigResponse;  public class DeletePublicConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DeletePublicConfigRequest req = DeletePublicConfigRequest.fromJsonString(params, DeletePublicConfigRequest.class);                          DeletePublicConfigResponse resp = client.DeletePublicConfig(req);                          System.out.println(DeletePublicConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1879,腾讯分布式服务框架,配置管理相关接口,查询配置项列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigResponse;  public class DescribeConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeConfigRequest req = DescribeConfigRequest.fromJsonString(params, DescribeConfigRequest.class);                          DescribeConfigResponse resp = client.DescribeConfig(req);                          System.out.println(DescribeConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1880,腾讯分布式服务框架,配置管理相关接口,查询配置汇总列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigReleaseLogsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigReleaseLogsResponse;  public class DescribeConfigReleaseLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeConfigReleaseLogsRequest req = DescribeConfigReleaseLogsRequest.fromJsonString(params, DescribeConfigReleaseLogsRequest.class);                          DescribeConfigReleaseLogsResponse resp = client.DescribeConfigReleaseLogs(req);                          System.out.println(DescribeConfigReleaseLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1881,腾讯分布式服务框架,配置管理相关接口,查询公共配置（单条）,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigReleasesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigReleasesResponse;  public class DescribeConfigReleases {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeConfigReleasesRequest req = DescribeConfigReleasesRequest.fromJsonString(params, DescribeConfigReleasesRequest.class);                          DescribeConfigReleasesResponse resp = client.DescribeConfigReleases(req);                          System.out.println(DescribeConfigReleasesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1882,腾讯分布式服务框架,配置管理相关接口,查询公共配置发布历史,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigsResponse;  public class DescribeConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeConfigsRequest req = DescribeConfigsRequest.fromJsonString(params, DescribeConfigsRequest.class);                          DescribeConfigsResponse resp = client.DescribeConfigs(req);                          System.out.println(DescribeConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1883,腾讯分布式服务框架,配置管理相关接口,查询公共配置发布信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigSummaryRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeConfigSummaryResponse;  public class DescribeConfigSummary {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeConfigSummaryRequest req = DescribeConfigSummaryRequest.fromJsonString(params, DescribeConfigSummaryRequest.class);                          DescribeConfigSummaryResponse resp = client.DescribeConfigSummary(req);                          System.out.println(DescribeConfigSummaryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1884,腾讯分布式服务框架,配置管理相关接口,查询公共配置项列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigResponse;  public class DescribePublicConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePublicConfigRequest req = DescribePublicConfigRequest.fromJsonString(params, DescribePublicConfigRequest.class);                          DescribePublicConfigResponse resp = client.DescribePublicConfig(req);                          System.out.println(DescribePublicConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1885,腾讯分布式服务框架,配置管理相关接口,查询公共配置汇总列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigReleaseLogsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigReleaseLogsResponse;  public class DescribePublicConfigReleaseLogs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePublicConfigReleaseLogsRequest req = DescribePublicConfigReleaseLogsRequest.fromJsonString(params, DescribePublicConfigReleaseLogsRequest.class);                          DescribePublicConfigReleaseLogsResponse resp = client.DescribePublicConfigReleaseLogs(req);                          System.out.println(DescribePublicConfigReleaseLogsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1886,腾讯分布式服务框架,配置管理相关接口,查询group发布的配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigReleasesRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigReleasesResponse;  public class DescribePublicConfigReleases {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePublicConfigReleasesRequest req = DescribePublicConfigReleasesRequest.fromJsonString(params, DescribePublicConfigReleasesRequest.class);                          DescribePublicConfigReleasesResponse resp = client.DescribePublicConfigReleases(req);                          System.out.println(DescribePublicConfigReleasesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1887,腾讯分布式服务框架,配置管理相关接口,发布配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigsResponse;  public class DescribePublicConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePublicConfigsRequest req = DescribePublicConfigsRequest.fromJsonString(params, DescribePublicConfigsRequest.class);                          DescribePublicConfigsResponse resp = client.DescribePublicConfigs(req);                          System.out.println(DescribePublicConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1888,腾讯分布式服务框架,配置管理相关接口,发布公共配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigSummaryRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribePublicConfigSummaryResponse;  public class DescribePublicConfigSummary {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribePublicConfigSummaryRequest req = DescribePublicConfigSummaryRequest.fromJsonString(params, DescribePublicConfigSummaryRequest.class);                          DescribePublicConfigSummaryResponse resp = client.DescribePublicConfigSummary(req);                          System.out.println(DescribePublicConfigSummaryRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1889,腾讯分布式服务框架,配置管理相关接口,撤回已发布的配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ReleaseConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.ReleaseConfigResponse;  public class ReleaseConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ReleaseConfigRequest req = ReleaseConfigRequest.fromJsonString(params, ReleaseConfigRequest.class);                          ReleaseConfigResponse resp = client.ReleaseConfig(req);                          System.out.println(ReleaseConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1890,腾讯分布式服务框架,配置管理相关接口,撤回已发布的公共配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ReleaseConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.ReleaseConfigResponse;  public class ReleaseConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ReleaseConfigRequest req = ReleaseConfigRequest.fromJsonString(params, ReleaseConfigRequest.class);                          ReleaseConfigResponse resp = client.ReleaseConfig(req);                          System.out.println(ReleaseConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1891,腾讯分布式服务框架,配置管理相关接口,回滚配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.ReleasePublicConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.ReleasePublicConfigResponse;  public class ReleasePublicConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             ReleasePublicConfigRequest req = ReleasePublicConfigRequest.fromJsonString(params, ReleasePublicConfigRequest.class);                          ReleasePublicConfigResponse resp = client.ReleasePublicConfig(req);                          System.out.println(ReleasePublicConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1892,腾讯分布式服务框架,镜像相关接口,批量删除镜像版本,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.RevocationPublicConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.RevocationPublicConfigResponse;  public class RevocationPublicConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             RevocationPublicConfigRequest req = RevocationPublicConfigRequest.fromJsonString(params, RevocationPublicConfigRequest.class);                          RevocationPublicConfigResponse resp = client.RevocationPublicConfig(req);                          System.out.println(RevocationPublicConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1893,腾讯分布式服务框架,镜像相关接口,镜像版本列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.RollbackConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.RollbackConfigResponse;  public class RollbackConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             RollbackConfigRequest req = RollbackConfigRequest.fromJsonString(params, RollbackConfigRequest.class);                          RollbackConfigResponse resp = client.RollbackConfig(req);                          System.out.println(RollbackConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1894,腾讯分布式服务框架,集群相关接口,集群导入云主机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.RollbackConfigRequest; import com.tencentcloudapi.tsf.v20180326.models.RollbackConfigResponse;  public class RollbackConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             RollbackConfigRequest req = RollbackConfigRequest.fromJsonString(params, RollbackConfigRequest.class);                          RollbackConfigResponse resp = client.RollbackConfig(req);                          System.out.println(RollbackConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1895,腾讯分布式服务框架,集群相关接口,创建集群,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeImageTagsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeImageTagsResponse;  public class DescribeImageTags {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageTagsRequest req = DescribeImageTagsRequest.fromJsonString(params, DescribeImageTagsRequest.class);                          DescribeImageTagsResponse resp = client.DescribeImageTags(req);                          System.out.println(DescribeImageTagsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1896,腾讯分布式服务框架,集群相关接口,查询集群实例,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeImageTagsRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeImageTagsResponse;  public class DescribeImageTags {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageTagsRequest req = DescribeImageTagsRequest.fromJsonString(params, DescribeImageTagsRequest.class);                          DescribeImageTagsResponse resp = client.DescribeImageTags(req);                          System.out.println(DescribeImageTagsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1897,腾讯分布式服务框架,集群相关接口,查询简单集群列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.AddInstancesRequest; import com.tencentcloudapi.tsf.v20180326.models.AddInstancesResponse;  public class AddInstances {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             AddInstancesRequest req = AddInstancesRequest.fromJsonString(params, AddInstancesRequest.class);                          AddInstancesResponse resp = client.AddInstances(req);                          System.out.println(AddInstancesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1898,腾讯分布式服务框架,集群相关接口,移除云主机,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.CreateClusterRequest; import com.tencentcloudapi.tsf.v20180326.models.CreateClusterResponse;  public class CreateCluster {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tsf.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             CreateClusterRequest req = CreateClusterRequest.fromJsonString(params, CreateClusterRequest.class);                          CreateClusterResponse resp = client.CreateCluster(req);                          System.out.println(CreateClusterRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1899,智能钛机器学习,其他接口,描述服务运行环境,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tsf.v20180326.TsfClient;  import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleClustersRequest; import com.tencentcloudapi.tsf.v20180326.models.DescribeSimpleClustersResponse;  public class DescribeSimpleClusters {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TsfClient client = new TsfClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSimpleClustersRequest req = DescribeSimpleClustersRequest.fromJsonString(params, DescribeSimpleClustersRequest.class);                          DescribeSimpleClustersResponse resp = client.DescribeSimpleClusters(req);                          System.out.println(DescribeSimpleClustersRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1900,智能钛机器学习,服务管理相关接口,创建服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DescribeRuntimesRequest; import com.tencentcloudapi.tiems.v20190416.models.DescribeRuntimesResponse;  public class DescribeRuntimes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRuntimesRequest req = DescribeRuntimesRequest.fromJsonString(params, DescribeRuntimesRequest.class);                          DescribeRuntimesResponse resp = client.DescribeRuntimes(req);                          System.out.println(DescribeRuntimesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1901,智能钛机器学习,服务管理相关接口,删除服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DescribeRuntimesRequest; import com.tencentcloudapi.tiems.v20190416.models.DescribeRuntimesResponse;  public class DescribeRuntimes {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeRuntimesRequest req = DescribeRuntimesRequest.fromJsonString(params, DescribeRuntimesRequest.class);                          DescribeRuntimesResponse resp = client.DescribeRuntimes(req);                          System.out.println(DescribeRuntimesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1902,智能钛机器学习,服务管理相关接口,描述服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DeleteServiceRequest; import com.tencentcloudapi.tiems.v20190416.models.DeleteServiceResponse;  public class DeleteService {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteServiceRequest req = DeleteServiceRequest.fromJsonString(params, DeleteServiceRequest.class);                          DeleteServiceResponse resp = client.DeleteService(req);                          System.out.println(DeleteServiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1903,智能钛机器学习,服务管理相关接口,更新服务,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DescribeServicesRequest; import com.tencentcloudapi.tiems.v20190416.models.DescribeServicesResponse;  public class DescribeServices {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServicesRequest req = DescribeServicesRequest.fromJsonString(params, DescribeServicesRequest.class);                          DescribeServicesResponse resp = client.DescribeServices(req);                          System.out.println(DescribeServicesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1904,智能钛机器学习,配置管理相关接口,创建服务配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.UpdateServiceRequest; import com.tencentcloudapi.tiems.v20190416.models.UpdateServiceResponse;  public class UpdateService {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateServiceRequest req = UpdateServiceRequest.fromJsonString(params, UpdateServiceRequest.class);                          UpdateServiceResponse resp = client.UpdateService(req);                          System.out.println(UpdateServiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1905,智能钛机器学习,配置管理相关接口,删除服务配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.UpdateServiceRequest; import com.tencentcloudapi.tiems.v20190416.models.UpdateServiceResponse;  public class UpdateService {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             UpdateServiceRequest req = UpdateServiceRequest.fromJsonString(params, UpdateServiceRequest.class);                          UpdateServiceResponse resp = client.UpdateService(req);                          System.out.println(UpdateServiceRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1906,智能钛机器学习,配置管理相关接口,描述服务配置,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DeleteServiceConfigRequest; import com.tencentcloudapi.tiems.v20190416.models.DeleteServiceConfigResponse;  public class DeleteServiceConfig {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteServiceConfigRequest req = DeleteServiceConfigRequest.fromJsonString(params, DeleteServiceConfigRequest.class);                          DeleteServiceConfigResponse resp = client.DeleteServiceConfig(req);                          System.out.println(DeleteServiceConfigRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1907,视频处理,任务管理相关接口,查询任务详情,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DescribeServiceConfigsRequest; import com.tencentcloudapi.tiems.v20190416.models.DescribeServiceConfigsResponse;  public class DescribeServiceConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceConfigsRequest req = DescribeServiceConfigsRequest.fromJsonString(params, DescribeServiceConfigsRequest.class);                          DescribeServiceConfigsResponse resp = client.DescribeServiceConfigs(req);                          System.out.println(DescribeServiceConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1908,视频处理,任务管理相关接口,获取任务列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.tiems.v20190416.TiemsClient;  import com.tencentcloudapi.tiems.v20190416.models.DescribeServiceConfigsRequest; import com.tencentcloudapi.tiems.v20190416.models.DescribeServiceConfigsResponse;  public class DescribeServiceConfigs {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""tiems.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      TiemsClient client = new TiemsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeServiceConfigsRequest req = DescribeServiceConfigsRequest.fromJsonString(params, DescribeServiceConfigsRequest.class);                          DescribeServiceConfigsResponse resp = client.DescribeServiceConfigs(req);                          System.out.println(DescribeServiceConfigsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1909,视频处理,参数模板相关接口,创建转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeTaskDetailRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeTaskDetailResponse;  public class DescribeTaskDetail {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTaskDetailRequest req = DescribeTaskDetailRequest.fromJsonString(params, DescribeTaskDetailRequest.class);                          DescribeTaskDetailResponse resp = client.DescribeTaskDetail(req);                          System.out.println(DescribeTaskDetailRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1910,视频处理,参数模板相关接口,创建雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeTasksRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1911,视频处理,参数模板相关接口,创建采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeTasksRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeTasksResponse;  public class DescribeTasks {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTasksRequest req = DescribeTasksRequest.fromJsonString(params, DescribeTasksRequest.class);                          DescribeTasksResponse resp = client.DescribeTasks(req);                          System.out.println(DescribeTasksRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1912,视频处理,参数模板相关接口,创建指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.CreateImageSpriteTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.CreateImageSpriteTemplateResponse;  public class CreateImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateImageSpriteTemplateRequest req = CreateImageSpriteTemplateRequest.fromJsonString(params, CreateImageSpriteTemplateRequest.class);                          CreateImageSpriteTemplateResponse resp = client.CreateImageSpriteTemplate(req);                          System.out.println(CreateImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1913,视频处理,参数模板相关接口,创建转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.CreateSampleSnapshotTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.CreateSampleSnapshotTemplateResponse;  public class CreateSampleSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateSampleSnapshotTemplateRequest req = CreateSampleSnapshotTemplateRequest.fromJsonString(params, CreateSampleSnapshotTemplateRequest.class);                          CreateSampleSnapshotTemplateResponse resp = client.CreateSampleSnapshotTemplate(req);                          System.out.println(CreateSampleSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1914,视频处理,参数模板相关接口,创建水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.CreateTranscodeTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.CreateTranscodeTemplateResponse;  public class CreateTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateTranscodeTemplateRequest req = CreateTranscodeTemplateRequest.fromJsonString(params, CreateTranscodeTemplateRequest.class);                          CreateTranscodeTemplateResponse resp = client.CreateTranscodeTemplate(req);                          System.out.println(CreateTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1915,视频处理,参数模板相关接口,删除转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.CreateWatermarkTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.CreateWatermarkTemplateResponse;  public class CreateWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateWatermarkTemplateRequest req = CreateWatermarkTemplateRequest.fromJsonString(params, CreateWatermarkTemplateRequest.class);                          CreateWatermarkTemplateResponse resp = client.CreateWatermarkTemplate(req);                          System.out.println(CreateWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1916,视频处理,参数模板相关接口,删除雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateResponse;  public class DeleteAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAnimatedGraphicsTemplateRequest req = DeleteAnimatedGraphicsTemplateRequest.fromJsonString(params, DeleteAnimatedGraphicsTemplateRequest.class);                          DeleteAnimatedGraphicsTemplateResponse resp = client.DeleteAnimatedGraphicsTemplate(req);                          System.out.println(DeleteAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1917,视频处理,参数模板相关接口,删除采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateResponse;  public class DeleteAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAnimatedGraphicsTemplateRequest req = DeleteAnimatedGraphicsTemplateRequest.fromJsonString(params, DeleteAnimatedGraphicsTemplateRequest.class);                          DeleteAnimatedGraphicsTemplateResponse resp = client.DeleteAnimatedGraphicsTemplate(req);                          System.out.println(DeleteAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1918,视频处理,参数模板相关接口,删除指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteAnimatedGraphicsTemplateResponse;  public class DeleteAnimatedGraphicsTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAnimatedGraphicsTemplateRequest req = DeleteAnimatedGraphicsTemplateRequest.fromJsonString(params, DeleteAnimatedGraphicsTemplateRequest.class);                          DeleteAnimatedGraphicsTemplateResponse resp = client.DeleteAnimatedGraphicsTemplate(req);                          System.out.println(DeleteAnimatedGraphicsTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1919,视频处理,参数模板相关接口,删除转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteImageSpriteTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteImageSpriteTemplateResponse;  public class DeleteImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteImageSpriteTemplateRequest req = DeleteImageSpriteTemplateRequest.fromJsonString(params, DeleteImageSpriteTemplateRequest.class);                          DeleteImageSpriteTemplateResponse resp = client.DeleteImageSpriteTemplate(req);                          System.out.println(DeleteImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1920,视频处理,参数模板相关接口,删除水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteSnapshotByTimeOffsetTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteSnapshotByTimeOffsetTemplateResponse;  public class DeleteSnapshotByTimeOffsetTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteSnapshotByTimeOffsetTemplateRequest req = DeleteSnapshotByTimeOffsetTemplateRequest.fromJsonString(params, DeleteSnapshotByTimeOffsetTemplateRequest.class);                          DeleteSnapshotByTimeOffsetTemplateResponse resp = client.DeleteSnapshotByTimeOffsetTemplate(req);                          System.out.println(DeleteSnapshotByTimeOffsetTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1921,视频处理,参数模板相关接口,获取转动图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteTranscodeTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteTranscodeTemplateResponse;  public class DeleteTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTranscodeTemplateRequest req = DeleteTranscodeTemplateRequest.fromJsonString(params, DeleteTranscodeTemplateRequest.class);                          DeleteTranscodeTemplateResponse resp = client.DeleteTranscodeTemplate(req);                          System.out.println(DeleteTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1922,视频处理,参数模板相关接口,获取雪碧图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteTranscodeTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteTranscodeTemplateResponse;  public class DeleteTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteTranscodeTemplateRequest req = DeleteTranscodeTemplateRequest.fromJsonString(params, DeleteTranscodeTemplateRequest.class);                          DeleteTranscodeTemplateResponse resp = client.DeleteTranscodeTemplate(req);                          System.out.println(DeleteTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1923,视频处理,参数模板相关接口,获取采样截图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DeleteWatermarkTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.DeleteWatermarkTemplateResponse;  public class DeleteWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteWatermarkTemplateRequest req = DeleteWatermarkTemplateRequest.fromJsonString(params, DeleteWatermarkTemplateRequest.class);                          DeleteWatermarkTemplateResponse resp = client.DeleteWatermarkTemplate(req);                          System.out.println(DeleteWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1924,视频处理,参数模板相关接口,获取指定时间点截图模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeAnimatedGraphicsTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeAnimatedGraphicsTemplatesResponse;  public class DescribeAnimatedGraphicsTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAnimatedGraphicsTemplatesRequest req = DescribeAnimatedGraphicsTemplatesRequest.fromJsonString(params, DescribeAnimatedGraphicsTemplatesRequest.class);                          DescribeAnimatedGraphicsTemplatesResponse resp = client.DescribeAnimatedGraphicsTemplates(req);                          System.out.println(DescribeAnimatedGraphicsTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1925,视频处理,参数模板相关接口,获取转码模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeImageSpriteTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeImageSpriteTemplatesResponse;  public class DescribeImageSpriteTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeImageSpriteTemplatesRequest req = DescribeImageSpriteTemplatesRequest.fromJsonString(params, DescribeImageSpriteTemplatesRequest.class);                          DescribeImageSpriteTemplatesResponse resp = client.DescribeImageSpriteTemplates(req);                          System.out.println(DescribeImageSpriteTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1926,视频处理,参数模板相关接口,获取水印模板列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeSampleSnapshotTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeSampleSnapshotTemplatesResponse;  public class DescribeSampleSnapshotTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSampleSnapshotTemplatesRequest req = DescribeSampleSnapshotTemplatesRequest.fromJsonString(params, DescribeSampleSnapshotTemplatesRequest.class);                          DescribeSampleSnapshotTemplatesResponse resp = client.DescribeSampleSnapshotTemplates(req);                          System.out.println(DescribeSampleSnapshotTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1927,视频处理,参数模板相关接口,修改转动图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeSnapshotByTimeOffsetTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeSnapshotByTimeOffsetTemplatesResponse;  public class DescribeSnapshotByTimeOffsetTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeSnapshotByTimeOffsetTemplatesRequest req = DescribeSnapshotByTimeOffsetTemplatesRequest.fromJsonString(params, DescribeSnapshotByTimeOffsetTemplatesRequest.class);                          DescribeSnapshotByTimeOffsetTemplatesResponse resp = client.DescribeSnapshotByTimeOffsetTemplates(req);                          System.out.println(DescribeSnapshotByTimeOffsetTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1928,视频处理,参数模板相关接口,修改雪碧图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeTranscodeTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeTranscodeTemplatesResponse;  public class DescribeTranscodeTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeTranscodeTemplatesRequest req = DescribeTranscodeTemplatesRequest.fromJsonString(params, DescribeTranscodeTemplatesRequest.class);                          DescribeTranscodeTemplatesResponse resp = client.DescribeTranscodeTemplates(req);                          System.out.println(DescribeTranscodeTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1929,视频处理,参数模板相关接口,修改采样截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeWatermarkTemplatesRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeWatermarkTemplatesResponse;  public class DescribeWatermarkTemplates {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWatermarkTemplatesRequest req = DescribeWatermarkTemplatesRequest.fromJsonString(params, DescribeWatermarkTemplatesRequest.class);                          DescribeWatermarkTemplatesResponse resp = client.DescribeWatermarkTemplates(req);                          System.out.println(DescribeWatermarkTemplatesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1930,视频处理,参数模板相关接口,修改指定时间点截图模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifyImageSpriteTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifyImageSpriteTemplateResponse;  public class ModifyImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyImageSpriteTemplateRequest req = ModifyImageSpriteTemplateRequest.fromJsonString(params, ModifyImageSpriteTemplateRequest.class);                          ModifyImageSpriteTemplateResponse resp = client.ModifyImageSpriteTemplate(req);                          System.out.println(ModifyImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1931,视频处理,参数模板相关接口,修改转码模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifyImageSpriteTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifyImageSpriteTemplateResponse;  public class ModifyImageSpriteTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyImageSpriteTemplateRequest req = ModifyImageSpriteTemplateRequest.fromJsonString(params, ModifyImageSpriteTemplateRequest.class);                          ModifyImageSpriteTemplateResponse resp = client.ModifyImageSpriteTemplate(req);                          System.out.println(ModifyImageSpriteTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1932,视频处理,参数模板相关接口,修改水印模板,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifySampleSnapshotTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifySampleSnapshotTemplateResponse;  public class ModifySampleSnapshotTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifySampleSnapshotTemplateRequest req = ModifySampleSnapshotTemplateRequest.fromJsonString(params, ModifySampleSnapshotTemplateRequest.class);                          ModifySampleSnapshotTemplateResponse resp = client.ModifySampleSnapshotTemplate(req);                          System.out.println(ModifySampleSnapshotTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1933,视频处理,视频处理相关接口,创建工作流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifyTranscodeTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifyTranscodeTemplateResponse;  public class ModifyTranscodeTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyTranscodeTemplateRequest req = ModifyTranscodeTemplateRequest.fromJsonString(params, ModifyTranscodeTemplateRequest.class);                          ModifyTranscodeTemplateResponse resp = client.ModifyTranscodeTemplate(req);                          System.out.println(ModifyTranscodeTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1934,视频处理,视频处理相关接口,删除工作流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1935,视频处理,视频处理相关接口,获取工作流列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ModifyWatermarkTemplateRequest; import com.tencentcloudapi.mps.v20190612.models.ModifyWatermarkTemplateResponse;  public class ModifyWatermarkTemplate {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyWatermarkTemplateRequest req = ModifyWatermarkTemplateRequest.fromJsonString(params, ModifyWatermarkTemplateRequest.class);                          ModifyWatermarkTemplateResponse resp = client.ModifyWatermarkTemplate(req);                          System.out.println(ModifyWatermarkTemplateRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1936,视频处理,视频处理相关接口,禁用工作流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsResponse;  public class DescribeWorkflows {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWorkflowsRequest req = DescribeWorkflowsRequest.fromJsonString(params, DescribeWorkflowsRequest.class);                          DescribeWorkflowsResponse resp = client.DescribeWorkflows(req);                          System.out.println(DescribeWorkflowsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1937,视频处理,视频处理相关接口,启用工作流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsResponse;  public class DescribeWorkflows {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWorkflowsRequest req = DescribeWorkflowsRequest.fromJsonString(params, DescribeWorkflowsRequest.class);                          DescribeWorkflowsResponse resp = client.DescribeWorkflows(req);                          System.out.println(DescribeWorkflowsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1938,视频处理,视频处理相关接口,发起视频处理,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsRequest; import com.tencentcloudapi.mps.v20190612.models.DescribeWorkflowsResponse;  public class DescribeWorkflows {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeWorkflowsRequest req = DescribeWorkflowsRequest.fromJsonString(params, DescribeWorkflowsRequest.class);                          DescribeWorkflowsResponse resp = client.DescribeWorkflows(req);                          System.out.println(DescribeWorkflowsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1939,视频处理,视频处理相关接口,重设工作流,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.DisableWorkflowRequest; import com.tencentcloudapi.mps.v20190612.models.DisableWorkflowResponse;  public class DisableWorkflow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             DisableWorkflowRequest req = DisableWorkflowRequest.fromJsonString(params, DisableWorkflowRequest.class);                          DisableWorkflowResponse resp = client.DisableWorkflow(req);                          System.out.println(DisableWorkflowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1940,SSL证书管理服务,证书相关接口,删除证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.mps.v20190612.MpsClient;  import com.tencentcloudapi.mps.v20190612.models.ResetWorkflowRequest; import com.tencentcloudapi.mps.v20190612.models.ResetWorkflowResponse;  public class ResetWorkflow {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""mps.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      MpsClient client = new MpsClient(cred, """", clientProfile);                          String params = ""{}"";             ResetWorkflowRequest req = ResetWorkflowRequest.fromJsonString(params, ResetWorkflowRequest.class);                          ResetWorkflowResponse resp = client.ResetWorkflow(req);                          System.out.println(ResetWorkflowRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1941,SSL证书管理服务,证书相关接口,获取证书列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.wss.v20180426.WssClient;  import com.tencentcloudapi.wss.v20180426.models.DeleteCertRequest; import com.tencentcloudapi.wss.v20180426.models.DeleteCertResponse;  public class DeleteCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""wss.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      WssClient client = new WssClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteCertRequest req = DeleteCertRequest.fromJsonString(params, DeleteCertRequest.class);                          DeleteCertResponse resp = client.DeleteCert(req);                          System.out.println(DeleteCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1942,SSL证书管理服务,证书相关接口,上传证书,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.wss.v20180426.WssClient;  import com.tencentcloudapi.wss.v20180426.models.DescribeCertListRequest; import com.tencentcloudapi.wss.v20180426.models.DescribeCertListResponse;  public class DescribeCertList {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""wss.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      WssClient client = new WssClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeCertListRequest req = DescribeCertListRequest.fromJsonString(params, DescribeCertListRequest.class);                          DescribeCertListResponse resp = client.DescribeCertList(req);                          System.out.println(DescribeCertListRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1943,云 HDFS,挂载点相关接口,创建挂载点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.wss.v20180426.WssClient;  import com.tencentcloudapi.wss.v20180426.models.UploadCertRequest; import com.tencentcloudapi.wss.v20180426.models.UploadCertResponse;  public class UploadCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""wss.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      WssClient client = new WssClient(cred, """", clientProfile);                          String params = ""{}"";             UploadCertRequest req = UploadCertRequest.fromJsonString(params, UploadCertRequest.class);                          UploadCertResponse resp = client.UploadCert(req);                          System.out.println(UploadCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1944,云 HDFS,挂载点相关接口,删除挂载点,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.wss.v20180426.WssClient;  import com.tencentcloudapi.wss.v20180426.models.UploadCertRequest; import com.tencentcloudapi.wss.v20180426.models.UploadCertResponse;  public class UploadCert {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""wss.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      WssClient client = new WssClient(cred, """", clientProfile);                          String params = ""{}"";             UploadCertRequest req = UploadCertRequest.fromJsonString(params, UploadCertRequest.class);                          UploadCertResponse resp = client.UploadCert(req);                          System.out.println(UploadCertRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1945,云 HDFS,挂载点相关接口,查看挂载点详细信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateMountPointRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateMountPointResponse;  public class CreateMountPoint {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateMountPointRequest req = CreateMountPointRequest.fromJsonString(params, CreateMountPointRequest.class);                          CreateMountPointResponse resp = client.CreateMountPoint(req);                          System.out.println(CreateMountPointRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1946,云 HDFS,挂载点相关接口,查看挂载点列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DeleteMountPointRequest; import com.tencentcloudapi.chdfs.v20190718.models.DeleteMountPointResponse;  public class DeleteMountPoint {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteMountPointRequest req = DeleteMountPointRequest.fromJsonString(params, DeleteMountPointRequest.class);                          DeleteMountPointResponse resp = client.DeleteMountPoint(req);                          System.out.println(DeleteMountPointRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1947,云 HDFS,挂载点相关接口,修改挂载点属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DescribeMountPointsRequest; import com.tencentcloudapi.chdfs.v20190718.models.DescribeMountPointsResponse;  public class DescribeMountPoints {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeMountPointsRequest req = DescribeMountPointsRequest.fromJsonString(params, DescribeMountPointsRequest.class);                          DescribeMountPointsResponse resp = client.DescribeMountPoints(req);                          System.out.println(DescribeMountPointsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1948,云 HDFS,文件系统相关接口,创建文件系统,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.ModifyMountPointRequest; import com.tencentcloudapi.chdfs.v20190718.models.ModifyMountPointResponse;  public class ModifyMountPoint {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyMountPointRequest req = ModifyMountPointRequest.fromJsonString(params, ModifyMountPointRequest.class);                          ModifyMountPointResponse resp = client.ModifyMountPoint(req);                          System.out.println(ModifyMountPointRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1949,云 HDFS,文件系统相关接口,删除文件系统,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateFileSystemRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateFileSystemResponse;  public class CreateFileSystem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateFileSystemRequest req = CreateFileSystemRequest.fromJsonString(params, CreateFileSystemRequest.class);                          CreateFileSystemResponse resp = client.CreateFileSystem(req);                          System.out.println(CreateFileSystemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1950,云 HDFS,文件系统相关接口,查看文件系统详细信息,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateFileSystemRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateFileSystemResponse;  public class CreateFileSystem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateFileSystemRequest req = CreateFileSystemRequest.fromJsonString(params, CreateFileSystemRequest.class);                          CreateFileSystemResponse resp = client.CreateFileSystem(req);                          System.out.println(CreateFileSystemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1951,云 HDFS,文件系统相关接口,查看文件系统列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DeleteFileSystemRequest; import com.tencentcloudapi.chdfs.v20190718.models.DeleteFileSystemResponse;  public class DeleteFileSystem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteFileSystemRequest req = DeleteFileSystemRequest.fromJsonString(params, DeleteFileSystemRequest.class);                          DeleteFileSystemResponse resp = client.DeleteFileSystem(req);                          System.out.println(DeleteFileSystemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1952,云 HDFS,文件系统相关接口,修改文件系统属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DescribeFileSystemsRequest; import com.tencentcloudapi.chdfs.v20190718.models.DescribeFileSystemsResponse;  public class DescribeFileSystems {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeFileSystemsRequest req = DescribeFileSystemsRequest.fromJsonString(params, DescribeFileSystemsRequest.class);                          DescribeFileSystemsResponse resp = client.DescribeFileSystems(req);                          System.out.println(DescribeFileSystemsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1953,云 HDFS,权限组相关接口,创建权限组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.ModifyFileSystemRequest; import com.tencentcloudapi.chdfs.v20190718.models.ModifyFileSystemResponse;  public class ModifyFileSystem {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyFileSystemRequest req = ModifyFileSystemRequest.fromJsonString(params, ModifyFileSystemRequest.class);                          ModifyFileSystemResponse resp = client.ModifyFileSystem(req);                          System.out.println(ModifyFileSystemRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1954,云 HDFS,权限组相关接口,删除权限组,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessGroupRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessGroupResponse;  public class CreateAccessGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAccessGroupRequest req = CreateAccessGroupRequest.fromJsonString(params, CreateAccessGroupRequest.class);                          CreateAccessGroupResponse resp = client.CreateAccessGroup(req);                          System.out.println(CreateAccessGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1955,云 HDFS,权限组相关接口,查看权限组列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DeleteAccessGroupRequest; import com.tencentcloudapi.chdfs.v20190718.models.DeleteAccessGroupResponse;  public class DeleteAccessGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DeleteAccessGroupRequest req = DeleteAccessGroupRequest.fromJsonString(params, DeleteAccessGroupRequest.class);                          DeleteAccessGroupResponse resp = client.DeleteAccessGroup(req);                          System.out.println(DeleteAccessGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1956,云 HDFS,权限组相关接口,修改权限组属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DescribeAccessGroupsRequest; import com.tencentcloudapi.chdfs.v20190718.models.DescribeAccessGroupsResponse;  public class DescribeAccessGroups {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccessGroupsRequest req = DescribeAccessGroupsRequest.fromJsonString(params, DescribeAccessGroupsRequest.class);                          DescribeAccessGroupsResponse resp = client.DescribeAccessGroups(req);                          System.out.println(DescribeAccessGroupsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1957,云 HDFS,权限规则相关接口,批量创建权限规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.ModifyAccessGroupRequest; import com.tencentcloudapi.chdfs.v20190718.models.ModifyAccessGroupResponse;  public class ModifyAccessGroup {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccessGroupRequest req = ModifyAccessGroupRequest.fromJsonString(params, ModifyAccessGroupRequest.class);                          ModifyAccessGroupResponse resp = client.ModifyAccessGroup(req);                          System.out.println(ModifyAccessGroupRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1958,云 HDFS,权限规则相关接口,批量删除权限规则,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessRulesRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessRulesResponse;  public class CreateAccessRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAccessRulesRequest req = CreateAccessRulesRequest.fromJsonString(params, CreateAccessRulesRequest.class);                          CreateAccessRulesResponse resp = client.CreateAccessRules(req);                          System.out.println(CreateAccessRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1959,云 HDFS,权限规则相关接口,查看权限规则列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessRulesRequest; import com.tencentcloudapi.chdfs.v20190718.models.CreateAccessRulesResponse;  public class CreateAccessRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             CreateAccessRulesRequest req = CreateAccessRulesRequest.fromJsonString(params, CreateAccessRulesRequest.class);                          CreateAccessRulesResponse resp = client.CreateAccessRules(req);                          System.out.println(CreateAccessRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1960,云 HDFS,权限规则相关接口,批量修改权限规则属性,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.DescribeAccessRulesRequest; import com.tencentcloudapi.chdfs.v20190718.models.DescribeAccessRulesResponse;  public class DescribeAccessRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""chdfs.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             DescribeAccessRulesRequest req = DescribeAccessRulesRequest.fromJsonString(params, DescribeAccessRulesRequest.class);                          DescribeAccessRulesResponse resp = client.DescribeAccessRules(req);                          System.out.println(DescribeAccessRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1961,短信,发送短信相关接口,发送短信,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.chdfs.v20190718.ChdfsClient;  import com.tencentcloudapi.chdfs.v20190718.models.ModifyAccessRulesRequest; import com.tencentcloudapi.chdfs.v20190718.models.ModifyAccessRulesResponse;  public class ModifyAccessRules {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      ChdfsClient client = new ChdfsClient(cred, """", clientProfile);                          String params = ""{}"";             ModifyAccessRulesRequest req = ModifyAccessRulesRequest.fromJsonString(params, ModifyAccessRulesRequest.class);                          ModifyAccessRulesResponse resp = client.ModifyAccessRules(req);                          System.out.println(ModifyAccessRulesRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1962,短信,拉取状态相关接口,拉取短信回复状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.SendSmsRequest; import com.tencentcloudapi.sms.v20190711.models.SendSmsResponse;  public class SendSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             SendSmsRequest req = SendSmsRequest.fromJsonString(params, SendSmsRequest.class);                          SendSmsResponse resp = client.SendSms(req);                          System.out.println(SendSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1963,短信,拉取状态相关接口,拉取单个号码短信回复状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.SendSmsRequest; import com.tencentcloudapi.sms.v20190711.models.SendSmsResponse;  public class SendSms {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             SendSmsRequest req = SendSmsRequest.fromJsonString(params, SendSmsRequest.class);                          SendSmsResponse resp = client.SendSms(req);                          System.out.println(SendSmsRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1964,短信,拉取状态相关接口,拉取短信下发状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.PullSmsReplyStatusRequest; import com.tencentcloudapi.sms.v20190711.models.PullSmsReplyStatusResponse;  public class PullSmsReplyStatus {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             PullSmsReplyStatusRequest req = PullSmsReplyStatusRequest.fromJsonString(params, PullSmsReplyStatusRequest.class);                          PullSmsReplyStatusResponse resp = client.PullSmsReplyStatus(req);                          System.out.println(PullSmsReplyStatusRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1965,短信,拉取状态相关接口,拉取单个号码短信下发状态,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.PullSmsReplyStatusByPhoneNumberRequest; import com.tencentcloudapi.sms.v20190711.models.PullSmsReplyStatusByPhoneNumberResponse;  public class PullSmsReplyStatusByPhoneNumber {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             PullSmsReplyStatusByPhoneNumberRequest req = PullSmsReplyStatusByPhoneNumberRequest.fromJsonString(params, PullSmsReplyStatusByPhoneNumberRequest.class);                          PullSmsReplyStatusByPhoneNumberResponse resp = client.PullSmsReplyStatusByPhoneNumber(req);                          System.out.println(PullSmsReplyStatusByPhoneNumberRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1966,域名注册,域名相关接口,域名注册检查,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.PullSmsSendStatusByPhoneNumberRequest; import com.tencentcloudapi.sms.v20190711.models.PullSmsSendStatusByPhoneNumberResponse;  public class PullSmsSendStatusByPhoneNumber {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             PullSmsSendStatusByPhoneNumberRequest req = PullSmsSendStatusByPhoneNumberRequest.fromJsonString(params, PullSmsSendStatusByPhoneNumberRequest.class);                          PullSmsSendStatusByPhoneNumberResponse resp = client.PullSmsSendStatusByPhoneNumber(req);                          System.out.println(PullSmsSendStatusByPhoneNumberRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
1967,域名注册,域名相关接口,获取域名价格列表,"import com.tencentcloudapi.common.Credential; import com.tencentcloudapi.common.profile.ClientProfile; import com.tencentcloudapi.common.profile.HttpProfile; import com.tencentcloudapi.common.exception.TencentCloudSDKException;  import com.tencentcloudapi.sms.v20190711.SmsClient;  import com.tencentcloudapi.sms.v20190711.models.PullSmsSendStatusByPhoneNumberRequest; import com.tencentcloudapi.sms.v20190711.models.PullSmsSendStatusByPhoneNumberResponse;  public class PullSmsSendStatusByPhoneNumber {     public static void main(String [] args) {         try{              Credential cred = new Credential("""", """");                          HttpProfile httpProfile = new HttpProfile();             httpProfile.setEndpoint(""sms.tencentcloudapi.com"");              ClientProfile clientProfile = new ClientProfile();             clientProfile.setHttpProfile(httpProfile);                                      SmsClient client = new SmsClient(cred, """", clientProfile);                          String params = ""{}"";             PullSmsSendStatusByPhoneNumberRequest req = PullSmsSendStatusByPhoneNumberRequest.fromJsonString(params, PullSmsSendStatusByPhoneNumberRequest.class);                          PullSmsSendStatusByPhoneNumberResponse resp = client.PullSmsSendStatusByPhoneNumber(req);                          System.out.println(PullSmsSendStatusByPhoneNumberRequest.toJsonString(resp));         } catch (TencentCloudSDKException e) {                 System.out.println(e.toString());         }      }      }"
